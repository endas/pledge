/* import.sql for MySQL server*/

/* Create Triggers for Table Inserts and Updates*/
CREATE TRIGGER TRG_ADDRESS_INSERT AFTER INSERT ON ADDRESS  FOR EACH ROW INSERT INTO ADDRESSHISTORY(ADDRESSID, ADDRESSONE, ADDRESSTWO, CITY, STATEPROVINCEREGION, POSTCODE, COUNTRY, CREATEDBYID, UPDATEDBYID, DATECREATED, DATEUPDATED) VALUES (NEW.ADDRESSID, NEW.ADDRESSONE, NEW.ADDRESSTWO, NEW.CITY, NEW.STATEPROVINCEREGION, NEW.POSTCODE, NEW.COUNTRY, NEW.CREATEDBYID, NEW.UPDATEDBYID, NEW.DATECREATED, NEW.DATEUPDATED);
CREATE TRIGGER TRG_ADDRESS_UPDATE AFTER UPDATE ON ADDRESS  FOR EACH ROW INSERT INTO ADDRESSHISTORY(ADDRESSID, ADDRESSONE, ADDRESSTWO, CITY, STATEPROVINCEREGION, POSTCODE, COUNTRY, CREATEDBYID, UPDATEDBYID, DATECREATED, DATEUPDATED) VALUES (NEW.ADDRESSID, NEW.ADDRESSONE, NEW.ADDRESSTWO, NEW.CITY, NEW.STATEPROVINCEREGION, NEW.POSTCODE, NEW.COUNTRY, NEW.CREATEDBYID, NEW.UPDATEDBYID, NEW.DATECREATED, NEW.DATEUPDATED);
CREATE TRIGGER TRG_REGISTEROFPLEDGES_INSERT AFTER INSERT ON REGISTEROFPLEDGES  FOR EACH ROW INSERT INTO REGISTEROFPLEDGESHISTORY(REGISTEROFPLEDGESID, CREATEDBYID, UPDATEDBYID, DATECREATED, DATEUPDATED) VALUES (NEW.REGISTEROFPLEDGESID, NEW.CREATEDBYID, NEW.UPDATEDBYID, NEW.DATECREATED, NEW.DATEUPDATED);
CREATE TRIGGER TRG_REGISTEROFPLEDGES_UPDATE AFTER UPDATE ON REGISTEROFPLEDGES  FOR EACH ROW INSERT INTO REGISTEROFPLEDGESHISTORY(REGISTEROFPLEDGESID, CREATEDBYID, UPDATEDBYID, DATECREATED, DATEUPDATED) VALUES (NEW.REGISTEROFPLEDGESID, NEW.CREATEDBYID, NEW.UPDATEDBYID, NEW.DATECREATED, NEW.DATEUPDATED);
	
CREATE TRIGGER TRG_SERVICEPLEDGE_INSERT AFTER INSERT ON SERVICEPLEDGE  FOR EACH ROW INSERT INTO SERVICEPLEDGEHISTORY(SERVICEPLEDGEID, PLEDGESERVICELEVELONE, PLEDGESERVICELEVELTWO, PLEDGESERVICELEVELTHREE, ADDITIONALINFORMATION, PLEDGESERVICEQUALIFICATION, PLEDGESERVICEDATEAVAILABLE, PLEDGESERVICEHOURSPERWEEK, CREATEDBYID, UPDATEDBYID, DATECREATED, DATEUPDATED) VALUES (NEW.SERVICEPLEDGEID, NEW.PLEDGESERVICELEVELONE, NEW.PLEDGESERVICELEVELTWO, NEW.PLEDGESERVICELEVELTHREE, NEW.ADDITIONALINFORMATION, NEW.PLEDGESERVICEQUALIFICATION, NEW.PLEDGESERVICEDATEAVAILABLE, NEW.PLEDGESERVICEHOURSPERWEEK, NEW.CREATEDBYID, NEW.UPDATEDBYID, NEW.DATECREATED, NEW.DATEUPDATED);
CREATE TRIGGER TRG_SERVICEPLEDGE_UPDATE AFTER UPDATE ON SERVICEPLEDGE  FOR EACH ROW INSERT INTO SERVICEPLEDGEHISTORY(SERVICEPLEDGEID, PLEDGESERVICELEVELONE, PLEDGESERVICELEVELTWO, PLEDGESERVICELEVELTHREE, ADDITIONALINFORMATION, PLEDGESERVICEQUALIFICATION, PLEDGESERVICEDATEAVAILABLE, PLEDGESERVICEHOURSPERWEEK, CREATEDBYID, UPDATEDBYID, DATECREATED, DATEUPDATED) VALUES (NEW.SERVICEPLEDGEID, NEW.PLEDGESERVICELEVELONE, NEW.PLEDGESERVICELEVELTWO, NEW.PLEDGESERVICELEVELTHREE, NEW.ADDITIONALINFORMATION, NEW.PLEDGESERVICEQUALIFICATION, NEW.PLEDGESERVICEDATEAVAILABLE, NEW.PLEDGESERVICEHOURSPERWEEK, NEW.CREATEDBYID, NEW.UPDATEDBYID, NEW.DATECREATED, NEW.DATEUPDATED);
CREATE TRIGGER TRG_GOODSPLEDGE_INSERT AFTER INSERT ON GOODSPLEDGE  FOR EACH ROW INSERT INTO GOODSPLEDGEHISTORY(GOODSPLEDGEID, GOODSCATEGORYONE, GOODSCATEGORYTWO, GOODSCATEGORYTHREE, GOODSSIZE, GOODSNEWORUSED, GOODSCONDITION, GOODSQUANTITY, ADDITIONALINFORMATION, ITEMSIZE, CREATEDBYID, UPDATEDBYID, DATECREATED, DATEUPDATED, DATEAVAILABLEFROM, DATEAVAILABLETO) VALUES (NEW.GOODSPLEDGEID, NEW.GOODSCATEGORYONE, NEW.GOODSCATEGORYTWO, NEW.GOODSCATEGORYTHREE, NEW.GOODSSIZE, NEW.GOODSNEWORUSED, NEW.GOODSCONDITION, NEW.GOODSQUANTITY, NEW.ADDITIONALINFORMATION, NEW.ITEMSIZE, NEW.CREATEDBYID, NEW.UPDATEDBYID, NEW.DATECREATED, NEW.DATEUPDATED, NEW.DATEAVAILABLEFROM,NEW.DATEAVAILABLETO);
CREATE TRIGGER TRG_GOODSPLEDGE_UPDATE AFTER UPDATE ON GOODSPLEDGE  FOR EACH ROW INSERT INTO GOODSPLEDGEHISTORY(GOODSPLEDGEID, GOODSCATEGORYONE, GOODSCATEGORYTWO, GOODSCATEGORYTHREE, GOODSSIZE, GOODSNEWORUSED, GOODSCONDITION, GOODSQUANTITY, ADDITIONALINFORMATION, ITEMSIZE, CREATEDBYID, UPDATEDBYID, DATECREATED, DATEUPDATED, DATEAVAILABLEFROM, DATEAVAILABLETO) VALUES (NEW.GOODSPLEDGEID, NEW.GOODSCATEGORYONE, NEW.GOODSCATEGORYTWO, NEW.GOODSCATEGORYTHREE, NEW.GOODSSIZE, NEW.GOODSNEWORUSED, NEW.GOODSCONDITION, NEW.GOODSQUANTITY, NEW.ADDITIONALINFORMATION, NEW.ITEMSIZE, NEW.CREATEDBYID, NEW.UPDATEDBYID, NEW.DATECREATED, NEW.DATEUPDATED, NEW.DATEAVAILABLEFROM,NEW.DATEAVAILABLETO);

CREATE TRIGGER TRG_REFERENCECATEGORY_INSERT AFTER INSERT ON REFERENCECATEGORY  FOR EACH ROW INSERT INTO REFERENCECATEGORYHISTORY(REFERENCECATEGORYID, REFERENCECATEGORYDESC, PARENTCATEGORYID, DESCRIPTION, CREATEDBYID, UPDATEDBYID, DATECREATED, DATEUPDATED) VALUES (NEW.REFERENCECATEGORYID, NEW.REFERENCECATEGORYDESC, NEW.PARENTCATEGORYID, NEW.DESCRIPTION, NEW.CREATEDBYID, NEW.UPDATEDBYID, NEW.DATECREATED, NEW.DATEUPDATED);
CREATE TRIGGER TRG_REFERENCECATEGORY_UPDATE AFTER UPDATE ON REFERENCECATEGORY  FOR EACH ROW INSERT INTO REFERENCECATEGORYHISTORY(REFERENCECATEGORYID, REFERENCECATEGORYDESC, PARENTCATEGORYID, DESCRIPTION, CREATEDBYID, UPDATEDBYID, DATECREATED, DATEUPDATED) VALUES (NEW.REFERENCECATEGORYID, NEW.REFERENCECATEGORYDESC, NEW.PARENTCATEGORYID, NEW.DESCRIPTION, NEW.CREATEDBYID, NEW.UPDATEDBYID, NEW.DATECREATED, NEW.DATEUPDATED);

CREATE TRIGGER TRG_REFERENCE_INSERT AFTER INSERT ON REFERENCE  FOR EACH ROW INSERT INTO REFERENCEHISTORY(REFERENCEID, REFTYPE, REFDESC, PARENTID, REFINDEX, DESCRIPTION, CREATEDBYID, UPDATEDBYID, DATECREATED, DATEUPDATED) VALUES (NEW.REFERENCEID, NEW.REFTYPE, NEW.REFDESC, NEW.PARENTID, NEW.REFINDEX, NEW.DESCRIPTION, NEW.CREATEDBYID, NEW.UPDATEDBYID, NEW.DATECREATED, NEW.DATEUPDATED);
CREATE TRIGGER TRG_REFERENCE_UPDATE AFTER UPDATE ON REFERENCE  FOR EACH ROW INSERT INTO REFERENCEHISTORY(REFERENCEID, REFTYPE, REFDESC, PARENTID, REFINDEX, DESCRIPTION, CREATEDBYID, UPDATEDBYID, DATECREATED, DATEUPDATED) VALUES (NEW.REFERENCEID, NEW.REFTYPE, NEW.REFDESC, NEW.PARENTID, NEW.REFINDEX, NEW.DESCRIPTION, NEW.CREATEDBYID, NEW.UPDATEDBYID, NEW.DATECREATED, NEW.DATEUPDATED);
CREATE TRIGGER TRG_LANDING_INSERT AFTER INSERT ON LANDING  FOR EACH ROW INSERT INTO LANDINGHISTORY(LANDINGID, CREATEDBYID, UPDATEDBYID, DATECREATED, DATEUPDATED) VALUES (NEW.LANDINGID, NEW.CREATEDBYID, NEW.UPDATEDBYID, NEW.DATECREATED, NEW.DATEUPDATED);
CREATE TRIGGER TRG_LANDING_UPDATE AFTER UPDATE ON LANDING  FOR EACH ROW INSERT INTO LANDINGHISTORY(LANDINGID, CREATEDBYID, UPDATEDBYID, DATECREATED, DATEUPDATED) VALUES (NEW.LANDINGID, NEW.CREATEDBYID, NEW.UPDATEDBYID, NEW.DATECREATED, NEW.DATEUPDATED);
CREATE TRIGGER TRG_VIEW_INSERT AFTER INSERT ON VIEW  FOR EACH ROW INSERT INTO VIEWHISTORY(VIEWID, VIEWNAME, CREATEDBYID, UPDATEDBYID, DATECREATED, DATEUPDATED) VALUES (NEW.VIEWID, NEW.VIEWNAME, NEW.CREATEDBYID, NEW.UPDATEDBYID, NEW.DATECREATED, NEW.DATEUPDATED);
CREATE TRIGGER TRG_VIEW_UPDATE AFTER UPDATE ON VIEW  FOR EACH ROW INSERT INTO VIEWHISTORY(VIEWID, VIEWNAME, CREATEDBYID, UPDATEDBYID, DATECREATED, DATEUPDATED) VALUES (NEW.VIEWID, NEW.VIEWNAME, NEW.CREATEDBYID, NEW.UPDATEDBYID, NEW.DATECREATED, NEW.DATEUPDATED);
CREATE TRIGGER TRG_MESSAGERESOURCE_INSERT AFTER INSERT ON MESSAGERESOURCE  FOR EACH ROW INSERT INTO MESSAGERESOURCEHISTORY(MESSAGERESOURCEID, MESSAGEKEY, LOCALE, LOCALEREFERENCEID, MESSAGE, CREATEDBYID, UPDATEDBYID, DATECREATED, DATEUPDATED) VALUES (NEW.MESSAGERESOURCEID, NEW.MESSAGEKEY, NEW.LOCALE, NEW.LOCALEREFERENCEID, NEW.MESSAGE, NEW.CREATEDBYID, NEW.UPDATEDBYID, NEW.DATECREATED, NEW.DATEUPDATED);
CREATE TRIGGER TRG_MESSAGERESOURCE_UPDATE AFTER UPDATE ON MESSAGERESOURCE  FOR EACH ROW INSERT INTO MESSAGERESOURCEHISTORY(MESSAGERESOURCEID, MESSAGEKEY, LOCALE, LOCALEREFERENCEID, MESSAGE, CREATEDBYID, UPDATEDBYID, DATECREATED, DATEUPDATED) VALUES (NEW.MESSAGERESOURCEID, NEW.MESSAGEKEY, NEW.LOCALE, NEW.LOCALEREFERENCEID, NEW.MESSAGE, NEW.CREATEDBYID, NEW.UPDATEDBYID, NEW.DATECREATED, NEW.DATEUPDATED);
CREATE TRIGGER TRG_APPLICATIONUSER_INSERT AFTER INSERT ON APPLICATIONUSER  FOR EACH ROW INSERT INTO APPLICATIONUSERHISTORY(APPLICATIONUSERID, USERNAME, PASSWORD, ENABLED, CREATEDBYID, UPDATEDBYID, DATECREATED, DATEUPDATED) VALUES (NEW.APPLICATIONUSERID, NEW.USERNAME, NEW.PASSWORD, NEW.ENABLED, NEW.CREATEDBYID, NEW.UPDATEDBYID, NEW.DATECREATED, NEW.DATEUPDATED);
CREATE TRIGGER TRG_APPLICATIONUSER_UPDATE AFTER UPDATE ON APPLICATIONUSER  FOR EACH ROW INSERT INTO APPLICATIONUSERHISTORY(APPLICATIONUSERID, USERNAME, PASSWORD, ENABLED, CREATEDBYID, UPDATEDBYID, DATECREATED, DATEUPDATED) VALUES (NEW.APPLICATIONUSERID, NEW.USERNAME, NEW.PASSWORD, NEW.ENABLED, NEW.CREATEDBYID, NEW.UPDATEDBYID, NEW.DATECREATED, NEW.DATEUPDATED);
CREATE TRIGGER TRG_APPLICATIONUSERDETAILS_INSERT AFTER INSERT ON APPLICATIONUSERDETAILS  FOR EACH ROW INSERT INTO APPLICATIONUSERDETAILSHISTORY(APPLICATIONUSERDETAILSID, CONTACTNAME, REPRESENTORGANISATION, TELEPHONENUMBER, ADDRESSONE, ADDRESSTWO, CITY, STATEPROVINCEREGION, POSTCODE, COUNTRY, EMAILADDRESS, CREATEDBYID, UPDATEDBYID, DATECREATED, DATEUPDATED) VALUES (NEW.APPLICATIONUSERDETAILSID, NEW.CONTACTNAME, NEW.REPRESENTORGANISATION, NEW.TELEPHONENUMBER, NEW.ADDRESSONE, NEW.ADDRESSTWO, NEW.CITY, NEW.STATEPROVINCEREGION, NEW.POSTCODE, NEW.COUNTRY, NEW.EMAILADDRESS, NEW.CREATEDBYID, NEW.UPDATEDBYID, NEW.DATECREATED, NEW.DATEUPDATED);
CREATE TRIGGER TRG_APPLICATIONUSERDETAILS_UPDATE AFTER UPDATE ON APPLICATIONUSERDETAILS  FOR EACH ROW INSERT INTO APPLICATIONUSERDETAILSHISTORY(APPLICATIONUSERDETAILSID, CONTACTNAME, REPRESENTORGANISATION, TELEPHONENUMBER, ADDRESSONE, ADDRESSTWO, CITY, STATEPROVINCEREGION, POSTCODE, COUNTRY, EMAILADDRESS, CREATEDBYID, UPDATEDBYID, DATECREATED, DATEUPDATED) VALUES (NEW.APPLICATIONUSERDETAILSID, NEW.CONTACTNAME, NEW.REPRESENTORGANISATION, NEW.TELEPHONENUMBER, NEW.ADDRESSONE, NEW.ADDRESSTWO, NEW.CITY, NEW.STATEPROVINCEREGION, NEW.POSTCODE, NEW.COUNTRY, NEW.EMAILADDRESS, NEW.CREATEDBYID, NEW.UPDATEDBYID, NEW.DATECREATED, NEW.DATEUPDATED);
DROP TRIGGER IF EXISTS TRG_ACCOMMODATIONPLEDGE_INSERT;
CREATE TRIGGER TRG_ACCOMMODATIONPLEDGE_INSERT AFTER INSERT ON ACCOMMODATIONPLEDGE  FOR EACH ROW INSERT INTO ACCOMMODATIONPLEDGEHISTORY(ACCOMMODATIONPLEDGEID, ADDRESSONE, ADDRESSTWO, CITY, STATEPROVINCEREGION, POSTCODE, COUNTRY, OWNEROCCUPIER, ACCOMMODATIONDATEFROM, ACCOMMODATIONDATETO, ACCOMMODATIONTYPE, ACCOMMODATIONCONDITION, NUMBEROFBEDS, VACANTORSHARED, OTHERAMENITIES,ADDITIONALINFORMATION, CREATEDBYID, UPDATEDBYID, DATECREATED, DATEUPDATED) VALUES (NEW.ACCOMMODATIONPLEDGEID, NEW.ADDRESSONE, NEW.ADDRESSTWO, NEW.CITY, NEW.STATEPROVINCEREGION, NEW.POSTCODE, NEW.COUNTRY, NEW.OWNEROCCUPIER, NEW.ACCOMMODATIONDATEFROM, NEW.ACCOMMODATIONDATETO, NEW.ACCOMMODATIONTYPE, NEW.ACCOMMODATIONCONDITION, NEW.NUMBEROFBEDS, NEW.VACANTORSHARED, NEW.OTHERAMENITIES,  NEW.ADDITIONALINFORMATION, NEW.createdbyid, NEW.updatedbyid, NEW.datecreated, NEW.dateupdated);
DROP TRIGGER IF EXISTS TRG_ACCOMMODATIONPLEDGE_UPDATE;
CREATE TRIGGER TRG_ACCOMMODATIONPLEDGE_UPDATE AFTER UPDATE ON ACCOMMODATIONPLEDGE  FOR EACH ROW INSERT INTO ACCOMMODATIONPLEDGEHISTORY(ACCOMMODATIONPLEDGEID, ADDRESSONE, ADDRESSTWO, CITY, STATEPROVINCEREGION, POSTCODE, COUNTRY, OWNEROCCUPIER, ACCOMMODATIONDATEFROM, ACCOMMODATIONDATETO, ACCOMMODATIONTYPE, ACCOMMODATIONCONDITION, NUMBEROFBEDS, VACANTORSHARED, OTHERAMENITIES,ADDITIONALINFORMATION, CREATEDBYID, UPDATEDBYID, DATECREATED, DATEUPDATED) VALUES (NEW.ACCOMMODATIONPLEDGEID, NEW.ADDRESSONE, NEW.ADDRESSTWO, NEW.CITY, NEW.STATEPROVINCEREGION, NEW.POSTCODE, NEW.COUNTRY, NEW.OWNEROCCUPIER, NEW.ACCOMMODATIONDATEFROM, NEW.ACCOMMODATIONDATETO, NEW.ACCOMMODATIONTYPE, NEW.ACCOMMODATIONCONDITION, NEW.NUMBEROFBEDS, NEW.VACANTORSHARED, NEW.OTHERAMENITIES,  NEW.ADDITIONALINFORMATION, NEW.createdbyid, NEW.updatedbyid, NEW.datecreated, NEW.dateupdated);
