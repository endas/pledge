package org.volunteertech.pledges.admin.view;

import org.volunteertech.pledges.admin.dao.ViewImpl;
import java.io.Serializable;


import org.volunteertech.pledges.localisation.dao.MessageResource;




/**
 * The Views that are contained in the application
 * The ViewTranslationBacking Bean supports the localisation of the View Screen
 * This class has been generated by the XSLT processor from the metadata and represents the
 * DataBase access handler for the View entity.
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
public class ViewTranslationBackingBeanImpl extends ViewImpl implements ViewTranslationBackingBean, Serializable { 

    private static final long serialVersionUID = 1L;
    
    /** The identifier for the Page Administration view */
    public static final Long VIEW_ID = Long.valueOf(9);
    
    /** The mapping key for the page title as displayed in the browser tab */
    public static String VIEW_TITLE_MAPPING_KEY = "view.form.title";
    
    /** The mapping key for the page header text as displayed at the top of the page */
    public static String VIEW_HEADER_MAPPING_KEY = "view.form.header";
    
    /** The mapping key for the form sub header */
    public static String VIEW_SUBHEADER_MAPPING_KEY = "view.form.subheader";
    
    
	/** The message resource mapping for the Label attached to the viewName property */  
	public static final String VIEWNAME_LABEL_MAPPING_KEY = "frmViewViewNameLabel";
	
	/** The message resource mapping for the place holder attached to the viewName property */  
	public static final String VIEWNAME_PLACEHOLDER_MAPPING_KEY = "frmViewViewNamePlaceHolder";

	/** The message resource mapping for the help text attached to the viewName property */  
	public static final String VIEWNAME_HELPBLOCK_MAPPING_KEY = "frmViewViewNameHelpBlock";

	/** The message resource mapping for the Label attached to the saveButton property */  
	public static final String SAVEBUTTON_LABEL_MAPPING_KEY = "frmViewSaveButtonLabel";
	
	/** The message resource mapping for the place holder attached to the saveButton property */  
	public static final String SAVEBUTTON_PLACEHOLDER_MAPPING_KEY = "frmViewSaveButtonPlaceHolder";

	/** The message resource mapping for the help text attached to the saveButton property */  
	public static final String SAVEBUTTON_HELPBLOCK_MAPPING_KEY = "frmViewSaveButtonHelpBlock";

    
	/** Entity Id */
	private Long id;

	/** localization messages are bound to a particular view allowing the messages for a distinct view to be loaded*/
	private Long viewId;

	
    /** id of a parent object used when adding objects via JSON enabled restful web services */
    private Long parentObjectId;
    
    
    /** the the newLocale setting which is the locale currently being updated */
    private Long newLocale;

    /** the title as displayed in the browser tab */
    private String formTitle;

    /** the page title as displayed at the top of the page */
    private String viewTitle;
    
    /** the form sub header as displayed below the form header */
	private String formSubHeader;
    
    
        
    private String viewNameLabelMessageKey;
    private String viewNameLabel;

    private String viewNamePlaceHolderMessageKey;
    private String viewNamePlaceHolder;
    
    private String viewNameHelpTextMessageKey;
    private String viewNameHelpText;
    
    private String viewNameTooltipMessageKey;
    private String viewNameTooltip;
    
    private String saveButtonLabelMessageKey;
    private String saveButtonLabel;

    private String saveButtonPlaceHolderMessageKey;
    private String saveButtonPlaceHolder;
    
    private String saveButtonHelpTextMessageKey;
    private String saveButtonHelpText;
    
    private String saveButtonTooltipMessageKey;
    private String saveButtonTooltip;

    
    /**
     * Default Constructor for the ViewTranslationBackingBean
     */
    public ViewTranslationBackingBeanImpl()
    {
    	setViewId(ViewTranslationBackingBeanImpl.VIEW_ID);
		viewNameLabelMessageKey = "";
		viewNameLabel = "";
		viewNamePlaceHolderMessageKey = "";
		viewNamePlaceHolder = "";
		viewNameHelpTextMessageKey = "";
		viewNameHelpText = "";
		viewNameTooltipMessageKey = "";
		viewNameTooltip = "";
		saveButtonLabelMessageKey = "";
		saveButtonLabel = "";
		saveButtonPlaceHolderMessageKey = "";
		saveButtonPlaceHolder = "";
		saveButtonHelpTextMessageKey = "";
		saveButtonHelpText = "";
		saveButtonTooltipMessageKey = "";
		saveButtonTooltip = "";

    }
    
    /*
     * Returns the Id for the underlying database table record
     */
	public Long getId()
	{
        return id;
    }

    /*
     * Sets the Id. This allows front-end forms to bind the id property
     */
	public void setId(Long id)
	{
        this.id = id;
    }
    
    /*
     * Returns the viewId to which the current translations are bound
     */
	public Long getViewId()
	{
        return viewId;
    }

    /*
     * Sets the viewId. This allows the page translations to be bound to a view
     */
	public void setViewId(Long viewId)
	{
        this.viewId = viewId;
    }
    

    /*
     * Returns the parentObjectId when this object has been populated via a restful webservice JSON mapping
     */
	public Long getParentObjectId()
	{
        return parentObjectId;
    }

    /*
     * Sets the parentObjectId. This allows restful web services to bind the parentId property when adding a new record.
     */
	public void setParentObjectId(Long parentObjectId)
	{
        this.parentObjectId = parentObjectId;
    }
    
    /*
     * Returns the newLocale setting which is the locale currently being updated
     */
	public Long getNewLocale()
	{
        return newLocale;
    }

    /*
     * Sets the the newLocale setting which is the locale currently being updated
     */
	public void setNewLocale(Long newLocale)
	{
        this.newLocale = newLocale;
    }

    /*
     * Returns the page title as displayed in the browser tab
     */
	public String getFormTitle()
	{
        return formTitle;
    }

    /*
     * Sets the page title as displayed in the browser tab
     */
	public void setFormTitle(String formTitle)
	{
        this.formTitle = formTitle;
    }
    
    
    /*
     * Returns the page title as displayed at the top of the page
     */
	public String getViewTitle()
	{
        return viewTitle;
    }

    /*
     * Sets the page title as displayed at the top of the page
     */
	public void setViewTitle(String viewTitle)
	{
        this.viewTitle = viewTitle;
    }
    

    /*
     * Returns the form sub header as displayed below the form header
     */
	public String getFormSubHeader()
	{
        return formSubHeader;
    }

    /*
     * Sets the form sub header as displayed below the form header
     */
	public void setFormSubHeader(String formSubHeader)
	{
        this.formSubHeader = formSubHeader;
    }
    

	
    
    
    /**
     * Sets the viewNameLabelMessageKey
     * @param viewNameLabelMessageKey
     */
    public void setViewNameLabelMessageKey(String viewNameLabelMessageKey)
    {
      this.viewNameLabelMessageKey = viewNameLabelMessageKey;
    }

    /**
     * Returns the viewNameLabelMessageKey
     * @return the viewNameLabelMessageKey
     */
    public String getViewNameLabelMessageKey()
    {
      return viewNameLabelMessageKey;
    }

    /**
     * Sets the viewNameLabel
     * @param viewNameLabel
     */
    public void setViewNameLabel(String viewNameLabel)
    {
      this.viewNameLabel = viewNameLabel;
    }

    /**
     * Returns the viewNameLabel
     * @return the viewNameLabel
     */
    public String getViewNameLabel()
    {
      return viewNameLabel;
    }
    
    
    /**
     * Sets the viewNamePlaceHolderMessageKey
     * @param viewNamePlaceHolderMessageKey
     */
    public void setViewNamePlaceHolderMessageKey(String viewNamePlaceHolderMessageKey)
    {
      this.viewNamePlaceHolderMessageKey = viewNamePlaceHolderMessageKey;
    }

    /**
     * Returns the viewNamePlaceHolderMessageKey
     * @return the viewNamePlaceHolderMessageKey
     */
    public String getViewNamePlaceHolderMessageKey()
    {
      return viewNamePlaceHolderMessageKey;
    }

    /**
     * Sets the viewNamePlaceHolder
     * @param viewNamePlaceHolder
     */
    public void setViewNamePlaceHolder(String viewNamePlaceHolder)
    {
      this.viewNamePlaceHolder = viewNamePlaceHolder;
    }

    /**
     * Returns the viewNamePlaceHolder
     * @return the viewNamePlaceHolder
     */
    public String getViewNamePlaceHolder()
    {
      return viewNamePlaceHolder;
    }    
    
    /**
     * Sets the viewNameHelpTextMessageKey
     * @param viewNameHelpTextMessageKey
     */
    public void setViewNameHelpTextMessageKey(String viewNameHelpTextMessageKey)
    {
      this.viewNameHelpTextMessageKey = viewNameHelpTextMessageKey;
    }

    /**
     * Returns the viewNameHelpTextMessageKey
     * @return the viewNameHelpTextMessageKey
     */
    public String getViewNameHelpTextMessageKey()
    {
      return viewNameHelpTextMessageKey;
    }

    /**
     * Sets the viewNameHelpText
     * @param viewNameHelpText
     */
    public void setViewNameHelpText(String viewNameHelpText)
    {
      this.viewNameHelpText = viewNameHelpText;
    }

    /**
     * Returns the viewNameHelpText
     * @return the viewNameHelpText
     */
    public String getViewNameHelpText()
    {
      return viewNameHelpText;
    }    
    
    /**
     * Sets the viewNameTooltipMessageKey
     * @param viewNameTooltipMessageKey
     */
    public void setViewNameTooltipMessageKey(String viewNameTooltipMessageKey)
    {
      this.viewNameTooltipMessageKey = viewNameTooltipMessageKey;
    }

    /**
     * Returns the viewNameTooltipMessageKey
     * @return the viewNameTooltipMessageKey
     */
    public String getViewNameTooltipMessageKey()
    {
      return viewNameTooltipMessageKey;
    }

    /**
     * Sets the viewNameTooltip
     * @param viewNameTooltip
     */
    public void setViewNameTooltip(String viewNameTooltip)
    {
      this.viewNameTooltip = viewNameTooltip;
    }

    /**
     * Returns the viewNameTooltip
     * @return the viewNameTooltip
     */
    public String getViewNameTooltip()
    {
      return viewNameTooltip;
    }    

    
    /**
     * Sets the saveButtonLabelMessageKey
     * @param saveButtonLabelMessageKey
     */
    public void setSaveButtonLabelMessageKey(String saveButtonLabelMessageKey)
    {
      this.saveButtonLabelMessageKey = saveButtonLabelMessageKey;
    }

    /**
     * Returns the saveButtonLabelMessageKey
     * @return the saveButtonLabelMessageKey
     */
    public String getSaveButtonLabelMessageKey()
    {
      return saveButtonLabelMessageKey;
    }

    /**
     * Sets the saveButtonLabel
     * @param saveButtonLabel
     */
    public void setSaveButtonLabel(String saveButtonLabel)
    {
      this.saveButtonLabel = saveButtonLabel;
    }

    /**
     * Returns the saveButtonLabel
     * @return the saveButtonLabel
     */
    public String getSaveButtonLabel()
    {
      return saveButtonLabel;
    }
    
    
    /**
     * Sets the saveButtonPlaceHolderMessageKey
     * @param saveButtonPlaceHolderMessageKey
     */
    public void setSaveButtonPlaceHolderMessageKey(String saveButtonPlaceHolderMessageKey)
    {
      this.saveButtonPlaceHolderMessageKey = saveButtonPlaceHolderMessageKey;
    }

    /**
     * Returns the saveButtonPlaceHolderMessageKey
     * @return the saveButtonPlaceHolderMessageKey
     */
    public String getSaveButtonPlaceHolderMessageKey()
    {
      return saveButtonPlaceHolderMessageKey;
    }

    /**
     * Sets the saveButtonPlaceHolder
     * @param saveButtonPlaceHolder
     */
    public void setSaveButtonPlaceHolder(String saveButtonPlaceHolder)
    {
      this.saveButtonPlaceHolder = saveButtonPlaceHolder;
    }

    /**
     * Returns the saveButtonPlaceHolder
     * @return the saveButtonPlaceHolder
     */
    public String getSaveButtonPlaceHolder()
    {
      return saveButtonPlaceHolder;
    }    
    
    /**
     * Sets the saveButtonHelpTextMessageKey
     * @param saveButtonHelpTextMessageKey
     */
    public void setSaveButtonHelpTextMessageKey(String saveButtonHelpTextMessageKey)
    {
      this.saveButtonHelpTextMessageKey = saveButtonHelpTextMessageKey;
    }

    /**
     * Returns the saveButtonHelpTextMessageKey
     * @return the saveButtonHelpTextMessageKey
     */
    public String getSaveButtonHelpTextMessageKey()
    {
      return saveButtonHelpTextMessageKey;
    }

    /**
     * Sets the saveButtonHelpText
     * @param saveButtonHelpText
     */
    public void setSaveButtonHelpText(String saveButtonHelpText)
    {
      this.saveButtonHelpText = saveButtonHelpText;
    }

    /**
     * Returns the saveButtonHelpText
     * @return the saveButtonHelpText
     */
    public String getSaveButtonHelpText()
    {
      return saveButtonHelpText;
    }    
    
    /**
     * Sets the saveButtonTooltipMessageKey
     * @param saveButtonTooltipMessageKey
     */
    public void setSaveButtonTooltipMessageKey(String saveButtonTooltipMessageKey)
    {
      this.saveButtonTooltipMessageKey = saveButtonTooltipMessageKey;
    }

    /**
     * Returns the saveButtonTooltipMessageKey
     * @return the saveButtonTooltipMessageKey
     */
    public String getSaveButtonTooltipMessageKey()
    {
      return saveButtonTooltipMessageKey;
    }

    /**
     * Sets the saveButtonTooltip
     * @param saveButtonTooltip
     */
    public void setSaveButtonTooltip(String saveButtonTooltip)
    {
      this.saveButtonTooltip = saveButtonTooltip;
    }

    /**
     * Returns the saveButtonTooltip
     * @return the saveButtonTooltip
     */
    public String getSaveButtonTooltip()
    {
      return saveButtonTooltip;
    }    


    /**
     * Checks for a newly created entity object
     * @return true if this is a newly created entity object meaning that it has not yet been persisted, otherwise false
     */
	public boolean isNew() {
		return (this.id == null);
	}
	
    
    
/*     @Override
     public String toString(){
     // TODO: To be implemented
    	return "TODO: to be done";
     }
*/     
}
    
    
    

