package org.volunteertech.pledges.admin.view;

import org.volunteertech.pledges.admin.dao.View;
import java.io.Serializable;


import org.volunteertech.pledges.localisation.dao.MessageResource;

import org.volunteertech.pledges.localisation.dao.MessageResource;




/**
 * The Views that are contained in the application
 * The ViewTranslationBacking Bean supports the localisation of the View Screen
 * This class has been generated by the XSLT processor from the metadata and represents the
 * DataBase access handler for the View entity.
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
public interface ViewTranslationBackingBean extends View{ 

    
    /*
     * Returns the Id for the underlying database table record
     */
	public Long getId();
	
    
    /*
     * Sets the Id. This allows front-end forms to bind the id property
     */
	public void setId(Long id);
	
	
    /*
     * Returns the parentObjectId when this object has been populated via a restful webservice JSON mapping
     */
	public Long getParentObjectId();
	

    /*
     * Sets the parentObjectId. This allows restful web services to bind the parentId property when adding a new record.
     */
	public void setParentObjectId(Long parentObjectId);
	

    
    
    /**
     * Sets the viewNameLabelMessageKey
     * @param viewNameLabelMessageKey
     */
    public void setViewNameLabelMessageKey(String viewNameLabelMessageKey);
    
    
    /**
     * Returns the viewNameLabelMessageKey
     * @return the viewNameLabelMessageKey
     */
    public String getViewNameLabelMessageKey();
    
    
    /**
     * Sets the viewNameLabel
     * @param viewNameLabel
     */
    public void setViewNameLabel(String viewNameLabel);
    
    
    /**
     * Returns the viewNameLabel
     * @return the viewNameLabel
     */
    public String getViewNameLabel();
    
    
    /**
     * Sets the viewNamePlaceHolderMessageKey
     * @param viewNamePlaceHolderMessageKey
     */
    public void setViewNamePlaceHolderMessageKey(String viewNamePlaceHolderMessageKey);
    
    
    /**
     * Returns the viewNamePlaceHolderMessageKey
     * @return the viewNamePlaceHolderMessageKey
     */
    public String getViewNamePlaceHolderMessageKey();
    
    
    /**
     * Sets the viewNamePlaceHolder
     * @param viewNamePlaceHolder
     */
    public void setViewNamePlaceHolder(String viewNamePlaceHolder);
    
    
    /**
     * Returns the viewNamePlaceHolder
     * @return the viewNamePlaceHolder
     */
    public String getViewNamePlaceHolder();
    
    
    /**
     * Sets the viewNameHelpTextMessageKey
     * @param viewNameHelpTextMessageKey
     */
    public void setViewNameHelpTextMessageKey(String viewNameHelpTextMessageKey);
    
    
    /**
     * Returns the viewNameHelpTextMessageKey
     * @return the viewNameHelpTextMessageKey
     */
    public String getViewNameHelpTextMessageKey();
    
    
    /**
     * Sets the viewNameHelpText
     * @param viewNameHelpText
     */
    public void setViewNameHelpText(String viewNameHelpText);
    
    
    /**
     * Returns the viewNameHelpText
     * @return the viewNameHelpText
     */
    public String getViewNameHelpText();
    
    
    /**
     * Sets the viewNameTooltipMessageKey
     * @param viewNameTooltipMessageKey
     */
    public void setViewNameTooltipMessageKey(String viewNameTooltipMessageKey);
    
    
    /**
     * Returns the viewNameTooltipMessageKey
     * @return the viewNameTooltipMessageKey
     */
    public String getViewNameTooltipMessageKey();
    
    
    /**
     * Sets the viewNameTooltip
     * @param viewNameTooltip
     */
    public void setViewNameTooltip(String viewNameTooltip);
    
    
    /**
     * Returns the viewNameTooltip
     * @return the viewNameTooltip
     */
    public String getViewNameTooltip();
    
        


    /**
     * Checks for a newly created entity object
     * @return true if this is a newly created entity object meaning that it has not yet been persisted, otherwise false
     */
	public boolean isNew();
	
    
    
     @Override
     public String toString();
     
}
    
    
    

