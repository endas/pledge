package org.volunteertech.pledges.admin.web;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.SortedMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import java.util.Locale;

import org.volunteertech.pledges.admin.dao.View;
import org.volunteertech.pledges.admin.dao.ViewImpl;
import org.volunteertech.pledges.admin.service.ViewService;
import org.volunteertech.pledges.admin.dao.ViewLoadException;
import org.volunteertech.pledges.admin.dao.ViewSaveException;
import org.volunteertech.pledges.admin.validator.ViewFormValidator;
import org.volunteertech.pledges.main.web.BaseController;
import org.volunteertech.pledges.users.security.SecurityUser;

import org.volunteertech.pledges.reference.ReferenceStore;


import org.volunteertech.pledges.localisation.dao.MessageResource;
import org.volunteertech.pledges.localisation.dao.MessageResourceImpl;




/**
 * The Views that are contained in the application
 * The Spring ViewRestController to handle restful web service requests.
 * This class has been generated by the XSLT processor from the metadata and represents the
 * the Spring ViewRestController to handle restful web service requests.
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
@RestController
public class ViewRestController extends BaseController
{
	final Logger logger = LoggerFactory.getLogger(ViewRestController.class);
	
	@Autowired
	private ReferenceStore referenceStore;
	
	@Autowired
	private ViewService viewService;
	
	


	/**
	 * Returns a JSON representation of all View records
	 * @return the JSON representation of all View.
	 */
	@RequestMapping(value = "/restful/view/list", method = RequestMethod.GET)
	@ResponseBody
    public List<View> showAllView(Authentication authentication, Locale locale) {
		logger.info("Inside restful getView method...");
		List <View> viewList = null;
		SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();		
		
		try{
			// TODO: Needs exception handling policy
	    	viewList = viewService.listView();
	    	viewList = viewService.translateReferenceValues(viewList, locale);
		}
		catch (Exception ex){
			logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}		
		
		
    	return viewList;
    }


	
	/**
	 * Returns a JSON representation of the View record that matches the id parameter
	 * @param id the primary key by which to search
	 * @return the View with the relevant primary key.
	 */
	@RequestMapping(value = "/restful/view", method = RequestMethod.GET)
	@ResponseBody
    public View getView(Authentication authentication, @RequestParam(value="id") String id) {
		logger.info("Inside restful getView method...");
		View view = null;
		SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();		
		
		try{
			// TODO: Needs exception handling policy
	    	view = viewService.load(new Long(id), userId);
		}
		catch (Exception ex){
			logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}		
		
		
    	return view;
    }
    
    @RequestMapping(value = "/restful/view/update", method = RequestMethod.POST)
    @ResponseBody
    public List<View> updateView(Authentication authentication, @RequestBody View view) {
        logger.debug("In the updateView controller and got Id: " + view.getId());

		SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();
        
		try{
			// TODO needs security update
			viewService.storeView(view, userId);
		}
		catch (Exception ex){
		// TODO needs custom exception handling
		logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}
    	List<View> viewList = viewService.listView();
        
        return viewList;
    }
    
    
    @RequestMapping(value = "/restful/view/new", method = RequestMethod.POST)
    @ResponseBody
    public List<View> addView(Authentication authentication, @RequestBody View view) {
        logger.debug("In the addView controller and got Id: " + view.getId());
        SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();

		try{
			// TODO needs security update
			viewService.storeView(view, userId);
		}
		catch (Exception ex){
		// TODO needs custom exception handling
		logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}
    	List<View> viewList = viewService.listView();
        
        return viewList;
    }
    
    
    
	/**
	 * Returns a JSON representation of the <code>List</code> of MessageResource records that
	 * are linked to the View identified by the id parameter.
	 * @param id the primary key of the View by which to search for the associated MessageResource records.
	 * @return A <code>List</code>of View records that are associated with the View
	 * identified by the id parameter.
	 */
	@RequestMapping(value = "/restful/view/messageresource/list", method = RequestMethod.GET)
    public List<MessageResource> getMessageResource(Authentication authentication, @RequestParam(value="id") String viewId, Locale locale) {
		logger.info("Inside restful getMessageResource method...");
		List<MessageResource> messageResourceList = null;
		SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();
		
		try{
			// TODO: Needs exception handling policy and calls moved inside the business object.
	    	messageResourceList = viewService.getMessageResource(new Long(viewId), userId);
	    	messageResourceList = this.viewService.translateMessageResourceReferenceValues(messageResourceList, locale);
			
		}
		catch (Exception ex){
			logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}		
		
		
    	return messageResourceList;
    }
    
    @RequestMapping(value = "/restful/view/messageresource/new", method = RequestMethod.POST)
    @ResponseBody
    public List<MessageResource> addMessageResource(Authentication authentication, @RequestBody MessageResourceImpl messageResource, Locale locale) {
        logger.debug("In the addMessageResource controller and got Id: " + messageResource.getId());
		List<MessageResource> messageResourceList = null;
		SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();
        		
		try{
			// TODO needs security update and move processing inside the business object
			messageResourceList = viewService.addMessageResourceToMessageResource(messageResource, messageResource.getParentObjectId(), userId);
			messageResourceList = this.viewService.translateMessageResourceReferenceValues(messageResourceList, locale);
		}
		catch (Exception ex){
		// TODO needs custom exception handling
		logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}
        return messageResourceList;
    }
    

    @RequestMapping(value = "/restful/view/messageresource/update", method = RequestMethod.POST)
    @ResponseBody
    public List<MessageResource> updateMessageResource(Authentication authentication, @RequestBody MessageResourceImpl messageResource, Locale locale) {
        logger.debug("In the updateMessageResource controller and got Id: " + messageResource.getId());
        List<MessageResource> messageResourceList = null;
		SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();        

		try{
			// TODO needs security update and move processing inside the business object
			
			messageResourceList = viewService.getViewBo().getViewDao().updateMessageResource(messageResource.getParentObjectId(), messageResource, userId);
			messageResourceList = this.viewService.translateMessageResourceReferenceValues(messageResourceList, locale);
	    }
		catch (Exception ex){
		// TODO needs custom exception handling
		logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}
        
        return messageResourceList;
    }

}
