package org.volunteertech.pledges.admin.dao;
import org.hibernate.SessionFactory;
import com.netgrains.security.AuthorisationException;
import com.netgrains.security.InvalidUserIDException;
import org.volunteertech.pledges.admin.dao.View;
import org.volunteertech.pledges.admin.dao.ViewHistory;
import org.volunteertech.pledges.admin.dao.ViewLoadException;
import org.volunteertech.pledges.admin.dao.ViewSaveException;
import java.util.List;
import java.util.Set;
import java.util.Date;
import java.math.BigDecimal;


import org.volunteertech.pledges.localisation.dao.MessageResource;



/**
 * The Views that are contained in the application
 * This Interface has been generated by the XSLT processor from the meta data and represents the
 * interface of the data access object(DAO) for the View entity.
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: * $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
public interface ViewDao
{

    /**
     * Allows Spring to set the container managed SessionFactory instance
     * @param a Spring managed SessionFactory instance
     */    
    public void setSessionFactory(SessionFactory sessionFactory);


    /**
     * Loads a View object based on the viewId column
     * @param viewId the primary key for the underlying record.
     * @ return a View object matching the parameter or null if none can be found. The
     * method also returns null if the parameter is null.
     */
    public View load(Long viewId, Long loggedInUserId) throws AuthorisationException, InvalidUserIDException;
    

    /**
     * Load all existing View objects from the database. Hibernate will generate the appropriate SQL,
     * send it to the database and populate a List of View objects with the data.
     * @return List a List of View objects.
     */
    public List<View> listView();
    
    
    /**
     * Load existing View objects from the database that have a viewName column
     * that matches the viewName parameter.
     * @return List a List of View objects that match the viewName parameter.
     */
    public List<View> listViewByViewName(String viewName);

    
    /**
     * Load existing View objects from the database that have a createdByID column
     * that matches the userId parameter.
     * @return List a List of View objects that match the userId parameter.
     */
    public List<View> listViewByCreatedById(Long userId);
    
    
    /**
     * Load all existing ViewHistory objects for a particular View from the database.
     * Hibernate will generate the appropriate SQL,
     * send it to the database and populate ViewHistory objects with the data.
     * @return List a List of ViewHistory objects.
     */
    public List<ViewHistory> listViewHistory(Long view);
    
    
    /**
     * Adds a MessageResource to the Set of associated MessageResource objects that represent the messageResource property
     * and that are defined by the one-to-many relationship defined as View.messageResource.
     * @return the updated <code>List</code> of the associated MessageResource objects that represent the messageResource property.
     */
    public List<MessageResource> addMessageResourceToMessageResource(MessageResource messageResource, Long viewId, Long userId) throws ViewSaveException, ViewLoadException, AuthorisationException, InvalidUserIDException;
    
    /**
     * Returns a List representing the Set of associated MessageResource objects that represent the messageResource property
     * and that are defined by the one-to-many relationship defined as View.messageResource.
     * @return the <code>List</code> of the associated MessageResource objects that represent the messageResource property.
     */
    public List<MessageResource> getMessageResource(Long viewId, Long userId) throws ViewLoadException, AuthorisationException, InvalidUserIDException;
    
    /**
     * Updates an MessageResource in the messageResource property and returns a List representing the Set of associated MessageResource objects that represent the messageResource property
     * and that are defined by the one-to-many relationship defined as View.messageResource.
     * @return the <code>List</code> of the associated MessageResource objects that represent the messageResource property.
     */
    public List<MessageResource> updateMessageResource(Long viewId, MessageResource messageResource, Long userId) throws ViewLoadException, AuthorisationException, InvalidUserIDException;
  
    
    
    /**
     * Creates a new entry in the VIEW table containing the parameters passed here.
     *
     * @param userID the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the database generated Id of the newly created record.
     */
    public Long createAndStoreView(View view, Long userId);


    /**
     * Updates an existing entry in the VIEW table containing the parameters passed here.
     * Only non-null parameters will be applied to the underlying table so preserving any existing entries.
     * @param the view the View object to update in the database.
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     */
    public void updateView(View view, Long userId) throws AuthorisationException, InvalidUserIDException;
    
    
    /**
     * Loads a ViewFilter object based on the participantID of the currently logged in user
     * @param userID the userID is checked for authorisation to view the record. It is also the key to load a against the createdByID
     * column of the underlying record. There should only ever be one or zero filter records per View.
     * @ return a ViewFilter object matching the parameter or a newly constructed, empty object if none can be found
     */
    public ViewFilter loadViewFilter(Long userID) throws ViewLoadException, AuthorisationException, InvalidUserIDException;


    
    /**
     * Creates a new entry in the VIEWFILTER table containing the parameters passed here.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the userId which is also the assigned Id for the newly created record.
     * @throws ViewSaveException on failure to save.  
     */
    public Long createAndStoreViewFilter(ViewFilter viewFilter, Long userId)
        throws ViewSaveException;
    
    
    /**
     * Updates an existing entry in the VIEWFILTER table and associated tables 
     * containing the parameters passed here. If the entry denoted by the userID does not exist then one is created.
     *	
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws ViewSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public Long updateViewFilter(ViewFilter viewFilter, Long userId)
        throws ViewLoadException, ViewSaveException, AuthorisationException, InvalidUserIDException;
    
	
}
    
