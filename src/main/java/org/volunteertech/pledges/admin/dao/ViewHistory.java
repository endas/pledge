package org.volunteertech.pledges.admin.dao;
import java.util.Date;
import java.math.BigDecimal;

/**
 * The Views that are contained in the application
 * This class has been generated by the XSLT processor from the metadata and represents the
 * DataBase access handler for the View entity.
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
public class ViewHistory
{
	/** Hibernate Id */
	private Long id;
	
	/** id from the parent table for which this represents an historic record **/
	private Long viewID;
	 
    
    /** the name of the view */
    private String viewName;
	     
    
    /** The user ID of the person that originally created the underlying record **/
    private Long createdByID;

    /** The user ID of the person that last updated the underlying record **/
    private Long updatedByID;

    /** The date that the underlying record was created DD/MM/YYYY-HH:MM format **/
    private Date dateCreated;

    /** The date that the underlying record was last updated DD/MM/YYYY-HH:MM format **/
    private Date dateUpdated;
    

    /**
     * Default Constructor for the View bean
     */
    public ViewHistory()
    {
    	viewID = Long.valueOf(0);
    	viewName = "";
		
    }
    
    /*
     * Returns the Id for the underlying database table record
     */
	public Long getId()
	{
        return id;
    }

	/**
	 * We usually do not manipulate the identity of an object, hence the setter method should be private.
	 */
	@SuppressWarnings("unused")
    private void setId(Long id)
    {
        this.id = id;
    }    


    /*
     * Returns the ViewID for the parent record
     */
	public Long getViewID()
	{
        return viewID;
    }

	/**
	 * We usually do not manipulate the identity of an object, hence the setter method should be private.
	 */
	@SuppressWarnings("unused")
    private void setViewID(Long viewID)
    {
        this.viewID = viewID;
    }    

    

    
    
    /**
     * Sets the name of the view
     * @param viewName is the name of the view
     */
    public void setViewName(String viewName)
    {
      this.viewName = viewName;
    }

    /**
     * Returns the name of the view
     * @return the name of the view
     */
    public String getViewName()
    {
      return viewName;
    }


    /**
     * sets the ID of the user that created the underlying record
     */
    public void setCreatedByID(Long createdByID)
    {
        this.createdByID = createdByID;
    }


    /**
     * gets the ID of the user that created the underlying record
     */
    public Long getCreatedByID()
    {
        return createdByID;
    }
     
     
    /**
     * sets the ID of the user that last updated the underlying record
     */
    public void setUpdatedByID(Long updatedByID)
    {
        this.updatedByID = updatedByID;
    }
     
     
    /**
     * gets the ID of the user that last updated the underlying record
     */
    public Long getUpdatedByID()
    {
        return updatedByID;
    }


    /**
     * sets the date that the underlying record was first created as a <code>java.util.Date</code> object
     */
    public void setDateCreated(Date dateCreated)
    {
        this.dateCreated = dateCreated;
    }

     
    /**
     * Gets the date that the underlying record was first created as a <code>java.util.Date</code> object
     */
    public Date getDateCreated()
    {
        return dateCreated;
    }

    /**
     * sets the date that the underlying record was last updated as a <code>java.util.Date</code> object
     */
    public void setDateUpdated(Date dateUpdated)
    {
        this.dateUpdated = dateUpdated;
    }


    
    /**
     * Gets the date that the underlying record was last updated as a <code>java.util.Date</code> object
     */
    public Date getDateUpdated()
    {
        return dateUpdated;
    }
    
     
}
    
    
    

