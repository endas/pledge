package org.volunteertech.pledges.reference.dao;
import org.hibernate.SessionFactory;
import com.netgrains.security.AuthorisationException;
import com.netgrains.security.InvalidUserIDException;
import org.volunteertech.pledges.reference.dao.Reference;
import org.volunteertech.pledges.reference.dao.ReferenceHistory;
import org.volunteertech.pledges.reference.dao.ReferenceLoadException;
import org.volunteertech.pledges.reference.dao.ReferenceSaveException;
import java.util.List;
import java.util.Set;
import java.util.Date;
import java.math.BigDecimal;

  
import org.volunteertech.pledges.reference.dao.ReferenceCategory;



/**
 * The reference screen is used to add/edit new/existing reference entries. The reference entries are used to populate dropdowns where a group of reference entries with a common column-value can be associated with a dropdown.
 * This Interface has been generated by the XSLT processor from the meta data and represents the
 * interface of the data access object(DAO) for the Reference entity.
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: * $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
public interface ReferenceDao
{

    /**
     * Allows Spring to set the container managed SessionFactory instance
     * @param a Spring managed SessionFactory instance
     */    
    public void setSessionFactory(SessionFactory sessionFactory);


    /**
     * Loads a Reference object based on the referenceId column
     * @param referenceId the primary key for the underlying record.
     * @ return a Reference object matching the parameter or null if none can be found. The
     * method also returns null if the parameter is null.
     */
    public Reference load(Long referenceId, Long loggedInUserId) throws AuthorisationException, InvalidUserIDException;
    

    /**
     * Load all existing Reference objects from the database. Hibernate will generate the appropriate SQL,
     * send it to the database and populate a List of Reference objects with the data.
     * @return List a List of Reference objects.
     */
    public List<Reference> listReference();
    
    
    /**
     * Load existing Reference objects from the database that have a refType column
     * that matches the refType parameter.
     * @return List a List of Reference objects that match the refType parameter.
     */
    public List<Reference> listReferenceByRefType(String refType);

    /**
     * Load existing Reference objects from the database that have a refDesc column
     * that matches the refDesc parameter.
     * @return List a List of Reference objects that match the refDesc parameter.
     */
    public List<Reference> listReferenceByRefDesc(String refDesc);

    /**
     * Load existing Reference objects from the database that have a parentId column
     * that matches the parentId parameter.
     * @return List a List of Reference objects that match the parentId parameter.
     */
    public List<Reference> listReferenceByParentId(Long parentId);

    /**
     * Load existing Reference objects from the database that have a refIndex column
     * that matches the refIndex parameter.
     * @return List a List of Reference objects that match the refIndex parameter.
     */
    public List<Reference> listReferenceByRefIndex(Long refIndex);

    /**
     * Load existing Reference objects from the database that have a description column
     * that matches the description parameter.
     * @return List a List of Reference objects that match the description parameter.
     */
    public List<Reference> listReferenceByDescription(String description);

    
    /**
     * Load existing Reference objects from the database that have a createdByID column
     * that matches the userId parameter.
     * @return List a List of Reference objects that match the userId parameter.
     */
    public List<Reference> listReferenceByCreatedById(Long userId);
    
    
    /**
     * Load all existing ReferenceHistory objects for a particular Reference from the database.
     * Hibernate will generate the appropriate SQL,
     * send it to the database and populate ReferenceHistory objects with the data.
     * @return List a List of ReferenceHistory objects.
     */
    public List<ReferenceHistory> listReferenceHistory(Long reference);
    
    
    /**
     * Load a <code>List</code> of Reference objects from the database that match the
     * referenceCategoryId parameter, the ReferenceCategory and the Reference being related by an association.
     * @return a <code>List</code> of Reference objects that match the referenceCategoryId parameter.
     */
    public List<Reference> listReferenceByReferenceCategoryId(Long  referenceCategoryId);
  
    
    
    /**
     * Creates a new entry in the REFERENCE table containing the parameters passed here.
     *
     * @param userID the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the database generated Id of the newly created record.
     */
    public Long createAndStoreReference(Reference reference, Long userId);


    /**
     * Updates an existing entry in the REFERENCE table containing the parameters passed here.
     * Only non-null parameters will be applied to the underlying table so preserving any existing entries.
     * @param the reference the Reference object to update in the database.
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     */
    public void updateReference(Reference reference, Long userId) throws AuthorisationException, InvalidUserIDException;
    
    
    /**
     * Loads a ReferenceFilter object based on the participantID of the currently logged in user
     * @param userID the userID is checked for authorisation to view the record. It is also the key to load a against the createdByID
     * column of the underlying record. There should only ever be one or zero filter records per Reference.
     * @ return a ReferenceFilter object matching the parameter or a newly constructed, empty object if none can be found
     */
    public ReferenceFilter loadReferenceFilter(Long userID) throws ReferenceLoadException, AuthorisationException, InvalidUserIDException;


    
    /**
     * Creates a new entry in the REFERENCEFILTER table containing the parameters passed here.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the userId which is also the assigned Id for the newly created record.
     * @throws ReferenceSaveException on failure to save.  
     */
    public Long createAndStoreReferenceFilter(ReferenceFilter referenceFilter, Long userId)
        throws ReferenceSaveException;
    
    
    /**
     * Updates an existing entry in the REFERENCEFILTER table and associated tables 
     * containing the parameters passed here. If the entry denoted by the userID does not exist then one is created.
     *	
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws ReferenceSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public Long updateReferenceFilter(ReferenceFilter referenceFilter, Long userId)
        throws ReferenceLoadException, ReferenceSaveException, AuthorisationException, InvalidUserIDException;
    
	
	/**
	 * Returns a List of the ReferenceCategory that own the Reference identified by the
	 * id given as a parameter.
	 * @param referenceId the id of the Reference for which the ReferenceCategory should be resolved.
	 * @param userId the userId of the currently logged in user.
	 */
	public List<ReferenceCategory> listReferenceCategoryByReferenceId(Long referenceId, Long userId);

}
    
