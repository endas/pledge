package org.volunteertech.pledges.reference.dao;
import java.util.Date;
import java.math.BigDecimal;

/**
 * The reference screen is used to add/edit new/existing reference entries. The reference entries are used to populate dropdowns where a group of reference entries with a common column-value can be associated with a dropdown.
 * This class has been generated by the XSLT processor from the metadata and represents the
 * DataBase access handler for the Reference entity.
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
public class ReferenceHistory
{
	/** Hibernate Id */
	private Long id;
	
	/** id from the parent table for which this represents an historic record **/
	private Long referenceID;
	 
    
    /** the reference type grouping for the entity */
    private String refType;
	
    /** the unique reference description within the reference type group */
    private String refDesc;
	
    /** the column-value that allows an entry to be linked to a parent entity */
    private Long parentId;
	
    /** the order in which the reference entity is placed in its column-value group */
    private Long refIndex;
	
    /** a user friendly description of the reference item */
    private String description;
	     
    
    /** The user ID of the person that originally created the underlying record **/
    private Long createdByID;

    /** The user ID of the person that last updated the underlying record **/
    private Long updatedByID;

    /** The date that the underlying record was created DD/MM/YYYY-HH:MM format **/
    private Date dateCreated;

    /** The date that the underlying record was last updated DD/MM/YYYY-HH:MM format **/
    private Date dateUpdated;
    

    /**
     * Default Constructor for the Reference bean
     */
    public ReferenceHistory()
    {
    	referenceID = new Long(0);
    	refType = "";
		refDesc = "";
		parentId = new Long("0");
		refIndex = new Long("0");
		description = "";
		
    }
    
    /*
     * Returns the Id for the underlying database table record
     */
	public Long getId()
	{
        return id;
    }

	/**
	 * We usually do not manipulate the identity of an object, hence the setter method should be private.
	 */
	@SuppressWarnings("unused")
    private void setId(Long id)
    {
        this.id = id;
    }    


    /*
     * Returns the ReferenceID for the parent record
     */
	public Long getReferenceID()
	{
        return referenceID;
    }

	/**
	 * We usually do not manipulate the identity of an object, hence the setter method should be private.
	 */
	@SuppressWarnings("unused")
    private void setReferenceID(Long referenceID)
    {
        this.referenceID = referenceID;
    }    

    

    
    
    /**
     * Sets the reference type grouping for the entity
     * @param refType is the reference type grouping for the entity
     */
    public void setRefType(String refType)
    {
      this.refType = refType;
    }

    /**
     * Returns the reference type grouping for the entity
     * @return the reference type grouping for the entity
     */
    public String getRefType()
    {
      return refType;
    }

    
    /**
     * Sets the unique reference description within the reference type group
     * @param refDesc is the unique reference description within the reference type group
     */
    public void setRefDesc(String refDesc)
    {
      this.refDesc = refDesc;
    }

    /**
     * Returns the unique reference description within the reference type group
     * @return the unique reference description within the reference type group
     */
    public String getRefDesc()
    {
      return refDesc;
    }

    
    /**
     * Sets the column-value that allows an entry to be linked to a parent entity
     * @param parentId is the column-value that allows an entry to be linked to a parent entity
     */
    public void setParentId(Long parentId)
    {
      this.parentId = parentId;
    }

    /**
     * Returns the column-value that allows an entry to be linked to a parent entity
     * @return the column-value that allows an entry to be linked to a parent entity
     */
    public Long getParentId()
    {
      return parentId;
    }

    
    /**
     * Sets the order in which the reference entity is placed in its column-value group
     * @param refIndex is the order in which the reference entity is placed in its column-value group
     */
    public void setRefIndex(Long refIndex)
    {
      this.refIndex = refIndex;
    }

    /**
     * Returns the order in which the reference entity is placed in its column-value group
     * @return the order in which the reference entity is placed in its column-value group
     */
    public Long getRefIndex()
    {
      return refIndex;
    }

    
    /**
     * Sets a user friendly description of the reference item
     * @param description is a user friendly description of the reference item
     */
    public void setDescription(String description)
    {
      this.description = description;
    }

    /**
     * Returns a user friendly description of the reference item
     * @return a user friendly description of the reference item
     */
    public String getDescription()
    {
      return description;
    }


    /**
     * sets the ID of the user that created the underlying record
     */
    public void setCreatedByID(Long createdByID)
    {
        this.createdByID = createdByID;
    }


    /**
     * gets the ID of the user that created the underlying record
     */
    public Long getCreatedByID()
    {
        return createdByID;
    }
     
     
    /**
     * sets the ID of the user that last updated the underlying record
     */
    public void setUpdatedByID(Long updatedByID)
    {
        this.updatedByID = updatedByID;
    }
     
     
    /**
     * gets the ID of the user that last updated the underlying record
     */
    public Long getUpdatedByID()
    {
        return updatedByID;
    }


    /**
     * sets the date that the underlying record was first created as a <code>java.util.Date</code> object
     */
    public void setDateCreated(Date dateCreated)
    {
        this.dateCreated = dateCreated;
    }

     
    /**
     * Gets the date that the underlying record was first created as a <code>java.util.Date</code> object
     */
    public Date getDateCreated()
    {
        return dateCreated;
    }

    /**
     * sets the date that the underlying record was last updated as a <code>java.util.Date</code> object
     */
    public void setDateUpdated(Date dateUpdated)
    {
        this.dateUpdated = dateUpdated;
    }


    
    /**
     * Gets the date that the underlying record was last updated as a <code>java.util.Date</code> object
     */
    public Date getDateUpdated()
    {
        return dateUpdated;
    }
    
     
}
    
    
    

