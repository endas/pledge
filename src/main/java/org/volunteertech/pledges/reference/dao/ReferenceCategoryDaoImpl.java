package org.volunteertech.pledges.reference.dao;
import org.hibernate.SessionFactory;
import com.netgrains.security.Authorisation;
import com.netgrains.security.AuthorisationException;
import com.netgrains.security.InvalidUserIDException;
import org.volunteertech.pledges.reference.dao.ReferenceCategory;
import org.volunteertech.pledges.reference.dao.ReferenceCategoryHistory;
import org.volunteertech.pledges.reference.dao.ReferenceCategoryLoadException;
import org.volunteertech.pledges.reference.dao.ReferenceCategorySaveException;

import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.ArrayList;
import java.util.Arrays;
import java.math.BigDecimal;

import org.springframework.stereotype.Repository;
import org.springframework.util.StringUtils;


import org.volunteertech.pledges.reference.dao.Reference;




/**
 * The reference category screen is used to add/edit new/existing reference category entries. The reference entries are used to populate dropdowns where a group of reference entries with a common column-value can be associated with a dropdown.
 * This class has been generated by the XSLT processor from the metadata and represents the
 * implementation of the data access object for the ReferenceCategory entity.
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: * $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
@Repository 
public class ReferenceCategoryDaoImpl implements ReferenceCategoryDao
{
    /**
     * The Hibernate SessionFactory instance
     */
    private SessionFactory sessionFactory;
    
    
    

    /**
     * Default Constructor for the ReferenceCategory entity data manager
     */
    public ReferenceCategoryDaoImpl()
    {
    	//Initialise the related Object stores
        
    }
    

    /**
     * Allows Spring to set the container managed SessionFactory instance
     * @param a Spring managed SessionFactory instance
     */    
    public void setSessionFactory(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }


    /**
     * Loads a ReferenceCategory object based on the referenceCategoryId column
     * @param ReferenceCategoryId the primary key for the underlying record.
     * @ return a ReferenceCategory object matching the parameter or null if none can be found. The
     * method also returns null if the parameter is null.
     */
    public ReferenceCategory load(Long referenceCategoryId, Long loggedInUserId) throws AuthorisationException, InvalidUserIDException
    {
        if (Authorisation.isAuthorisedView("ReferenceCategory", loggedInUserId, referenceCategoryId) == false)
        {
        	throw new AuthorisationException();
        }
    
    	ReferenceCategory hibernateEntity = null;
    	
        if (referenceCategoryId != null)
        {
			hibernateEntity = (ReferenceCategory)this.sessionFactory.getCurrentSession().get(ReferenceCategoryImpl.class, referenceCategoryId);

            // Load all related singular objects
            
        }
    	
        return hibernateEntity;
    }
    
    
    

    /**
     * Load all existing ReferenceCategory objects from the database. Hibernate will generate the appropriate SQL,
     * send it to the database and populate ReferenceCategory objects with the data.
     * @return List a List of ReferenceCategory objects.
     */
    public List<ReferenceCategory> listReferenceCategory()
    {
        @SuppressWarnings("unchecked")
        List<ReferenceCategory> result = this.sessionFactory.getCurrentSession().createQuery("from ReferenceCategoryImpl as referenceCategory order by referenceCategory.id asc").list();

        return result;
    }

    
    /**
     * Load existing ReferenceCategory objects from the database that have a referenceCategoryDesc column
     * that matches the referenceCategoryDesc parameter.
     * @return List a List of ReferenceCategory objects that match the referenceCategoryDesc parameter.
     */
    public List<ReferenceCategory> listReferenceCategoryByReferenceCategoryDesc(String referenceCategoryDesc)
    {
        @SuppressWarnings("unchecked")
        List<ReferenceCategory> result = this.sessionFactory.getCurrentSession().createQuery("from ReferenceCategoryImpl as referenceCategory where referenceCategory.referenceCategoryDesc = :referencecategorydesc order by referenceCategory.id asc").setParameter("referencecategorydesc", referenceCategoryDesc).list();

        return result;
    }

    /**
     * Load existing ReferenceCategory objects from the database that have a parentCategoryId column
     * that matches the parentCategoryId parameter.
     * @return List a List of ReferenceCategory objects that match the parentCategoryId parameter.
     */
    public List<ReferenceCategory> listReferenceCategoryByParentCategoryId(Long parentCategoryId)
    {
        @SuppressWarnings("unchecked")
        List<ReferenceCategory> result = this.sessionFactory.getCurrentSession().createQuery("from ReferenceCategoryImpl as referenceCategory where referenceCategory.parentCategoryId = :parentcategoryid order by referenceCategory.id asc").setParameter("parentcategoryid", parentCategoryId).list();

        return result;
    }

    /**
     * Load existing ReferenceCategory objects from the database that have a description column
     * that matches the description parameter.
     * @return List a List of ReferenceCategory objects that match the description parameter.
     */
    public List<ReferenceCategory> listReferenceCategoryByDescription(String description)
    {
        @SuppressWarnings("unchecked")
        List<ReferenceCategory> result = this.sessionFactory.getCurrentSession().createQuery("from ReferenceCategoryImpl as referenceCategory where referenceCategory.description = :description order by referenceCategory.id asc").setParameter("description", description).list();

        return result;
    }

    
    /**
     * Load existing ReferenceCategory objects from the database that have a createdByID column
     * that matches the createdById parameter.
     * @return List a List of ReferenceCategory objects that match the createdById parameter.
     */
    public List<ReferenceCategory> listReferenceCategoryByCreatedById(Long userId)
    {
        @SuppressWarnings("unchecked")
        List<ReferenceCategory> result = this.sessionFactory.getCurrentSession().createQuery("from ReferenceCategoryImpl as referenceCategory where referenceCategory.createdByID = :userId order by referenceCategory.id asc").setParameter("userId", userId).list();

        return result;
    }
    
    
    /**
     * Load all existing ReferenceCategoryHistory objects for a particular ReferenceCategory from the database.
     * Hibernate will generate the appropriate SQL,
     * send it to the database and populate a List of ReferenceCategoryHistory objects with the data.
     * @return List a List of ReferenceCategoryHistory objects.
     */
    public List<ReferenceCategoryHistory> listReferenceCategoryHistory(Long referenceCategory)
    {
        
        @SuppressWarnings("unchecked")
        List<ReferenceCategoryHistory> result = this.sessionFactory.getCurrentSession().createQuery("from ReferenceCategoryHistory as referenceCategoryHistory where referenceCategoryHistory.referenceCategoryId = ? order by referenceCategoryHistory.id asc").setLong(0, referenceCategory).list();

        return result;
    }
    
    
    /**
     * Adds a Reference to the Set of associated Reference objects that represent the references property
     * and that are defined by the many-to-many relationship defined as ReferenceCategory.references.
     * @return the updated <code>List</code> of the associated Reference objects that represent the references property.
     */
    public List<Reference> addReferenceToReferences(Reference references, Long referenceCategoryId, Long userId) throws ReferenceCategorySaveException, ReferenceCategoryLoadException, AuthorisationException, InvalidUserIDException{
    	references.setCreatedByID(userId);
    	references.setUpdatedByID(userId);
    	ReferenceCategory referenceCategory = load(referenceCategoryId, userId);
    	references.getReferenceCategory().add(referenceCategory);
    	  referenceCategory.getReferences().add(references);
    	updateReferenceCategory(referenceCategory, userId);
    	return getReferences(referenceCategoryId, userId);
	}
      
    /**
     * Returns a List representing the Set of associated Reference objects that represent the references property
     * and that are defined by the many-to-many relationship defined as ReferenceCategory.references.
     * @return the <code>List</code> of the associated Reference objects that represent the references property.
     */
    public List<Reference> getReferences(Long referenceCategoryId, Long userId) throws ReferenceCategoryLoadException, AuthorisationException, InvalidUserIDException{
    	@SuppressWarnings("unchecked")
		List<Reference> result = this.sessionFactory.getCurrentSession().createQuery("select distinct references from ReferenceCategoryImpl as referenceCategory join referenceCategory.references as references where referenceCategory.id = :referenceCategoryId order by references.id asc").setParameter("referenceCategoryId", referenceCategoryId).list();
    	return result;
    }
      
    
    /**
     * Updates an Reference in the references property and returns a List representing the Set of associated Reference objects that represent the references property
     * and that are defined by the many-to-many relationship defined as ReferenceCategory.references.
     * @return the <code>List</code> of the associated Reference objects that represent the references property.
     */
    public List<Reference> updateReferences(Long referenceCategoryId, Reference reference, Long userId) throws ReferenceCategoryLoadException, AuthorisationException, InvalidUserIDException{
    ReferenceCategory referenceCategory = load(referenceCategoryId, userId);
    	reference.getReferenceCategory().add(referenceCategory);
    	  reference.setUpdatedByID(userId);
        reference.setDateUpdated(new Date());
        this.sessionFactory.getCurrentSession().update(reference);
    	
    	return getReferences(referenceCategoryId, userId);
    }
  
    
    /**
     * Creates a new entry in the REFERENCECATEGORY table containing the parameters passed here.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the database generated Id of the newly created record.
     * @throws ReferenceCategorySaveException on failure to save.  
     */
    public Long createAndStoreReferenceCategory(ReferenceCategory referenceCategory, Long userId)
    {
    	Long returnValue = new Long(0);

        referenceCategory.setCreatedByID(userId);
        referenceCategory.setUpdatedByID(userId);
        referenceCategory.setDateCreated(new Date());
        referenceCategory.setDateUpdated(new Date());
        
        this.sessionFactory.getCurrentSession().save(referenceCategory);
            
        returnValue = referenceCategory.getId();
		
		return returnValue;
    }


    /**
     * Updates an existing entry in the REFERENCECATEGORY table containing the parameters passed here.
     * Only non-null parameters will be applied to the underlying table so preserving any existing entries.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @param the referenceCategory the ReferenceCategory object to update in the database.
     * @param userId the userId of the currently logged in user. 
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userId passed as parameter is not valid
     */
    public void updateReferenceCategory(ReferenceCategory referenceCategory, Long userId) throws AuthorisationException, InvalidUserIDException
    {
        if (Authorisation.isAuthorisedUpdate("ReferenceCategory", userId, referenceCategory.getId()) == false)
        {
        	throw new AuthorisationException();
        }
    	
        referenceCategory.setUpdatedByID(userId);
        referenceCategory.setDateUpdated(new Date());
        this.sessionFactory.getCurrentSession().update(referenceCategory);
    }
    
    
    /**
     * Loads a ReferenceCategoryFilter object based on the participantID of the currently logged in user
     * @param userID the userID is checked for authorisation to view the record. It is also the key to load a against the createdByID
     * column of the underlying record. There should only ever be one or zero filter records per ReferenceCategory.
     * @ return a ReferenceCategoryFilter object matching the parameter or a newly constructed, empty object if none can be found
     */
    public ReferenceCategoryFilter loadReferenceCategoryFilter(Long userID) throws ReferenceCategoryLoadException, AuthorisationException, InvalidUserIDException
    {
    	ReferenceCategoryFilter hibernateEntity = null;
    	
        /*if (Authorisation.isAuthorisedView("ReferenceCategory", userID, REFERENCECATEGORYID) == false)
        {
        	throw new AuthorisationException();
        }*/
    	

        if (userID != null)
        {
        	
        	try
        	{
				hibernateEntity = (ReferenceCategoryFilter)this.sessionFactory.getCurrentSession().load(ReferenceCategoryFilter.class, userID);
        	}
			catch (Exception ex)
			{
			     throw new ReferenceCategoryLoadException("ReferenceCategoryEntityDataManager::loadReferenceCategoryFilter", ex);
			}		
    		
            // Load all related singular objects
            
        }
    	
        return hibernateEntity;
    }
    
    /**
     * Creates a new entry in the REFERENCECATEGORYFILTER table containing the parameters passed here.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the userID which is also the assigned Id for the newly created record.
     * @throws ReferenceCategorySaveException on failure to save.  
     */
    public Long createAndStoreReferenceCategoryFilter(ReferenceCategoryFilter referenceCategoryFilter,  Long userId)
        throws ReferenceCategorySaveException
    {
    	Long returnValue = new Long(0);
        

		try
		{
            referenceCategoryFilter.setId(userId);
            referenceCategoryFilter.setCreatedByID(userId);
            referenceCategoryFilter.setUpdatedByID(userId);
            referenceCategoryFilter.setDateCreated(new Date());
            referenceCategoryFilter.setDateUpdated(new Date());

            this.sessionFactory.getCurrentSession().save(referenceCategoryFilter);
            
            returnValue = referenceCategoryFilter.getId();
		}
		catch (Exception ex)
		{
		     throw new ReferenceCategorySaveException("ReferenceCategoryEntityDataManager::createAndStoreReferenceCategoryFilter", ex);
		}		
		
		return returnValue;
    }
    
    
    /**
     * Updates an existing entry in the REFERENCECATEGORYFILTER table and associated tables 
     * containing the parameters passed here. If the entry denoted by the userID does not exist then one is created.
     *	
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws ReferenceCategorySaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public Long updateReferenceCategoryFilter(ReferenceCategoryFilter referenceCategoryFilter, Long userId)
        throws ReferenceCategoryLoadException, ReferenceCategorySaveException, AuthorisationException, InvalidUserIDException
    {
    	Long returnValue = new Long(0);
    	
        //if (Authorisation.isAuthorisedUpdate("ReferenceCategory", userID, REFERENCECATEGORYID) == false)
        //{
        //	throw new AuthorisationException();
        //}
    	
		try
		{
			referenceCategoryFilter.setId(userId);
            referenceCategoryFilter.setUpdatedByID(userId);
            referenceCategoryFilter.setDateUpdated(new Date());
            this.sessionFactory.getCurrentSession().update(referenceCategoryFilter);
            returnValue = referenceCategoryFilter.getId();
        }
		catch (Exception ex)
		{
		     throw new ReferenceCategorySaveException("ReferenceCategoryDaoImpl::updateReferenceCategoryFilter, userId: " + userId, ex);
		}	
		
		return returnValue;	
        
    }
    
	
    
    /**
     * Converts a Comma Seperated Volume (delimited by ",") to a <code>List<code/> of type <code>String<code/>
     */
	private static List<String> convertCommaDelimitedStringToList(String delimitedString) {

		List<String> result = new ArrayList<String>();

		if (!StringUtils.isEmpty(delimitedString)) {
			result = Arrays.asList(StringUtils.delimitedListToStringArray(delimitedString, ","));
		}
		return result;

	}

    /**
     * Converts a List of type String to a Comma Seperated Volume (delimited by ",") 
     */
	private String convertListToCommaDelimitedString(List<String> list) {

		String result = "";
		if (list != null) {
			result = StringUtils.arrayToCommaDelimitedString(list.toArray());
		}
		return result;

	}

    /**
     * Cleans up any Collection Objects created by the Class instance
     */
    protected void finalize() throws Throwable
    {
        super.finalize();
        
    }    
    
}
    
