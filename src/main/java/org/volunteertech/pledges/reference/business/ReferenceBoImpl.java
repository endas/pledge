package org.volunteertech.pledges.reference.business;
import com.netgrains.security.Authorisation;
import com.netgrains.security.AuthorisationException;
import com.netgrains.security.InvalidUserIDException;
import org.volunteertech.pledges.reference.dao.Reference;
import org.volunteertech.pledges.reference.dao.ReferenceDao;
import org.volunteertech.pledges.reference.dao.ReferenceFilter;
import org.volunteertech.pledges.reference.dao.ReferenceHistory;
import org.volunteertech.pledges.reference.dao.ReferenceLoadException;
import org.volunteertech.pledges.reference.dao.ReferenceSaveException;

import java.util.Date;
import java.util.List;
import java.util.Set;
import java.math.BigDecimal;
import java.util.ArrayList;




/**
 * The reference screen is used to add/edit new/existing reference entries. The reference entries are used to populate dropdowns where a group of reference entries with a common column-value can be associated with a dropdown.
 * This Class has been generated by the XSLT processor from the meta data and represents the
 * implementation of the Business Object(BO) for the Reference entity. A Business Object
 * is provided in order to provide a seperation from the Data Access implementation. 
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: * $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
public class ReferenceBoImpl implements ReferenceBo
{
	/**
	 * The Data Access Object
	 */
	ReferenceDao  referenceDao;
	    
    
    

    /**
     * Default Constructor for the Reference Business Object.
     */
    public ReferenceBoImpl()
    {
    	//Initialise the related Object stores
        
    }
    
    /**
     * Sets the required Data Access Object (DAO)
     * @param referenceDao the referenceDao used to access the reference entity.
     */
    public void setReferenceDao(ReferenceDao referenceDao){
    	this.referenceDao = referenceDao;
    }

    /**
     * Returns the required Data Access Object (DAO)
     * @return the ReferenceDao used to access the reference entity.
     */
    public ReferenceDao getReferenceDao(){
    	return this.referenceDao;
    }
    

    /**
     * Loads a Reference object based on the REFERENCEID column
     * @param REFERENCEId the primary key for the underlying record.
     * @param userId the userId is checked for authorisation to view the record
     * @ return a Reference object matching the parameter or null if none can be found. The
     * method also returns null if the parameter is null.
     */
    public Reference load(Long referenceId, Long loggedInUserId) throws ReferenceLoadException, AuthorisationException, InvalidUserIDException
    {
    	Reference reference = null;
    	
        if (Authorisation.isAuthorisedView("Reference", loggedInUserId, referenceId) == false)
        {
        	throw new AuthorisationException();
        }
    	

        if (referenceId != null)
        {
        	try
        	{
				reference = (Reference)this.getReferenceDao().load(referenceId, loggedInUserId);
        	}
			catch (Exception ex)
			{
			     throw new ReferenceLoadException("ReferenceDaoImpl::load", ex);
			}		
    		
            // Load all related singular objects
            
        }
    	
        return reference;
    }
    
    
    


    /**
     * Load all existing Reference objects. 
     * @return List a List of Reference objects.
     */
    public List<Reference> listReference()
    {
        List<Reference> result = this.getReferenceDao().listReference();

        return result;
    }
    
    
    /**
     * Returns a <code>List</code> of Reference objects that have a matching refType
     * @return List a List of Reference objects that match the refType property given as parameter.
     * @param refType the refType on which to match the required records.
     */
    public List<Reference> listReferenceByRefType(String refType)
    {
        List<Reference> result = this.getReferenceDao().listReferenceByRefType(refType);

        return result;
    }

    /**
     * Returns a <code>List</code> of Reference objects that have a matching refDesc
     * @return List a List of Reference objects that match the refDesc property given as parameter.
     * @param refDesc the refDesc on which to match the required records.
     */
    public List<Reference> listReferenceByRefDesc(String refDesc)
    {
        List<Reference> result = this.getReferenceDao().listReferenceByRefDesc(refDesc);

        return result;
    }

    /**
     * Returns a <code>List</code> of Reference objects that have a matching parentId
     * @return List a List of Reference objects that match the parentId property given as parameter.
     * @param parentId the parentId on which to match the required records.
     */
    public List<Reference> listReferenceByParentId(Long parentId)
    {
        List<Reference> result = this.getReferenceDao().listReferenceByParentId(parentId);

        return result;
    }

    /**
     * Returns a <code>List</code> of Reference objects that have a matching refIndex
     * @return List a List of Reference objects that match the refIndex property given as parameter.
     * @param refIndex the refIndex on which to match the required records.
     */
    public List<Reference> listReferenceByRefIndex(Long refIndex)
    {
        List<Reference> result = this.getReferenceDao().listReferenceByRefIndex(refIndex);

        return result;
    }

    /**
     * Returns a <code>List</code> of Reference objects that have a matching description
     * @return List a List of Reference objects that match the description property given as parameter.
     * @param description the description on which to match the required records.
     */
    public List<Reference> listReferenceByDescription(String description)
    {
        List<Reference> result = this.getReferenceDao().listReferenceByDescription(description);

        return result;
    }

    
	/**
     * Load existing Reference objects from the database that have a createdByID column
     * that matches the userId parameter.
     * @return List a List of Reference objects that match the userId parameter.
     */
    public List<Reference> listReferenceByCreatedById(Long userId)
    {
        List<Reference> result = this.getReferenceDao().listReferenceByCreatedById(userId);

        return result;
    }
    
    
    /**
     * Load all existing ReferenceHistory objects for a particular Reference.
     * The <code>List</code> of ReferenceHistory objects contains all of the changes that have been made to the
     * Reference object identified by the reference parameter'
     * @return List a List of ReferenceHistory objects.
     */
    public List<ReferenceHistory> listReferenceHistory(Long reference)
    {
        List<ReferenceHistory> result = this.getReferenceDao().listReferenceHistory(reference);

        return result;
    }
    
    
    /**
     * Load a <code>List</code> of Reference objects from the database that match the
     * referenceId parameter, the ReferenceCategory and the Reference being related by an association.
     * @return a <code>List</code> of Reference objects that match the referenceId parameter.
     */
    public List<Reference> listReferenceByReferenceCategoryId(Long referenceCategoryId)
    {
        List<Reference> result = this.getReferenceDao().listReferenceByReferenceCategoryId(referenceCategoryId);
        
        return result;
    }
  
    
    
    /**
     * Creates a new entry in the REFERENCE table containing the parameters passed here.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the database generated Id of the newly created record.
     * @throws ReferenceSaveException on failure to save.  
     */
    public Long createAndStoreReference(Reference reference, Long userID)
        throws ReferenceSaveException
    {
    	Long returnValue = new Long(0);
        
		try
		{
            returnValue = this.getReferenceDao().createAndStoreReference(reference, userID);
		}
		catch (Exception ex)
		{
		     throw new ReferenceSaveException("ReferenceEntityDataManager::createAndStoreReference", ex);
		}		
		
		return returnValue;
    }


    /**
     * Updates an existing entry in the REFERENCE table containing the parameters passed here.
     * Only non-null parameters will be applied to the underlying table so preserving any existing entries.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws ReferenceLoadException if the existing record cannot be loaded
     * @throws ReferenceSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public void updateReference(Reference reference, Long userID)
        throws ReferenceSaveException, ReferenceLoadException, AuthorisationException, InvalidUserIDException
    {
    	
        if (Authorisation.isAuthorisedUpdate("Reference", userID, reference.getId()) == false)
        {
        	throw new AuthorisationException();
        }
    	
		try
		{
            this.getReferenceDao().updateReference(reference, userID);
        }
		catch (Exception ex)
		{
		     throw new ReferenceSaveException("ReferenceEntityDataManager::updateReference, ReferenceID: " + reference.getId(), ex);
		}		
        
    }
    
    
    /**
     * Loads a ReferenceFilter object based on the participantID of the currently logged in user
     * @param userId the userId is checked for authorisation to view the record. It is also the key to load a against the createdByID
     * column of the underlying record. There should only ever be one or zero filter records per Reference.
     * @ return a ReferenceFilter object matching the parameter or a newly constructed, empty object if none can be found
     */
    public ReferenceFilter loadReferenceFilter(Long userId) throws ReferenceLoadException, AuthorisationException, InvalidUserIDException
    {
    	ReferenceFilter referenceFilter = null;
    	
        /*if (Authorisation.isAuthorisedView("Reference", userId, REFERENCEID) == false)
        {
        	throw new AuthorisationException();
        }*/
    	

        if (userId != null)
        {
        	
        	try
        	{
				referenceFilter = (ReferenceFilter)this.getReferenceDao().loadReferenceFilter(userId);
        	}
			catch (Exception ex)
			{
			     throw new ReferenceLoadException("ReferenceBoImpl::loadReferenceFilter", ex);
			}		
    		
            // Load all related singular objects
            
        }
    	
        return referenceFilter;
    }
    
    /**
     * Creates a new entry in the REFERENCEFILTER table containing the parameters passed here.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the userId which is also the assigned Id for the newly created record.
     * @throws ReferenceSaveException on failure to save.  
     */
    public Long createAndStoreReferenceFilter(ReferenceFilter referenceFilter,  Long userId)
        throws ReferenceSaveException
    {
    	Long returnValue = new Long(0);
        
		try
		{
            referenceFilter.setId(userId);
			referenceFilter.setCreatedByID(userId);
            referenceFilter.setUpdatedByID(userId);
            referenceFilter.setDateCreated(new Date());
            referenceFilter.setDateUpdated(new Date());

            returnValue = this.getReferenceDao().createAndStoreReferenceFilter(referenceFilter, userId);
		}
		catch (Exception ex)
		{
		     throw new ReferenceSaveException("ReferenceBoImpl::createAndStoreReferenceFilter", ex);
		}		
		
		return returnValue;
    }
    
    
    /**
     * Updates an existing entry in the REFERENCEFILTER table and associated tables 
     * containing the parameters passed here. If the entry denoted by the userID does not exist then one is created.
     *	
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws ReferenceSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public Long updateReferenceFilter(ReferenceFilter referenceFilter, Long userId)
        throws ReferenceLoadException, ReferenceSaveException, AuthorisationException, InvalidUserIDException
    {
    	Long returnValue = new Long(0);
    	
        //if (Authorisation.isAuthorisedUpdate("Reference", userId, REFERENCEID) == false)
        //{
        //	throw new AuthorisationException();
        //}
    	
		try
		{
			referenceFilter.setId(userId);
			referenceFilter.setUpdatedByID(userId);
            referenceFilter.setDateUpdated(new Date());
            returnValue = this.getReferenceDao().updateReferenceFilter(referenceFilter, userId);
        }
		catch (Exception ex)
		{
		     throw new ReferenceSaveException("ReferenceBoImpl::updateReferenceFilter, userId: " + userId, ex);
		}	
		
		return returnValue;	
        
    }
    

    
    /**
     * Cleans up any Collection Objects created by the Class instance
     */
    protected void finalize() throws Throwable
    {
        super.finalize();
        
    }    
    
    
}
    
