package org.volunteertech.pledges.reference.service;
import com.netgrains.security.AuthorisationException;
import com.netgrains.security.InvalidUserIDException;
import org.volunteertech.pledges.reference.dao.Reference;
import org.volunteertech.pledges.reference.business.ReferenceBo;
import org.volunteertech.pledges.reference.dao.ReferenceFilter;
import org.volunteertech.pledges.reference.dao.ReferenceHistory;
import org.volunteertech.pledges.reference.dao.ReferenceLoadException;
import org.volunteertech.pledges.reference.dao.ReferenceSaveException;
import java.util.List;
import java.util.Set;
import java.util.Date;
import java.math.BigDecimal;
import java.util.Locale;


import org.volunteertech.pledges.reference.ReferenceStore;
  
import org.volunteertech.pledges.localisation.service.MessageResourceService;
  


/**
 * The reference screen is used to add/edit new/existing reference entries. The reference entries are used to populate dropdowns where a group of reference entries with a common column-value can be associated with a dropdown.
 * This Interface has been generated by the XSLT processor from the meta data and represents the
 * interface of the Service  Layer Object for the Reference entity. A Business Object
 * is provided in order to provide a seperation from the Data Access implementation. 
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: * $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
public interface ReferenceService
{
    
	/**
	 * Sets the reference to the referenceStore required to perform a user roles lookup
	 */
	public void setReferenceStore(ReferenceStore referenceStore);
	
	/**
	 * Returns a reference to the referenceStore instance.
	 */
	public ReferenceStore getReferenceStore();
	  
	/**
	 * Sets the message resource service to perform localization lookups
	 */
	public void setMessageResourceService(MessageResourceService messageResourceService);
	
	/**
	 * Returns a reference to the message resource service.
	 */
	public MessageResourceService getMessageResourceService();
  
	/**
	 * Returns a refDesc lookup code from the underlying referenceStore
	 */
	public String getRefDesc(Long referenceId);
  
    
    /**
     * Sets the required Business Object (BO)
     * @param referenceBo the referenceBo used to access the reference entity
     * and it's associations.
     */
    public void setReferenceBo(ReferenceBo referenceBo);
    

    /**
     * Returns the required Business Object (BO)
     * @return the ReferenceBo used to access the reference entity
     * and it's associations.
     */
    public ReferenceBo getReferenceBo();
    
    

    /**
     * Loads a Reference object based on the REFERENCEID column
     * @param REFERENCEID the primary key for the underlying record.
     * @param userID the userID is checked for authorisation to view the record
     * @ return a Reference object matching the parameter or null if none can be found. The
     * method also returns null if the parameter is null.
     */
    public Reference load(Long referenceID, Long loggedInUserId) throws ReferenceLoadException, AuthorisationException, InvalidUserIDException;
    
    

    /**
     * Load all existing Reference objects. 
     * @return List a List of Reference objects.
     */
    public List<Reference> listReference();
    
    
    /**
     * Returns a <code>List</code> of Reference objects that have a matching refType
     * @return List a List of Reference objects that match the refType property given as parameter.
     * @param refType the refType on which to match the required records.
     */
    public List<Reference> listReferenceByRefType(String refType);

    /**
     * Returns a <code>List</code> of Reference objects that have a matching refDesc
     * @return List a List of Reference objects that match the refDesc property given as parameter.
     * @param refDesc the refDesc on which to match the required records.
     */
    public List<Reference> listReferenceByRefDesc(String refDesc);

    /**
     * Returns a <code>List</code> of Reference objects that have a matching parentId
     * @return List a List of Reference objects that match the parentId property given as parameter.
     * @param parentId the parentId on which to match the required records.
     */
    public List<Reference> listReferenceByParentId(Long parentId);

    /**
     * Returns a <code>List</code> of Reference objects that have a matching refIndex
     * @return List a List of Reference objects that match the refIndex property given as parameter.
     * @param refIndex the refIndex on which to match the required records.
     */
    public List<Reference> listReferenceByRefIndex(Long refIndex);

    /**
     * Returns a <code>List</code> of Reference objects that have a matching description
     * @return List a List of Reference objects that match the description property given as parameter.
     * @param description the description on which to match the required records.
     */
    public List<Reference> listReferenceByDescription(String description);

    
    
    /**
     * Load existing Reference objects from the database that have a createdByID column
     * that matches the userId parameter.
     * @return List a List of Reference objects that match the userId parameter.
     */
    public List<Reference> listReferenceByCreatedById(Long userId);
    
    
    /**
     * Load all existing ReferenceHistory objects for a particular Reference.
     * The <code>List</code> of ReferenceHistory objects contains all of the changes that have been made to the
     * Reference object identified by the reference parameter'
     * @return List a List of ReferenceHistory objects.
     */
    public List<ReferenceHistory> listReferenceHistory(Long reference) throws Exception;
    
    
    
    /**
     * Either updates an existing entry in the REFERENCE table or adds a new entry if one does not exist.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws ReferenceLoadException if the existing record cannot be loaded
     * @throws ReferenceSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public void storeReference(Reference reference, Long userId)
        throws ReferenceSaveException, ReferenceLoadException, AuthorisationException, InvalidUserIDException;
    
    
    /**
     * Loads a ReferenceFilter object based on the participantID of the currently logged in user
     * @param userId the userId is checked for authorisation to view the record. It is also the key to load a against the createdByID
     * column of the underlying record. There should only ever be one or zero filter records per Reference.
     * @ return a ReferenceFilter object matching the parameter or a newly constructed, empty object if none can be found
     */
    public ReferenceFilter loadReferenceFilter(Long userId) throws ReferenceLoadException, AuthorisationException, InvalidUserIDException;


    
    /**
     * Creates a new entry in the REFERENCEFILTER table containing the parameters passed here.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the userID which is also the assigned Id for the newly created record.
     * @throws ReferenceSaveException on failure to save.  
     */
    public Long createAndStoreReferenceFilter(ReferenceFilter referenceFilter, Long userId)
        throws ReferenceSaveException;
    
    
    /**
     * Updates an existing entry in the REFERENCEFILTER table and associated tables 
     * containing the parameters passed here. If the entry denoted by the userID does not exist then one is created.
     *	
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws ReferenceSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public Long updateReferenceFilter(ReferenceFilter referenceFilter, Long userId)
        throws ReferenceLoadException, ReferenceSaveException, AuthorisationException, InvalidUserIDException;
    

	/**
	 * Translates the referenceId type properties into the locale specific text for display on the front-end.
	 * @param reference the dto object to be updated with the locale specific translations
	 * @param locale the Locale to be displayed
	 * @return the same Reference object but with the locale translation fields populated with the message
	 * that is relevant to the current locale
	 */    
    public Reference translateReferenceValues(Reference reference, Locale locale);
    
	/**
	 * Translates the referenceId type properties into the locale specific text for display on the front-end.
	 * @param referenceList the dto object to be updated with the locale specific translations
	 * @param locale the Locale to be displayed
	 */    
    public List<Reference> translateReferenceValues(List<Reference> referenceList, Locale locale);
    
	
    
}    
