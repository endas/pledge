package org.volunteertech.pledges.reference.web;
import java.util.ArrayList;
import java.util.Arrays; 
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.HashMap;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import org.volunteertech.pledges.users.security.SecurityUser;

import org.volunteertech.pledges.main.localisation.DatabaseDrivenMessageSource;
import org.volunteertech.pledges.reference.dao.Reference;
import org.volunteertech.pledges.reference.dao.ReferenceImpl;
import org.volunteertech.pledges.reference.service.ReferenceService;
import org.volunteertech.pledges.reference.dao.ReferenceLoadException;
import org.volunteertech.pledges.reference.dao.ReferenceSaveException;
import org.volunteertech.pledges.reference.validator.ReferenceFormValidator;
import org.volunteertech.pledges.reference.view.ReferenceTranslationBackingBean;
import org.volunteertech.pledges.reference.view.ReferenceTranslationBackingBeanImpl;
import org.volunteertech.pledges.main.web.BaseController;
import org.volunteertech.pledges.main.constants.Constants;
import org.volunteertech.pledges.localisation.dao.MessageResource;
import org.volunteertech.pledges.localisation.dao.MessageResourceImpl;
import org.volunteertech.pledges.localisation.service.MessageResourceService;

import org.volunteertech.pledges.reference.dao.ReferenceCategory;


import org.volunteertech.pledges.reference.ReferenceStore;

/**
 * The reference screen is used to add/edit new/existing reference entries. The reference entries are used to populate dropdowns where a group of reference entries with a common column-value can be associated with a dropdown.
 * GUIHandler is attached to a form on JSP and contains all getters and setters for values displayed on the form.
 * GUIHandler accesses the business layer for loading/saving data. 
 * This class has been generated by the XSLT processor from the metadata and represents the
 * the GUI layer javabean for the Reference Form.
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
@Controller
public class ReferenceController extends BaseController
{
	public static final String TEMPLATE_PREFIX = "references/";
    /**
     * userId used for development. This should be taken from the session.
     */
	private Long userId = new Long(0);
	 
	final Logger logger = LoggerFactory.getLogger(ReferenceController.class);
	
	@Autowired
	private ReferenceStore referenceStore;
	
	@Autowired
	private ReferenceService referenceService;

	@Autowired
	private ReferenceFormValidator referenceFormValidator;
	
    @Autowired
    private DatabaseDrivenMessageSource messageSource;
    


    @Autowired
    private MessageResourceService messageResourceService;
  
    
	
	//Set a form validator
	@InitBinder
	protected void initBinder(WebDataBinder binder) {
		binder.setValidator(referenceFormValidator);
	}
	
	
	/**
	 * Open the list page
	 */
	@RequestMapping(value = "/reference/all", method = RequestMethod.GET)
	public String showAllReference(Model model, Locale locale) {

		logger.debug("showAllReference()");
			
		return TEMPLATE_PREFIX+"reference_table";

	}
	
	/**
	 * Open the localize page
	 */
	@RequestMapping(value = "/reference/localize", method = RequestMethod.GET)
	public String localizeReference(Model model, Locale locale) {

		logger.debug("localizeReference()");

		ReferenceTranslationBackingBean referenceTranslationBackingBean = new ReferenceTranslationBackingBeanImpl();
		referenceTranslationBackingBean.setCurrentMode(Reference.CurrentMode.LOCALIZE);
		model.addAttribute("referenceTranslationFormModel", referenceTranslationBackingBean);
		Long defaultLocale = new Long(Constants.REFERENCE_LOCALE__EN);
		setTranslationDropDownContents(model, locale);
		setDropDownContents(model, null, locale);		
		model.addAttribute("defaultLocale", defaultLocale);
		
		return TEMPLATE_PREFIX+"reference_localize";

	}
	
	
	

	// save or update Reference
	// 1. @ModelAttribute bind form value
	// 2. @Validated form validator
	// 3. RedirectAttributes for flash value
	@RequestMapping(value = "/reference/post", method = RequestMethod.POST)
	public String saveOrUpdateReference(Authentication authentication, @ModelAttribute("referenceFormModel") @Validated ReferenceImpl reference,
			BindingResult result, Model model, Locale locale,
			final RedirectAttributes redirectAttributes) {

		logger.debug("saveOrUpdateReference() : {}", reference);
		SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();
		

		if (result.hasErrors()) {
			setDropDownContents(model, reference, locale);
			String updateIssueMessage = messageSource.getMessage("referenceUpdateIssueMessage", new String[0], locale);
			model.addAttribute("msg", updateIssueMessage);
			model.addAttribute("css", "alert-danger");
			
			return TEMPLATE_PREFIX+"reference";
		} else {

			// Add message to flash scope
			redirectAttributes.addFlashAttribute("css", "success");
			if(reference.isNew()){
				String addedSuccessMessage = messageSource.getMessage("referenceAddedSuccessMessage", new String[0], locale);
				// Add message to flash scope
				redirectAttributes.addFlashAttribute("msg", addedSuccessMessage);
				redirectAttributes.addFlashAttribute("css", "alert-success");
			}else{
				String updateSuccessMessage = messageSource.getMessage("referenceUpdateSuccessMessage", new String[0], locale);
				// Add message to flash scope
				redirectAttributes.addFlashAttribute("msg", updateSuccessMessage);
				redirectAttributes.addFlashAttribute("css", "alert-success");
			}


			try{
				// TODO: Needs exception handling policy
			    	referenceService.storeReference(reference, userId);
			}
			catch (Exception ex){
				logger.error("Exception caught !!!!!!!!!!!!!!", ex);
			}
			
	
			

			
			// POST/REDIRECT/GET
			return "redirect:/reference/" + reference.getId() + "/update";
		}

	}

	// show add user form
	@RequestMapping(value = "/reference/add", method = RequestMethod.GET)
	public String showAddReferenceForm(Model model, Locale locale) {

		logger.debug("showAddReferenceForm()");

		Reference reference = new ReferenceImpl();
		
		reference.setCurrentMode(Reference.CurrentMode.ADD);

		model.addAttribute("referenceFormModel", reference);

		setDropDownContents(model, reference, locale);

		return TEMPLATE_PREFIX+"reference";

	}
	
	// support access to the supporting webpage by creating a new instance and returning 
	@RequestMapping(value = "/referencewebpage", method = RequestMethod.GET)
	public String createReferenceForWebPageView(Model model, HttpServletRequest request, Locale locale) {

		logger.debug("createReferenceForWebPageView()");

		Reference reference = new ReferenceImpl();
		
		try{
			// TODO: Needs exception handling policy
	    	referenceService.storeReference(reference, userId);
		}
		catch (Exception ex){
			logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}
		

		model.addAttribute("referenceFormModel", reference);

		setDropDownContents(model, reference, locale);

		return TEMPLATE_PREFIX+"referencewebpage";

	}
	

	// show update form
	@RequestMapping(value = "/reference/{id}/update", method = RequestMethod.GET)
	public String showUpdateReferenceForm(@PathVariable("id") int id, Model model, Locale locale) {

		logger.debug("showUpdateReferenceForm() : {}", id);
		Reference reference = null;
		try{
			// TODO: Needs exception handling policy
			reference = referenceService.load(new Long(id), userId);
			reference.setCurrentMode(Reference.CurrentMode.UPDATE);
			this.referenceService.translateReferenceValues(reference, locale);
		}
		catch (Exception ex){
			logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}

		
		model.addAttribute("referenceFormModel", reference);
		
		setDropDownContents(model, reference, locale);
		
		return TEMPLATE_PREFIX+"reference";

	}

	// delete reference
	@RequestMapping(value = "/reference/{id}/delete", method = RequestMethod.POST)
	public String deleteReference(@PathVariable("id") int id, 
		final RedirectAttributes redirectAttributes) {

		logger.debug("deleteUser() : {}", id);

		//referenceService.delete(id);
		
		redirectAttributes.addFlashAttribute("css", "success");
		redirectAttributes.addFlashAttribute("msg", "User is deleted!");
		
		return "redirect:/reference/all";

	}

	// show user
	@RequestMapping(value = "/reference/{id}", method = RequestMethod.GET)
	public String showReference(@PathVariable("id") int id, Model model, Locale locale) {

		logger.debug("showReference() id: {}", id);
		Reference reference = null;
		try{
			// TODO: Needs exception handling policy
			reference = referenceService.load(new Long(id), userId);
		}
		catch (Exception ex){
			logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}

		
		if (reference == null) {
			model.addAttribute("css", "danger");
			model.addAttribute("msg", "User not found");
		}
		model.addAttribute("reference", reference);
		
		setDropDownContents(model, reference, locale);

		return TEMPLATE_PREFIX+"showreference";

	}
	
	
	// save or update ReferenceTranslation
	// 1. @ModelAttribute bind form value
	// 2. @Validated form validator
	// 3. RedirectAttributes for flash value
	@RequestMapping(value = "/reference/translate", method = RequestMethod.POST)
	public String saveOrUpdateReferenceTranslation(Authentication authentication, @ModelAttribute("referenceTranslationFormModel") ReferenceTranslationBackingBeanImpl referenceTranslationBackingBean,
			BindingResult result, Model model, Locale locale,
			final RedirectAttributes redirectAttributes) {

		logger.debug("saveOrUpdateReferenceTranslation() : {}", referenceTranslationBackingBean);
		Long translationLocaleReferenceId = referenceTranslationBackingBean.getNewLocale();
		String translationLocale = messageSource.getMessage(referenceStore.getRefDesc(translationLocaleReferenceId), new String[0], new Locale("en"));
		SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();
		

		try{
			
			// TODO: Needs exception handling policy
			List<MessageResource> messageResourceList  = new ArrayList<MessageResource>();
			
			MessageResource messageResource = populateMessageResource(ReferenceTranslationBackingBeanImpl.REFERENCE_HEADER_MAPPING_KEY, translationLocale, translationLocaleReferenceId, referenceTranslationBackingBean.getViewTitle());
			messageResourceList.add(messageResource);
			messageResource = populateMessageResource(ReferenceTranslationBackingBeanImpl.REFERENCE_TITLE_MAPPING_KEY, translationLocale, translationLocaleReferenceId, referenceTranslationBackingBean.getFormTitle());
			messageResourceList.add(messageResource);
			messageResource = populateMessageResource(ReferenceTranslationBackingBeanImpl.REFERENCE_SUBHEADER_MAPPING_KEY, translationLocale, translationLocaleReferenceId, referenceTranslationBackingBean.getFormSubHeader());
			messageResourceList.add(messageResource);
			
	messageResource = populateMessageResource(ReferenceTranslationBackingBeanImpl.REFTYPE_LABEL_MAPPING_KEY, translationLocale, translationLocaleReferenceId, referenceTranslationBackingBean.getRefTypeLabel());
  			messageResourceList.add(messageResource);
  			messageResource = populateMessageResource(ReferenceTranslationBackingBeanImpl.REFTYPE_PLACEHOLDER_MAPPING_KEY, translationLocale, translationLocaleReferenceId, referenceTranslationBackingBean.getRefTypePlaceHolder());
  			messageResourceList.add(messageResource);
  			messageResource = populateMessageResource(ReferenceTranslationBackingBeanImpl.REFTYPE_HELPBLOCK_MAPPING_KEY, translationLocale, translationLocaleReferenceId, referenceTranslationBackingBean.getRefTypeHelpText());
  			messageResourceList.add(messageResource);
  		
	messageResource = populateMessageResource(ReferenceTranslationBackingBeanImpl.REFDESC_LABEL_MAPPING_KEY, translationLocale, translationLocaleReferenceId, referenceTranslationBackingBean.getRefDescLabel());
  			messageResourceList.add(messageResource);
  			messageResource = populateMessageResource(ReferenceTranslationBackingBeanImpl.REFDESC_PLACEHOLDER_MAPPING_KEY, translationLocale, translationLocaleReferenceId, referenceTranslationBackingBean.getRefDescPlaceHolder());
  			messageResourceList.add(messageResource);
  			messageResource = populateMessageResource(ReferenceTranslationBackingBeanImpl.REFDESC_HELPBLOCK_MAPPING_KEY, translationLocale, translationLocaleReferenceId, referenceTranslationBackingBean.getRefDescHelpText());
  			messageResourceList.add(messageResource);
  		
	messageResource = populateMessageResource(ReferenceTranslationBackingBeanImpl.PARENTID_LABEL_MAPPING_KEY, translationLocale, translationLocaleReferenceId, referenceTranslationBackingBean.getParentIdLabel());
  			messageResourceList.add(messageResource);
  			messageResource = populateMessageResource(ReferenceTranslationBackingBeanImpl.PARENTID_PLACEHOLDER_MAPPING_KEY, translationLocale, translationLocaleReferenceId, referenceTranslationBackingBean.getParentIdPlaceHolder());
  			messageResourceList.add(messageResource);
  			messageResource = populateMessageResource(ReferenceTranslationBackingBeanImpl.PARENTID_HELPBLOCK_MAPPING_KEY, translationLocale, translationLocaleReferenceId, referenceTranslationBackingBean.getParentIdHelpText());
  			messageResourceList.add(messageResource);
  		
	messageResource = populateMessageResource(ReferenceTranslationBackingBeanImpl.REFINDEX_LABEL_MAPPING_KEY, translationLocale, translationLocaleReferenceId, referenceTranslationBackingBean.getRefIndexLabel());
  			messageResourceList.add(messageResource);
  			messageResource = populateMessageResource(ReferenceTranslationBackingBeanImpl.REFINDEX_PLACEHOLDER_MAPPING_KEY, translationLocale, translationLocaleReferenceId, referenceTranslationBackingBean.getRefIndexPlaceHolder());
  			messageResourceList.add(messageResource);
  			messageResource = populateMessageResource(ReferenceTranslationBackingBeanImpl.REFINDEX_HELPBLOCK_MAPPING_KEY, translationLocale, translationLocaleReferenceId, referenceTranslationBackingBean.getRefIndexHelpText());
  			messageResourceList.add(messageResource);
  		
	messageResource = populateMessageResource(ReferenceTranslationBackingBeanImpl.DESCRIPTION_LABEL_MAPPING_KEY, translationLocale, translationLocaleReferenceId, referenceTranslationBackingBean.getDescriptionLabel());
  			messageResourceList.add(messageResource);
  			messageResource = populateMessageResource(ReferenceTranslationBackingBeanImpl.DESCRIPTION_PLACEHOLDER_MAPPING_KEY, translationLocale, translationLocaleReferenceId, referenceTranslationBackingBean.getDescriptionPlaceHolder());
  			messageResourceList.add(messageResource);
  			messageResource = populateMessageResource(ReferenceTranslationBackingBeanImpl.DESCRIPTION_HELPBLOCK_MAPPING_KEY, translationLocale, translationLocaleReferenceId, referenceTranslationBackingBean.getDescriptionHelpText());
  			messageResourceList.add(messageResource);
  		
	messageResource = populateMessageResource(ReferenceTranslationBackingBeanImpl.SAVEBUTTON_LABEL_MAPPING_KEY, translationLocale, translationLocaleReferenceId, referenceTranslationBackingBean.getSaveButtonLabel());
  			messageResourceList.add(messageResource);
  			messageResource = populateMessageResource(ReferenceTranslationBackingBeanImpl.SAVEBUTTON_PLACEHOLDER_MAPPING_KEY, translationLocale, translationLocaleReferenceId, referenceTranslationBackingBean.getSaveButtonPlaceHolder());
  			messageResourceList.add(messageResource);
  			messageResource = populateMessageResource(ReferenceTranslationBackingBeanImpl.SAVEBUTTON_HELPBLOCK_MAPPING_KEY, translationLocale, translationLocaleReferenceId, referenceTranslationBackingBean.getSaveButtonHelpText());
  			messageResourceList.add(messageResource);
  		

			

			this.messageSource.updateTexts(messageResourceList, userId);			
		}
		catch (Exception ex){
			logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}
			
		// POST/REDIRECT/GET
		return "redirect:/reference/add?language=" + translationLocale;

	}
	




	/**
	 * Opens the details of the ReferenceCategory that owns the Reference identified by the
	 * id given as a parameter.
	 * @param id the id of the Reference for which the ReferenceCategory should be resolved.
	 */
	@RequestMapping(value = "/reference/{id}/referencecategory", method = RequestMethod.GET)
	public String showReferenceCategory(Authentication authentication, @PathVariable("id") int id, 
		final RedirectAttributes redirectAttributes) {
		String returnPath = null;

		logger.debug("showReferenceCategory() : {}", id);
		
		SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();
		//TODO: Needs exception handling
		
		List<ReferenceCategory> referenceCategoryList = this.referenceService.getReferenceBo().getReferenceDao().listReferenceCategoryByReferenceId(new Long(id), userId);

		if (referenceCategoryList.size() == 1){
			returnPath = "forward:/referencecategory"+referenceCategoryList.get(0).getId() + "/update";
		}
		else{
			returnPath = "forward:/referencecategory/all";
		}
		
		return returnPath;

	}

	

	private void setDropDownContents(Model model, Reference reference, Locale locale) {
		
		
		Map<Long, String> localeMap = referenceStore.getLocale();
		SortedMap<Long, String> localizedLocaleMap = new TreeMap<Long, String>(localeMap);
		for (Map.Entry<Long, String> entry : localeMap.entrySet()) {
			localizedLocaleMap.replace(entry.getKey(), messageSource.getMessage(entry.getValue(), new String[0], locale));
		}
		
		model.addAttribute("localeMap", localizedLocaleMap);
	}
	
	private void setTranslationDropDownContents(Model model, Locale locale) {
		Map<Long, String> localeMap = referenceStore.getLocale();
		SortedMap<Long, String> localizedLocaleMap = new TreeMap<Long, String>(localeMap);
		for (Map.Entry<Long, String> entry : localeMap.entrySet()) {
			localizedLocaleMap.replace(entry.getKey(), messageSource.getMessage(entry.getValue(), new String[0], locale));
		}
		model.addAttribute("localeMap", localizedLocaleMap);
	}
	

}
