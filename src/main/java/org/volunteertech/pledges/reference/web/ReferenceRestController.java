package org.volunteertech.pledges.reference.web;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.SortedMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import java.util.Locale;

import org.volunteertech.pledges.reference.dao.Reference;
import org.volunteertech.pledges.reference.dao.ReferenceImpl;
import org.volunteertech.pledges.reference.service.ReferenceService;
import org.volunteertech.pledges.reference.dao.ReferenceLoadException;
import org.volunteertech.pledges.reference.dao.ReferenceSaveException;
import org.volunteertech.pledges.reference.validator.ReferenceFormValidator;
import org.volunteertech.pledges.main.web.BaseController;
import org.volunteertech.pledges.users.security.SecurityUser;

import org.volunteertech.pledges.reference.ReferenceStore;


import org.volunteertech.pledges.reference.dao.ReferenceCategoryImpl;




/**
 * The reference screen is used to add/edit new/existing reference entries. The reference entries are used to populate dropdowns where a group of reference entries with a common column-value can be associated with a dropdown.
 * The Spring ReferenceRestController to handle restful web service requests.
 * This class has been generated by the XSLT processor from the metadata and represents the
 * the Spring ReferenceRestController to handle restful web service requests.
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
@RestController
public class ReferenceRestController extends BaseController
{
	final Logger logger = LoggerFactory.getLogger(ReferenceRestController.class);
	
	@Autowired
	private ReferenceStore referenceStore;
	
	@Autowired
	private ReferenceService referenceService;
	
	


	/**
	 * Returns a JSON representation of all Reference records
	 * @return the JSON representation of all Reference.
	 */
	@RequestMapping(value = "/restful/reference/list", method = RequestMethod.GET)
	@ResponseBody
    public List<Reference> showAllReference(Authentication authentication, Locale locale) {
		logger.info("Inside restful getReference method...");
		List <Reference> referenceList = null;
		SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();		
		
		try{
			// TODO: Needs exception handling policy
	    	referenceList = referenceService.listReference();
	    	referenceList = referenceService.translateReferenceValues(referenceList, locale);
		}
		catch (Exception ex){
			logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}		
		
		
    	return referenceList;
    }


	
	/**
	 * Returns a JSON representation of the Reference record that matches the id parameter
	 * @param id the primary key by which to search
	 * @return the Reference with the relevant primary key.
	 */
	@RequestMapping(value = "/restful/reference", method = RequestMethod.GET)
	@ResponseBody
    public Reference getReference(Authentication authentication, @RequestParam(value="id") String id) {
		logger.info("Inside restful getReference method...");
		Reference reference = null;
		SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();		
		
		try{
			// TODO: Needs exception handling policy
	    	reference = referenceService.load(Long.valueOf(id), userId);
		}
		catch (Exception ex){
			logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}		
		
		
    	return reference;
    }
    
    @RequestMapping(value = "/restful/reference/update", method = RequestMethod.POST)
    @ResponseBody
    public List<Reference> updateReference(Authentication authentication, @RequestBody Reference reference) {
        logger.debug("In the updateReference controller and got Id: " + reference.getId());

		SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();
        
		try{
			// TODO needs security update
			referenceService.storeReference(reference, userId);
		}
		catch (Exception ex){
		// TODO needs custom exception handling
		logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}
    	List<Reference> referenceList = referenceService.listReference();
        
        return referenceList;
    }
    
    
    @RequestMapping(value = "/restful/reference/new", method = RequestMethod.POST)
    @ResponseBody
    public List<Reference> addReference(Authentication authentication, @RequestBody Reference reference) {
        logger.debug("In the addReference controller and got Id: " + reference.getId());
        SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();

		try{
			// TODO needs security update
			referenceService.storeReference(reference, userId);
		}
		catch (Exception ex){
		// TODO needs custom exception handling
		logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}
    	List<Reference> referenceList = referenceService.listReference();
        
        return referenceList;
    }
    
    
    
	/**
	 * Returns a JSON representation of a list of Reference entries that match the referenceCategoryId
	 * parameter.
	 * @param referenceCategoryId by which to filter.
	 * @return a <code>List<Reference></code> containing the Reference
	 * entries that match the referenceCategoryId
	 */
	@RequestMapping(value = "/restful/referencebyreferencecategorylist", method = RequestMethod.GET)
    public List<Reference> getReferenceByReferenceCategoryId(@RequestParam(value="referenceCategoryId") String referenceCategoryId) {
		logger.info("Inside getReferenceByReferenceCategoryId() method...");
		
    	List<Reference> referenceList = referenceService.getReferenceBo().getReferenceDao().listReferenceByReferenceCategoryId(Long.valueOf(referenceCategoryId));
		
    	return referenceList;
    }
  
}
