package org.volunteertech.pledges.accommodationpledge.dao;
import org.hibernate.SessionFactory;
import com.netgrains.security.Authorisation;
import com.netgrains.security.AuthorisationException;
import com.netgrains.security.InvalidUserIDException;
import org.volunteertech.pledges.accommodationpledge.dao.AccommodationPledge;
import org.volunteertech.pledges.accommodationpledge.dao.AccommodationPledgeHistory;
import org.volunteertech.pledges.accommodationpledge.dao.AccommodationPledgeLoadException;
import org.volunteertech.pledges.accommodationpledge.dao.AccommodationPledgeSaveException;

import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.ArrayList;
import java.util.Arrays;
import java.math.BigDecimal;

import org.springframework.stereotype.Repository;
import org.springframework.util.StringUtils;


import org.volunteertech.pledges.pledge.dao.RegisterOfPledges;




/**
 * The Accommodation pledge screen is used to add/edit a new/existing pledge of accommodation
 * This class has been generated by the XSLT processor from the metadata and represents the
 * implementation of the data access object for the AccommodationPledge entity.
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: * $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
@Repository 
public class AccommodationPledgeDaoImpl implements AccommodationPledgeDao
{
    /**
     * The Hibernate SessionFactory instance
     */
    private SessionFactory sessionFactory;
    
    
    

    /**
     * Default Constructor for the AccommodationPledge entity data manager
     */
    public AccommodationPledgeDaoImpl()
    {
    	//Initialise the related Object stores
        
    }
    

    /**
     * Allows Spring to set the container managed SessionFactory instance
     * @param a Spring managed SessionFactory instance
     */    
    public void setSessionFactory(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }


    /**
     * Loads a AccommodationPledge object based on the accommodationPledgeId column
     * @param AccommodationPledgeId the primary key for the underlying record.
     * @ return a AccommodationPledge object matching the parameter or null if none can be found. The
     * method also returns null if the parameter is null.
     */
    public AccommodationPledge load(Long accommodationPledgeId, Long loggedInUserId) throws AuthorisationException, InvalidUserIDException
    {
        if (Authorisation.isAuthorisedView("AccommodationPledge", loggedInUserId, accommodationPledgeId) == false)
        {
        	throw new AuthorisationException();
        }
    
    	AccommodationPledge hibernateEntity = null;
    	
        if (accommodationPledgeId != null)
        {
			hibernateEntity = (AccommodationPledge)this.sessionFactory.getCurrentSession().get(AccommodationPledgeImpl.class, accommodationPledgeId);

            // Load all related singular objects
            
        }
    	
        return hibernateEntity;
    }
    
    
    

    /**
     * Load all existing AccommodationPledge objects from the database. Hibernate will generate the appropriate SQL,
     * send it to the database and populate AccommodationPledge objects with the data.
     * @return List a List of AccommodationPledge objects.
     */
    public List<AccommodationPledge> listAccommodationPledge()
    {
        @SuppressWarnings("unchecked")
        List<AccommodationPledge> result = this.sessionFactory.getCurrentSession().createQuery("from AccommodationPledgeImpl as accommodationPledge order by accommodationPledge.id asc").list();

        return result;
    }

    
    /**
     * Load existing AccommodationPledge objects from the database that have a addressOne column
     * that matches the addressOne parameter.
     * @return List a List of AccommodationPledge objects that match the addressOne parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByAddressOne(String addressOne)
    {
        @SuppressWarnings("unchecked")
        List<AccommodationPledge> result = this.sessionFactory.getCurrentSession().createQuery("from AccommodationPledgeImpl as accommodationPledge where accommodationPledge.addressOne = :addressone order by accommodationPledge.id asc").setParameter("addressone", addressOne).list();

        return result;
    }

    /**
     * Load existing AccommodationPledge objects from the database that have a addressTwo column
     * that matches the addressTwo parameter.
     * @return List a List of AccommodationPledge objects that match the addressTwo parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByAddressTwo(String addressTwo)
    {
        @SuppressWarnings("unchecked")
        List<AccommodationPledge> result = this.sessionFactory.getCurrentSession().createQuery("from AccommodationPledgeImpl as accommodationPledge where accommodationPledge.addressTwo = :addresstwo order by accommodationPledge.id asc").setParameter("addresstwo", addressTwo).list();

        return result;
    }

    /**
     * Load existing AccommodationPledge objects from the database that have a city column
     * that matches the city parameter.
     * @return List a List of AccommodationPledge objects that match the city parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByCity(String city)
    {
        @SuppressWarnings("unchecked")
        List<AccommodationPledge> result = this.sessionFactory.getCurrentSession().createQuery("from AccommodationPledgeImpl as accommodationPledge where accommodationPledge.city = :city order by accommodationPledge.id asc").setParameter("city", city).list();

        return result;
    }

    /**
     * Load existing AccommodationPledge objects from the database that have a stateProvinceRegion column
     * that matches the stateProvinceRegion parameter.
     * @return List a List of AccommodationPledge objects that match the stateProvinceRegion parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByStateProvinceRegion(String stateProvinceRegion)
    {
        @SuppressWarnings("unchecked")
        List<AccommodationPledge> result = this.sessionFactory.getCurrentSession().createQuery("from AccommodationPledgeImpl as accommodationPledge where accommodationPledge.stateProvinceRegion = :stateprovinceregion order by accommodationPledge.id asc").setParameter("stateprovinceregion", stateProvinceRegion).list();

        return result;
    }

    /**
     * Load existing AccommodationPledge objects from the database that have a postCode column
     * that matches the postCode parameter.
     * @return List a List of AccommodationPledge objects that match the postCode parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByPostCode(String postCode)
    {
        @SuppressWarnings("unchecked")
        List<AccommodationPledge> result = this.sessionFactory.getCurrentSession().createQuery("from AccommodationPledgeImpl as accommodationPledge where accommodationPledge.postCode = :postcode order by accommodationPledge.id asc").setParameter("postcode", postCode).list();

        return result;
    }

    /**
     * Load existing AccommodationPledge objects from the database that have a country column
     * that matches the country parameter.
     * @return List a List of AccommodationPledge objects that match the country parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByCountry(Long country)
    {
        @SuppressWarnings("unchecked")
        List<AccommodationPledge> result = this.sessionFactory.getCurrentSession().createQuery("from AccommodationPledgeImpl as accommodationPledge where accommodationPledge.country = :country order by accommodationPledge.id asc").setParameter("country", country).list();

        return result;
    }

    /**
     * Load existing AccommodationPledge objects from the database that have a ownerOccupier column
     * that matches the ownerOccupier parameter.
     * @return List a List of AccommodationPledge objects that match the ownerOccupier parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByOwnerOccupier(Long ownerOccupier)
    {
        @SuppressWarnings("unchecked")
        List<AccommodationPledge> result = this.sessionFactory.getCurrentSession().createQuery("from AccommodationPledgeImpl as accommodationPledge where accommodationPledge.ownerOccupier = :owneroccupier order by accommodationPledge.id asc").setParameter("owneroccupier", ownerOccupier).list();

        return result;
    }

    /**
     * Load existing AccommodationPledge objects from the database that have a accommodationDateFrom column
     * that matches the accommodationDateFrom parameter.
     * @return List a List of AccommodationPledge objects that match the accommodationDateFrom parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByAccommodationDateFrom(Date accommodationDateFrom)
    {
        @SuppressWarnings("unchecked")
        List<AccommodationPledge> result = this.sessionFactory.getCurrentSession().createQuery("from AccommodationPledgeImpl as accommodationPledge where accommodationPledge.accommodationDateFrom = :accommodationdatefrom order by accommodationPledge.id asc").setParameter("accommodationdatefrom", accommodationDateFrom).list();

        return result;
    }

    /**
     * Load existing AccommodationPledge objects from the database that have a accommodationDateTo column
     * that matches the accommodationDateTo parameter.
     * @return List a List of AccommodationPledge objects that match the accommodationDateTo parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByAccommodationDateTo(Date accommodationDateTo)
    {
        @SuppressWarnings("unchecked")
        List<AccommodationPledge> result = this.sessionFactory.getCurrentSession().createQuery("from AccommodationPledgeImpl as accommodationPledge where accommodationPledge.accommodationDateTo = :accommodationdateto order by accommodationPledge.id asc").setParameter("accommodationdateto", accommodationDateTo).list();

        return result;
    }

    /**
     * Load existing AccommodationPledge objects from the database that have a accommodationType column
     * that matches the accommodationType parameter.
     * @return List a List of AccommodationPledge objects that match the accommodationType parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByAccommodationType(Long accommodationType)
    {
        @SuppressWarnings("unchecked")
        List<AccommodationPledge> result = this.sessionFactory.getCurrentSession().createQuery("from AccommodationPledgeImpl as accommodationPledge where accommodationPledge.accommodationType = :accommodationtype order by accommodationPledge.id asc").setParameter("accommodationtype", accommodationType).list();

        return result;
    }

    /**
     * Load existing AccommodationPledge objects from the database that have a accommodationCondition column
     * that matches the accommodationCondition parameter.
     * @return List a List of AccommodationPledge objects that match the accommodationCondition parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByAccommodationCondition(Long accommodationCondition)
    {
        @SuppressWarnings("unchecked")
        List<AccommodationPledge> result = this.sessionFactory.getCurrentSession().createQuery("from AccommodationPledgeImpl as accommodationPledge where accommodationPledge.accommodationCondition = :accommodationcondition order by accommodationPledge.id asc").setParameter("accommodationcondition", accommodationCondition).list();

        return result;
    }

    /**
     * Load existing AccommodationPledge objects from the database that have a numberOfBeds column
     * that matches the numberOfBeds parameter.
     * @return List a List of AccommodationPledge objects that match the numberOfBeds parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByNumberOfBeds(Long numberOfBeds)
    {
        @SuppressWarnings("unchecked")
        List<AccommodationPledge> result = this.sessionFactory.getCurrentSession().createQuery("from AccommodationPledgeImpl as accommodationPledge where accommodationPledge.numberOfBeds = :numberofbeds order by accommodationPledge.id asc").setParameter("numberofbeds", numberOfBeds).list();

        return result;
    }

    /**
     * Load existing AccommodationPledge objects from the database that have a vacantOrShared column
     * that matches the vacantOrShared parameter.
     * @return List a List of AccommodationPledge objects that match the vacantOrShared parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByVacantOrShared(Long vacantOrShared)
    {
        @SuppressWarnings("unchecked")
        List<AccommodationPledge> result = this.sessionFactory.getCurrentSession().createQuery("from AccommodationPledgeImpl as accommodationPledge where accommodationPledge.vacantOrShared = :vacantorshared order by accommodationPledge.id asc").setParameter("vacantorshared", vacantOrShared).list();

        return result;
    }

    /**
     * Load existing AccommodationPledge objects from the database that have a otherAmenities column
     * that matches the otherAmenities parameter.
     * @return List a List of AccommodationPledge objects that match the otherAmenities parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByOtherAmenities(String otherAmenities)
    {
        @SuppressWarnings("unchecked")
        List<AccommodationPledge> result = this.sessionFactory.getCurrentSession().createQuery("from AccommodationPledgeImpl as accommodationPledge where accommodationPledge.otherAmenities = :otheramenities order by accommodationPledge.id asc").setParameter("otheramenities", otherAmenities).list();

        return result;
    }

    /**
     * Load existing AccommodationPledge objects from the database that have a canYouAccommodate column
     * that matches the canYouAccommodate parameter.
     * @return List a List of AccommodationPledge objects that match the canYouAccommodate parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByCanYouAccommodate(Long canYouAccommodate)
    {
        @SuppressWarnings("unchecked")
        List<AccommodationPledge> result = this.sessionFactory.getCurrentSession().createQuery("from AccommodationPledgeImpl as accommodationPledge where accommodationPledge.canYouAccommodate = :canyouaccommodate order by accommodationPledge.id asc").setParameter("canyouaccommodate", canYouAccommodate).list();

        return result;
    }

    /**
     * Load existing AccommodationPledge objects from the database that have a additionalInformation column
     * that matches the additionalInformation parameter.
     * @return List a List of AccommodationPledge objects that match the additionalInformation parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByAdditionalInformation(String additionalInformation)
    {
        @SuppressWarnings("unchecked")
        List<AccommodationPledge> result = this.sessionFactory.getCurrentSession().createQuery("from AccommodationPledgeImpl as accommodationPledge where accommodationPledge.additionalInformation = :additionalinformation order by accommodationPledge.id asc").setParameter("additionalinformation", additionalInformation).list();

        return result;
    }

    
    /**
     * Load existing AccommodationPledge objects from the database that have a createdByID column
     * that matches the createdById parameter.
     * @return List a List of AccommodationPledge objects that match the createdById parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByCreatedById(Long userId)
    {
        @SuppressWarnings("unchecked")
        List<AccommodationPledge> result = this.sessionFactory.getCurrentSession().createQuery("from AccommodationPledgeImpl as accommodationPledge where accommodationPledge.createdByID = :userId order by accommodationPledge.id asc").setParameter("userId", userId).list();

        return result;
    }
    
    
    /**
     * Load all existing AccommodationPledgeHistory objects for a particular AccommodationPledge from the database.
     * Hibernate will generate the appropriate SQL,
     * send it to the database and populate a List of AccommodationPledgeHistory objects with the data.
     * @return List a List of AccommodationPledgeHistory objects.
     */
    public List<AccommodationPledgeHistory> listAccommodationPledgeHistory(Long accommodationPledge)
    {
        
        @SuppressWarnings("unchecked")
        List<AccommodationPledgeHistory> result = this.sessionFactory.getCurrentSession().createQuery("from AccommodationPledgeHistory as accommodationPledgeHistory where accommodationPledgeHistory.accommodationPledgeId = ? order by accommodationPledgeHistory.id asc").setLong(0, accommodationPledge).list();

        return result;
    }
    
    
    /**
     * Load a <code>List</code> of AccommodationPledge objects from the database that match the
     * registerOfPledgesId parameter, the RegisterOfPledges and the AccommodationPledge defined as the one-to-many association in RegisterOfPledges.accommodationPledges in ApplicationDef.xml.
     * @return a <code>List</code> of AccommodationPledge objects that match the registerOfPledgesId parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByRegisterOfPledgesId(Long  registerOfPledgesId)
    {
        @SuppressWarnings("unchecked")
        
        List<AccommodationPledge> result = this.sessionFactory.getCurrentSession().createQuery("from AccommodationPledgeImpl as accommodationPledge where accommodationPledge.registerOfPledges.id = :registerOfPledgesId order by accommodationPledge.id asc").setParameter("registerOfPledgesId", registerOfPledgesId).list();

        return result;
    }
  
    
    /**
     * Creates a new entry in the ACCOMMODATIONPLEDGE table containing the parameters passed here.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the database generated Id of the newly created record.
     * @throws AccommodationPledgeSaveException on failure to save.  
     */
    public Long createAndStoreAccommodationPledge(AccommodationPledge accommodationPledge, Long userId)
    {
    	Long returnValue = new Long(0);

        accommodationPledge.setCreatedByID(userId);
        accommodationPledge.setUpdatedByID(userId);
        accommodationPledge.setDateCreated(new Date());
        accommodationPledge.setDateUpdated(new Date());
        
        this.sessionFactory.getCurrentSession().save(accommodationPledge);
            
        returnValue = accommodationPledge.getId();
		
		return returnValue;
    }


    /**
     * Updates an existing entry in the ACCOMMODATIONPLEDGE table containing the parameters passed here.
     * Only non-null parameters will be applied to the underlying table so preserving any existing entries.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @param the accommodationPledge the AccommodationPledge object to update in the database.
     * @param userId the userId of the currently logged in user. 
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userId passed as parameter is not valid
     */
    public void updateAccommodationPledge(AccommodationPledge accommodationPledge, Long userId) throws AuthorisationException, InvalidUserIDException
    {
        if (Authorisation.isAuthorisedUpdate("AccommodationPledge", userId, accommodationPledge.getId()) == false)
        {
        	throw new AuthorisationException();
        }
    	
        accommodationPledge.setUpdatedByID(userId);
        accommodationPledge.setDateUpdated(new Date());
        this.sessionFactory.getCurrentSession().update(accommodationPledge);
    }
    
    
    /**
     * Loads a AccommodationPledgeFilter object based on the participantID of the currently logged in user
     * @param userID the userID is checked for authorisation to view the record. It is also the key to load a against the createdByID
     * column of the underlying record. There should only ever be one or zero filter records per AccommodationPledge.
     * @ return a AccommodationPledgeFilter object matching the parameter or a newly constructed, empty object if none can be found
     */
    public AccommodationPledgeFilter loadAccommodationPledgeFilter(Long userID) throws AccommodationPledgeLoadException, AuthorisationException, InvalidUserIDException
    {
    	AccommodationPledgeFilter hibernateEntity = null;
    	
        /*if (Authorisation.isAuthorisedView("AccommodationPledge", userID, ACCOMMODATIONPLEDGEID) == false)
        {
        	throw new AuthorisationException();
        }*/
    	

        if (userID != null)
        {
        	
        	try
        	{
				hibernateEntity = (AccommodationPledgeFilter)this.sessionFactory.getCurrentSession().load(AccommodationPledgeFilter.class, userID);
        	}
			catch (Exception ex)
			{
			     throw new AccommodationPledgeLoadException("AccommodationPledgeEntityDataManager::loadAccommodationPledgeFilter", ex);
			}		
    		
            // Load all related singular objects
            
        }
    	
        return hibernateEntity;
    }
    
    /**
     * Creates a new entry in the ACCOMMODATIONPLEDGEFILTER table containing the parameters passed here.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the userID which is also the assigned Id for the newly created record.
     * @throws AccommodationPledgeSaveException on failure to save.  
     */
    public Long createAndStoreAccommodationPledgeFilter(AccommodationPledgeFilter accommodationPledgeFilter,  Long userId)
        throws AccommodationPledgeSaveException
    {
    	Long returnValue = new Long(0);
        

		try
		{
            accommodationPledgeFilter.setId(userId);
            accommodationPledgeFilter.setCreatedByID(userId);
            accommodationPledgeFilter.setUpdatedByID(userId);
            accommodationPledgeFilter.setDateCreated(new Date());
            accommodationPledgeFilter.setDateUpdated(new Date());

            this.sessionFactory.getCurrentSession().save(accommodationPledgeFilter);
            
            returnValue = accommodationPledgeFilter.getId();
		}
		catch (Exception ex)
		{
		     throw new AccommodationPledgeSaveException("AccommodationPledgeEntityDataManager::createAndStoreAccommodationPledgeFilter", ex);
		}		
		
		return returnValue;
    }
    
    
    /**
     * Updates an existing entry in the ACCOMMODATIONPLEDGEFILTER table and associated tables 
     * containing the parameters passed here. If the entry denoted by the userID does not exist then one is created.
     *	
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws AccommodationPledgeSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public Long updateAccommodationPledgeFilter(AccommodationPledgeFilter accommodationPledgeFilter, Long userId)
        throws AccommodationPledgeLoadException, AccommodationPledgeSaveException, AuthorisationException, InvalidUserIDException
    {
    	Long returnValue = new Long(0);
    	
        //if (Authorisation.isAuthorisedUpdate("AccommodationPledge", userID, ACCOMMODATIONPLEDGEID) == false)
        //{
        //	throw new AuthorisationException();
        //}
    	
		try
		{
			accommodationPledgeFilter.setId(userId);
            accommodationPledgeFilter.setUpdatedByID(userId);
            accommodationPledgeFilter.setDateUpdated(new Date());
            this.sessionFactory.getCurrentSession().update(accommodationPledgeFilter);
            returnValue = accommodationPledgeFilter.getId();
        }
		catch (Exception ex)
		{
		     throw new AccommodationPledgeSaveException("AccommodationPledgeDaoImpl::updateAccommodationPledgeFilter, userId: " + userId, ex);
		}	
		
		return returnValue;	
        
    }
    
	
	/**
	 * Returns a List of the RegisterOfPledges that own the AccommodationPledge identified by the
	 * id given as a parameter.
	 * @param accommodationPledgeId the id of the AccommodationPledge for which the RegisterOfPledges should be resolved.
	 * @param userId the userId of the currently logged in user.
	 */
	public List<RegisterOfPledges> listRegisterOfPledgesByAccommodationPledgeId(Long accommodationPledgeId, Long userId){
		@SuppressWarnings("unchecked")
		List<RegisterOfPledges> result = this.sessionFactory.getCurrentSession().createQuery("select distinct registerOfPledges from RegisterOfPledgesImpl as registerOfPledges inner join registerOfPledges.accommodationPledges as accommodationPledge where accommodationPledge.id = :accommodationPledgeId order by registerOfPledges.id asc").setParameter("accommodationPledgeId", accommodationPledgeId).list();
    	return result;
	}

    
    /**
     * Converts a Comma Seperated Volume (delimited by ",") to a <code>List<code/> of type <code>String<code/>
     */
	private static List<String> convertCommaDelimitedStringToList(String delimitedString) {

		List<String> result = new ArrayList<String>();

		if (!StringUtils.isEmpty(delimitedString)) {
			result = Arrays.asList(StringUtils.delimitedListToStringArray(delimitedString, ","));
		}
		return result;

	}

    /**
     * Converts a List of type String to a Comma Seperated Volume (delimited by ",") 
     */
	private String convertListToCommaDelimitedString(List<String> list) {

		String result = "";
		if (list != null) {
			result = StringUtils.arrayToCommaDelimitedString(list.toArray());
		}
		return result;

	}

    /**
     * Cleans up any Collection Objects created by the Class instance
     */
    protected void finalize() throws Throwable
    {
        super.finalize();
        
    }    
    
}
    
