package org.volunteertech.pledges.accommodationpledge.dao;
import org.hibernate.SessionFactory;
import com.netgrains.security.AuthorisationException;
import com.netgrains.security.InvalidUserIDException;
import org.volunteertech.pledges.accommodationpledge.dao.AccommodationPledge;
import org.volunteertech.pledges.accommodationpledge.dao.AccommodationPledgeHistory;
import org.volunteertech.pledges.accommodationpledge.dao.AccommodationPledgeLoadException;
import org.volunteertech.pledges.accommodationpledge.dao.AccommodationPledgeSaveException;
import java.util.List;
import java.util.Set;
import java.util.Date;
import java.math.BigDecimal;

  
import org.volunteertech.pledges.pledge.dao.RegisterOfPledges;



/**
 * The Accommodation pledge screen is used to add/edit a new/existing pledge of accommodation
 * This Interface has been generated by the XSLT processor from the meta data and represents the
 * interface of the data access object(DAO) for the AccommodationPledge entity.
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: * $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
public interface AccommodationPledgeDao
{

    /**
     * Allows Spring to set the container managed SessionFactory instance
     * @param a Spring managed SessionFactory instance
     */    
    public void setSessionFactory(SessionFactory sessionFactory);


    /**
     * Loads a AccommodationPledge object based on the accommodationPledgeId column
     * @param accommodationPledgeId the primary key for the underlying record.
     * @ return a AccommodationPledge object matching the parameter or null if none can be found. The
     * method also returns null if the parameter is null.
     */
    public AccommodationPledge load(Long accommodationPledgeId, Long loggedInUserId) throws AuthorisationException, InvalidUserIDException;
    

    /**
     * Load all existing AccommodationPledge objects from the database. Hibernate will generate the appropriate SQL,
     * send it to the database and populate a List of AccommodationPledge objects with the data.
     * @return List a List of AccommodationPledge objects.
     */
    public List<AccommodationPledge> listAccommodationPledge();
    
    
    /**
     * Load existing AccommodationPledge objects from the database that have a addressOne column
     * that matches the addressOne parameter.
     * @return List a List of AccommodationPledge objects that match the addressOne parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByAddressOne(String addressOne);

    /**
     * Load existing AccommodationPledge objects from the database that have a addressTwo column
     * that matches the addressTwo parameter.
     * @return List a List of AccommodationPledge objects that match the addressTwo parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByAddressTwo(String addressTwo);

    /**
     * Load existing AccommodationPledge objects from the database that have a city column
     * that matches the city parameter.
     * @return List a List of AccommodationPledge objects that match the city parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByCity(String city);

    /**
     * Load existing AccommodationPledge objects from the database that have a stateProvinceRegion column
     * that matches the stateProvinceRegion parameter.
     * @return List a List of AccommodationPledge objects that match the stateProvinceRegion parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByStateProvinceRegion(String stateProvinceRegion);

    /**
     * Load existing AccommodationPledge objects from the database that have a postCode column
     * that matches the postCode parameter.
     * @return List a List of AccommodationPledge objects that match the postCode parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByPostCode(String postCode);

    /**
     * Load existing AccommodationPledge objects from the database that have a country column
     * that matches the country parameter.
     * @return List a List of AccommodationPledge objects that match the country parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByCountry(Long country);

    /**
     * Load existing AccommodationPledge objects from the database that have a ownerOccupier column
     * that matches the ownerOccupier parameter.
     * @return List a List of AccommodationPledge objects that match the ownerOccupier parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByOwnerOccupier(Long ownerOccupier);

    /**
     * Load existing AccommodationPledge objects from the database that have a accommodationDateFrom column
     * that matches the accommodationDateFrom parameter.
     * @return List a List of AccommodationPledge objects that match the accommodationDateFrom parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByAccommodationDateFrom(Date accommodationDateFrom);

    /**
     * Load existing AccommodationPledge objects from the database that have a accommodationDateTo column
     * that matches the accommodationDateTo parameter.
     * @return List a List of AccommodationPledge objects that match the accommodationDateTo parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByAccommodationDateTo(Date accommodationDateTo);

    /**
     * Load existing AccommodationPledge objects from the database that have a accommodationType column
     * that matches the accommodationType parameter.
     * @return List a List of AccommodationPledge objects that match the accommodationType parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByAccommodationType(Long accommodationType);

    /**
     * Load existing AccommodationPledge objects from the database that have a accommodationCondition column
     * that matches the accommodationCondition parameter.
     * @return List a List of AccommodationPledge objects that match the accommodationCondition parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByAccommodationCondition(Long accommodationCondition);

    /**
     * Load existing AccommodationPledge objects from the database that have a numberOfBeds column
     * that matches the numberOfBeds parameter.
     * @return List a List of AccommodationPledge objects that match the numberOfBeds parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByNumberOfBeds(Long numberOfBeds);

    /**
     * Load existing AccommodationPledge objects from the database that have a vacantOrShared column
     * that matches the vacantOrShared parameter.
     * @return List a List of AccommodationPledge objects that match the vacantOrShared parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByVacantOrShared(Long vacantOrShared);

    /**
     * Load existing AccommodationPledge objects from the database that have a otherAmenities column
     * that matches the otherAmenities parameter.
     * @return List a List of AccommodationPledge objects that match the otherAmenities parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByOtherAmenities(String otherAmenities);

    /**
     * Load existing AccommodationPledge objects from the database that have a canYouAccommodate column
     * that matches the canYouAccommodate parameter.
     * @return List a List of AccommodationPledge objects that match the canYouAccommodate parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByCanYouAccommodate(Long canYouAccommodate);

    /**
     * Load existing AccommodationPledge objects from the database that have a additionalInformation column
     * that matches the additionalInformation parameter.
     * @return List a List of AccommodationPledge objects that match the additionalInformation parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByAdditionalInformation(String additionalInformation);

    
    /**
     * Load existing AccommodationPledge objects from the database that have a createdByID column
     * that matches the userId parameter.
     * @return List a List of AccommodationPledge objects that match the userId parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByCreatedById(Long userId);
    
    
    /**
     * Load all existing AccommodationPledgeHistory objects for a particular AccommodationPledge from the database.
     * Hibernate will generate the appropriate SQL,
     * send it to the database and populate AccommodationPledgeHistory objects with the data.
     * @return List a List of AccommodationPledgeHistory objects.
     */
    public List<AccommodationPledgeHistory> listAccommodationPledgeHistory(Long accommodationPledge);
    
    
    /**
     * Load a <code>List</code> of AccommodationPledge objects from the database that match the
     * registerOfPledgesId parameter, the RegisterOfPledges and the AccommodationPledge being related by an association.
     * @return a <code>List</code> of AccommodationPledge objects that match the registerOfPledgesId parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByRegisterOfPledgesId(Long  registerOfPledgesId);
  
    
    
    /**
     * Creates a new entry in the ACCOMMODATIONPLEDGE table containing the parameters passed here.
     *
     * @param userID the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the database generated Id of the newly created record.
     */
    public Long createAndStoreAccommodationPledge(AccommodationPledge accommodationPledge, Long userId);


    /**
     * Updates an existing entry in the ACCOMMODATIONPLEDGE table containing the parameters passed here.
     * Only non-null parameters will be applied to the underlying table so preserving any existing entries.
     * @param the accommodationPledge the AccommodationPledge object to update in the database.
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     */
    public void updateAccommodationPledge(AccommodationPledge accommodationPledge, Long userId) throws AuthorisationException, InvalidUserIDException;
    
    
    /**
     * Loads a AccommodationPledgeFilter object based on the participantID of the currently logged in user
     * @param userID the userID is checked for authorisation to view the record. It is also the key to load a against the createdByID
     * column of the underlying record. There should only ever be one or zero filter records per AccommodationPledge.
     * @ return a AccommodationPledgeFilter object matching the parameter or a newly constructed, empty object if none can be found
     */
    public AccommodationPledgeFilter loadAccommodationPledgeFilter(Long userID) throws AccommodationPledgeLoadException, AuthorisationException, InvalidUserIDException;


    
    /**
     * Creates a new entry in the ACCOMMODATIONPLEDGEFILTER table containing the parameters passed here.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the userId which is also the assigned Id for the newly created record.
     * @throws AccommodationPledgeSaveException on failure to save.  
     */
    public Long createAndStoreAccommodationPledgeFilter(AccommodationPledgeFilter accommodationPledgeFilter, Long userId)
        throws AccommodationPledgeSaveException;
    
    
    /**
     * Updates an existing entry in the ACCOMMODATIONPLEDGEFILTER table and associated tables 
     * containing the parameters passed here. If the entry denoted by the userID does not exist then one is created.
     *	
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws AccommodationPledgeSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public Long updateAccommodationPledgeFilter(AccommodationPledgeFilter accommodationPledgeFilter, Long userId)
        throws AccommodationPledgeLoadException, AccommodationPledgeSaveException, AuthorisationException, InvalidUserIDException;
    
	
	/**
	 * Returns a List of the RegisterOfPledges that own the AccommodationPledge identified by the
	 * id given as a parameter.
	 * @param accommodationpledgeId the id of the AccommodationPledge for which the RegisterOfPledges should be resolved.
	 * @param userId the userId of the currently logged in user.
	 */
	public List<RegisterOfPledges> listRegisterOfPledgesByAccommodationPledgeId(Long accommodationpledgeId, Long userId);

}
    
