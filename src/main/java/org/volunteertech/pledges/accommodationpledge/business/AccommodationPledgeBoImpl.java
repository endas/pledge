package org.volunteertech.pledges.accommodationpledge.business;
import com.netgrains.security.Authorisation;
import com.netgrains.security.AuthorisationException;
import com.netgrains.security.InvalidUserIDException;
import org.volunteertech.pledges.accommodationpledge.dao.AccommodationPledge;
import org.volunteertech.pledges.accommodationpledge.dao.AccommodationPledgeDao;
import org.volunteertech.pledges.accommodationpledge.dao.AccommodationPledgeFilter;
import org.volunteertech.pledges.accommodationpledge.dao.AccommodationPledgeHistory;
import org.volunteertech.pledges.accommodationpledge.dao.AccommodationPledgeLoadException;
import org.volunteertech.pledges.accommodationpledge.dao.AccommodationPledgeSaveException;

import java.util.Date;
import java.util.List;
import java.util.Set;
import java.math.BigDecimal;
import java.util.ArrayList;




/**
 * The Accommodation pledge screen is used to add/edit a new/existing pledge of accommodation
 * This Class has been generated by the XSLT processor from the meta data and represents the
 * implementation of the Business Object(BO) for the AccommodationPledge entity. A Business Object
 * is provided in order to provide a seperation from the Data Access implementation. 
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: * $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
public class AccommodationPledgeBoImpl implements AccommodationPledgeBo
{
	/**
	 * The Data Access Object
	 */
	AccommodationPledgeDao  accommodationPledgeDao;
	    
    
    

    /**
     * Default Constructor for the AccommodationPledge Business Object.
     */
    public AccommodationPledgeBoImpl()
    {
    	//Initialise the related Object stores
        
    }
    
    /**
     * Sets the required Data Access Object (DAO)
     * @param accommodationPledgeDao the accommodationPledgeDao used to access the accommodationPledge entity.
     */
    public void setAccommodationPledgeDao(AccommodationPledgeDao accommodationPledgeDao){
    	this.accommodationPledgeDao = accommodationPledgeDao;
    }

    /**
     * Returns the required Data Access Object (DAO)
     * @return the AccommodationPledgeDao used to access the accommodationPledge entity.
     */
    public AccommodationPledgeDao getAccommodationPledgeDao(){
    	return this.accommodationPledgeDao;
    }
    

    /**
     * Loads a AccommodationPledge object based on the ACCOMMODATIONPLEDGEID column
     * @param ACCOMMODATIONPLEDGEId the primary key for the underlying record.
     * @param userId the userId is checked for authorisation to view the record
     * @ return a AccommodationPledge object matching the parameter or null if none can be found. The
     * method also returns null if the parameter is null.
     */
    public AccommodationPledge load(Long accommodationPledgeId, Long loggedInUserId) throws AccommodationPledgeLoadException, AuthorisationException, InvalidUserIDException
    {
    	AccommodationPledge accommodationPledge = null;
    	
        if (Authorisation.isAuthorisedView("AccommodationPledge", loggedInUserId, accommodationPledgeId) == false)
        {
        	throw new AuthorisationException();
        }
    	

        if (accommodationPledgeId != null)
        {
        	try
        	{
				accommodationPledge = (AccommodationPledge)this.getAccommodationPledgeDao().load(accommodationPledgeId, loggedInUserId);
        	}
			catch (Exception ex)
			{
			     throw new AccommodationPledgeLoadException("AccommodationPledgeDaoImpl::load", ex);
			}		
    		
            // Load all related singular objects
            
        }
    	
        return accommodationPledge;
    }
    
    
    


    /**
     * Load all existing AccommodationPledge objects. 
     * @return List a List of AccommodationPledge objects.
     */
    public List<AccommodationPledge> listAccommodationPledge()
    {
        List<AccommodationPledge> result = this.getAccommodationPledgeDao().listAccommodationPledge();

        return result;
    }
    
    
    /**
     * Returns a <code>List</code> of AccommodationPledge objects that have a matching addressOne
     * @return List a List of AccommodationPledge objects that match the addressOne property given as parameter.
     * @param addressOne the addressOne on which to match the required records.
     */
    public List<AccommodationPledge> listAccommodationPledgeByAddressOne(String addressOne)
    {
        List<AccommodationPledge> result = this.getAccommodationPledgeDao().listAccommodationPledgeByAddressOne(addressOne);

        return result;
    }

    /**
     * Returns a <code>List</code> of AccommodationPledge objects that have a matching addressTwo
     * @return List a List of AccommodationPledge objects that match the addressTwo property given as parameter.
     * @param addressTwo the addressTwo on which to match the required records.
     */
    public List<AccommodationPledge> listAccommodationPledgeByAddressTwo(String addressTwo)
    {
        List<AccommodationPledge> result = this.getAccommodationPledgeDao().listAccommodationPledgeByAddressTwo(addressTwo);

        return result;
    }

    /**
     * Returns a <code>List</code> of AccommodationPledge objects that have a matching city
     * @return List a List of AccommodationPledge objects that match the city property given as parameter.
     * @param city the city on which to match the required records.
     */
    public List<AccommodationPledge> listAccommodationPledgeByCity(String city)
    {
        List<AccommodationPledge> result = this.getAccommodationPledgeDao().listAccommodationPledgeByCity(city);

        return result;
    }

    /**
     * Returns a <code>List</code> of AccommodationPledge objects that have a matching stateProvinceRegion
     * @return List a List of AccommodationPledge objects that match the stateProvinceRegion property given as parameter.
     * @param stateProvinceRegion the stateProvinceRegion on which to match the required records.
     */
    public List<AccommodationPledge> listAccommodationPledgeByStateProvinceRegion(String stateProvinceRegion)
    {
        List<AccommodationPledge> result = this.getAccommodationPledgeDao().listAccommodationPledgeByStateProvinceRegion(stateProvinceRegion);

        return result;
    }

    /**
     * Returns a <code>List</code> of AccommodationPledge objects that have a matching postCode
     * @return List a List of AccommodationPledge objects that match the postCode property given as parameter.
     * @param postCode the postCode on which to match the required records.
     */
    public List<AccommodationPledge> listAccommodationPledgeByPostCode(String postCode)
    {
        List<AccommodationPledge> result = this.getAccommodationPledgeDao().listAccommodationPledgeByPostCode(postCode);

        return result;
    }

    /**
     * Returns a <code>List</code> of AccommodationPledge objects that have a matching country
     * @return List a List of AccommodationPledge objects that match the country property given as parameter.
     * @param country the country on which to match the required records.
     */
    public List<AccommodationPledge> listAccommodationPledgeByCountry(Long country)
    {
        List<AccommodationPledge> result = this.getAccommodationPledgeDao().listAccommodationPledgeByCountry(country);

        return result;
    }

    /**
     * Returns a <code>List</code> of AccommodationPledge objects that have a matching ownerOccupier
     * @return List a List of AccommodationPledge objects that match the ownerOccupier property given as parameter.
     * @param ownerOccupier the ownerOccupier on which to match the required records.
     */
    public List<AccommodationPledge> listAccommodationPledgeByOwnerOccupier(Long ownerOccupier)
    {
        List<AccommodationPledge> result = this.getAccommodationPledgeDao().listAccommodationPledgeByOwnerOccupier(ownerOccupier);

        return result;
    }

    /**
     * Returns a <code>List</code> of AccommodationPledge objects that have a matching accommodationDateFrom
     * @return List a List of AccommodationPledge objects that match the accommodationDateFrom property given as parameter.
     * @param accommodationDateFrom the accommodationDateFrom on which to match the required records.
     */
    public List<AccommodationPledge> listAccommodationPledgeByAccommodationDateFrom(Date accommodationDateFrom)
    {
        List<AccommodationPledge> result = this.getAccommodationPledgeDao().listAccommodationPledgeByAccommodationDateFrom(accommodationDateFrom);

        return result;
    }

    /**
     * Returns a <code>List</code> of AccommodationPledge objects that have a matching accommodationDateTo
     * @return List a List of AccommodationPledge objects that match the accommodationDateTo property given as parameter.
     * @param accommodationDateTo the accommodationDateTo on which to match the required records.
     */
    public List<AccommodationPledge> listAccommodationPledgeByAccommodationDateTo(Date accommodationDateTo)
    {
        List<AccommodationPledge> result = this.getAccommodationPledgeDao().listAccommodationPledgeByAccommodationDateTo(accommodationDateTo);

        return result;
    }

    /**
     * Returns a <code>List</code> of AccommodationPledge objects that have a matching accommodationType
     * @return List a List of AccommodationPledge objects that match the accommodationType property given as parameter.
     * @param accommodationType the accommodationType on which to match the required records.
     */
    public List<AccommodationPledge> listAccommodationPledgeByAccommodationType(Long accommodationType)
    {
        List<AccommodationPledge> result = this.getAccommodationPledgeDao().listAccommodationPledgeByAccommodationType(accommodationType);

        return result;
    }

    /**
     * Returns a <code>List</code> of AccommodationPledge objects that have a matching accommodationCondition
     * @return List a List of AccommodationPledge objects that match the accommodationCondition property given as parameter.
     * @param accommodationCondition the accommodationCondition on which to match the required records.
     */
    public List<AccommodationPledge> listAccommodationPledgeByAccommodationCondition(Long accommodationCondition)
    {
        List<AccommodationPledge> result = this.getAccommodationPledgeDao().listAccommodationPledgeByAccommodationCondition(accommodationCondition);

        return result;
    }

    /**
     * Returns a <code>List</code> of AccommodationPledge objects that have a matching numberOfBeds
     * @return List a List of AccommodationPledge objects that match the numberOfBeds property given as parameter.
     * @param numberOfBeds the numberOfBeds on which to match the required records.
     */
    public List<AccommodationPledge> listAccommodationPledgeByNumberOfBeds(Long numberOfBeds)
    {
        List<AccommodationPledge> result = this.getAccommodationPledgeDao().listAccommodationPledgeByNumberOfBeds(numberOfBeds);

        return result;
    }

    /**
     * Returns a <code>List</code> of AccommodationPledge objects that have a matching vacantOrShared
     * @return List a List of AccommodationPledge objects that match the vacantOrShared property given as parameter.
     * @param vacantOrShared the vacantOrShared on which to match the required records.
     */
    public List<AccommodationPledge> listAccommodationPledgeByVacantOrShared(Long vacantOrShared)
    {
        List<AccommodationPledge> result = this.getAccommodationPledgeDao().listAccommodationPledgeByVacantOrShared(vacantOrShared);

        return result;
    }

    /**
     * Returns a <code>List</code> of AccommodationPledge objects that have a matching otherAmenities
     * @return List a List of AccommodationPledge objects that match the otherAmenities property given as parameter.
     * @param otherAmenities the otherAmenities on which to match the required records.
     */
    public List<AccommodationPledge> listAccommodationPledgeByOtherAmenities(String otherAmenities)
    {
        List<AccommodationPledge> result = this.getAccommodationPledgeDao().listAccommodationPledgeByOtherAmenities(otherAmenities);

        return result;
    }

    /**
     * Returns a <code>List</code> of AccommodationPledge objects that have a matching canYouAccommodate
     * @return List a List of AccommodationPledge objects that match the canYouAccommodate property given as parameter.
     * @param canYouAccommodate the canYouAccommodate on which to match the required records.
     */
    public List<AccommodationPledge> listAccommodationPledgeByCanYouAccommodate(Long canYouAccommodate)
    {
        List<AccommodationPledge> result = this.getAccommodationPledgeDao().listAccommodationPledgeByCanYouAccommodate(canYouAccommodate);

        return result;
    }

    /**
     * Returns a <code>List</code> of AccommodationPledge objects that have a matching additionalInformation
     * @return List a List of AccommodationPledge objects that match the additionalInformation property given as parameter.
     * @param additionalInformation the additionalInformation on which to match the required records.
     */
    public List<AccommodationPledge> listAccommodationPledgeByAdditionalInformation(String additionalInformation)
    {
        List<AccommodationPledge> result = this.getAccommodationPledgeDao().listAccommodationPledgeByAdditionalInformation(additionalInformation);

        return result;
    }

    
	/**
     * Load existing AccommodationPledge objects from the database that have a createdByID column
     * that matches the userId parameter.
     * @return List a List of AccommodationPledge objects that match the userId parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByCreatedById(Long userId)
    {
        List<AccommodationPledge> result = this.getAccommodationPledgeDao().listAccommodationPledgeByCreatedById(userId);

        return result;
    }
    
    
    /**
     * Load all existing AccommodationPledgeHistory objects for a particular AccommodationPledge.
     * The <code>List</code> of AccommodationPledgeHistory objects contains all of the changes that have been made to the
     * AccommodationPledge object identified by the accommodationPledge parameter'
     * @return List a List of AccommodationPledgeHistory objects.
     */
    public List<AccommodationPledgeHistory> listAccommodationPledgeHistory(Long accommodationPledge)
    {
        List<AccommodationPledgeHistory> result = this.getAccommodationPledgeDao().listAccommodationPledgeHistory(accommodationPledge);

        return result;
    }
    
    
    /**
     * Load a <code>List</code> of AccommodationPledge objects from the database that match the
     * accommodationPledgeId parameter, the RegisterOfPledges and the AccommodationPledge being related by an association.
     * @return a <code>List</code> of AccommodationPledge objects that match the accommodationPledgeId parameter.
     */
    public List<AccommodationPledge> listAccommodationPledgeByRegisterOfPledgesId(Long registerOfPledgesId)
    {
        List<AccommodationPledge> result = this.getAccommodationPledgeDao().listAccommodationPledgeByRegisterOfPledgesId(registerOfPledgesId);
        
        return result;
    }
  
    
    
    /**
     * Creates a new entry in the ACCOMMODATIONPLEDGE table containing the parameters passed here.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the database generated Id of the newly created record.
     * @throws AccommodationPledgeSaveException on failure to save.  
     */
    public Long createAndStoreAccommodationPledge(AccommodationPledge accommodationPledge, Long userID)
        throws AccommodationPledgeSaveException
    {
    	Long returnValue = new Long(0);
        
		try
		{
            returnValue = this.getAccommodationPledgeDao().createAndStoreAccommodationPledge(accommodationPledge, userID);
		}
		catch (Exception ex)
		{
		     throw new AccommodationPledgeSaveException("AccommodationPledgeEntityDataManager::createAndStoreAccommodationPledge", ex);
		}		
		
		return returnValue;
    }


    /**
     * Updates an existing entry in the ACCOMMODATIONPLEDGE table containing the parameters passed here.
     * Only non-null parameters will be applied to the underlying table so preserving any existing entries.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws AccommodationPledgeLoadException if the existing record cannot be loaded
     * @throws AccommodationPledgeSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public void updateAccommodationPledge(AccommodationPledge accommodationPledge, Long userID)
        throws AccommodationPledgeSaveException, AccommodationPledgeLoadException, AuthorisationException, InvalidUserIDException
    {
    	
        if (Authorisation.isAuthorisedUpdate("AccommodationPledge", userID, accommodationPledge.getId()) == false)
        {
        	throw new AuthorisationException();
        }
    	
		try
		{
            this.getAccommodationPledgeDao().updateAccommodationPledge(accommodationPledge, userID);
        }
		catch (Exception ex)
		{
		     throw new AccommodationPledgeSaveException("AccommodationPledgeEntityDataManager::updateAccommodationPledge, AccommodationPledgeID: " + accommodationPledge.getId(), ex);
		}		
        
    }
    
    
    /**
     * Loads a AccommodationPledgeFilter object based on the participantID of the currently logged in user
     * @param userId the userId is checked for authorisation to view the record. It is also the key to load a against the createdByID
     * column of the underlying record. There should only ever be one or zero filter records per AccommodationPledge.
     * @ return a AccommodationPledgeFilter object matching the parameter or a newly constructed, empty object if none can be found
     */
    public AccommodationPledgeFilter loadAccommodationPledgeFilter(Long userId) throws AccommodationPledgeLoadException, AuthorisationException, InvalidUserIDException
    {
    	AccommodationPledgeFilter accommodationPledgeFilter = null;
    	
        /*if (Authorisation.isAuthorisedView("AccommodationPledge", userId, ACCOMMODATIONPLEDGEID) == false)
        {
        	throw new AuthorisationException();
        }*/
    	

        if (userId != null)
        {
        	
        	try
        	{
				accommodationPledgeFilter = (AccommodationPledgeFilter)this.getAccommodationPledgeDao().loadAccommodationPledgeFilter(userId);
        	}
			catch (Exception ex)
			{
			     throw new AccommodationPledgeLoadException("AccommodationPledgeBoImpl::loadAccommodationPledgeFilter", ex);
			}		
    		
            // Load all related singular objects
            
        }
    	
        return accommodationPledgeFilter;
    }
    
    /**
     * Creates a new entry in the ACCOMMODATIONPLEDGEFILTER table containing the parameters passed here.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the userId which is also the assigned Id for the newly created record.
     * @throws AccommodationPledgeSaveException on failure to save.  
     */
    public Long createAndStoreAccommodationPledgeFilter(AccommodationPledgeFilter accommodationPledgeFilter,  Long userId)
        throws AccommodationPledgeSaveException
    {
    	Long returnValue = new Long(0);
        
		try
		{
            accommodationPledgeFilter.setId(userId);
			accommodationPledgeFilter.setCreatedByID(userId);
            accommodationPledgeFilter.setUpdatedByID(userId);
            accommodationPledgeFilter.setDateCreated(new Date());
            accommodationPledgeFilter.setDateUpdated(new Date());

            returnValue = this.getAccommodationPledgeDao().createAndStoreAccommodationPledgeFilter(accommodationPledgeFilter, userId);
		}
		catch (Exception ex)
		{
		     throw new AccommodationPledgeSaveException("AccommodationPledgeBoImpl::createAndStoreAccommodationPledgeFilter", ex);
		}		
		
		return returnValue;
    }
    
    
    /**
     * Updates an existing entry in the ACCOMMODATIONPLEDGEFILTER table and associated tables 
     * containing the parameters passed here. If the entry denoted by the userID does not exist then one is created.
     *	
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws AccommodationPledgeSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public Long updateAccommodationPledgeFilter(AccommodationPledgeFilter accommodationPledgeFilter, Long userId)
        throws AccommodationPledgeLoadException, AccommodationPledgeSaveException, AuthorisationException, InvalidUserIDException
    {
    	Long returnValue = new Long(0);
    	
        //if (Authorisation.isAuthorisedUpdate("AccommodationPledge", userId, ACCOMMODATIONPLEDGEID) == false)
        //{
        //	throw new AuthorisationException();
        //}
    	
		try
		{
			accommodationPledgeFilter.setId(userId);
			accommodationPledgeFilter.setUpdatedByID(userId);
            accommodationPledgeFilter.setDateUpdated(new Date());
            returnValue = this.getAccommodationPledgeDao().updateAccommodationPledgeFilter(accommodationPledgeFilter, userId);
        }
		catch (Exception ex)
		{
		     throw new AccommodationPledgeSaveException("AccommodationPledgeBoImpl::updateAccommodationPledgeFilter, userId: " + userId, ex);
		}	
		
		return returnValue;	
        
    }
    

    
    /**
     * Cleans up any Collection Objects created by the Class instance
     */
    protected void finalize() throws Throwable
    {
        super.finalize();
        
    }    
    
    
}
    
