package org.volunteertech.pledges.address.business;
import com.netgrains.security.AuthorisationException;
import com.netgrains.security.InvalidUserIDException;
import org.volunteertech.pledges.address.dao.Address;
import org.volunteertech.pledges.address.dao.AddressDao;
import org.volunteertech.pledges.address.dao.AddressFilter;
import org.volunteertech.pledges.address.dao.AddressHistory;
import org.volunteertech.pledges.address.dao.AddressLoadException;
import org.volunteertech.pledges.address.dao.AddressSaveException;
import java.util.List;
import java.util.Set;
import java.util.Date;
import java.math.BigDecimal;



/**
 * The Address Details
 * This Interface has been generated by the XSLT processor from the meta data and represents the
 * interface of the Business Object(BO) for the Address entity. A Business Object
 * is provided in order to provide a seperation from the Data Access implementation. 
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: * $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
public interface AddressBo
{
    
    
    /**
     * Sets the required Data Access Object (DAO)
     * @param addressDao the addressDao used to access the address entity.
     */
    public void setAddressDao(AddressDao addressDao);
    

    /**
     * Returns the required Data Access Object (DAO)
     * @return the AddressDao used to access the address entity.
     */
    public AddressDao getAddressDao();
    

    
    /**
     * Loads a Address object based on the ADDRESSID column
     * @param ADDRESSID the primary key for the underlying record.
     * @param userID the userID is checked for authorisation to view the record
     * @ return a Address object matching the parameter or null if none can be found. The
     * method also returns null if the parameter is null.
     */
    public Address load(Long addressID, Long loggedInUserId) throws AddressLoadException, AuthorisationException, InvalidUserIDException;
    
    

    /**
     * Load all existing Address objects. 
     * @return List a List of Address objects.
     */
    public List<Address> listAddress();
    
    
    /**
     * Returns a <code>List</code> of Address objects that have a matching addressOne
     * @return List a List of Address objects that match the addressOne property given as parameter.
     * @param addressOne the addressOne on which to match the required records.
     */
    public List<Address> listAddressByAddressOne(String addressOne);

    /**
     * Returns a <code>List</code> of Address objects that have a matching addressTwo
     * @return List a List of Address objects that match the addressTwo property given as parameter.
     * @param addressTwo the addressTwo on which to match the required records.
     */
    public List<Address> listAddressByAddressTwo(String addressTwo);

    /**
     * Returns a <code>List</code> of Address objects that have a matching city
     * @return List a List of Address objects that match the city property given as parameter.
     * @param city the city on which to match the required records.
     */
    public List<Address> listAddressByCity(String city);

    /**
     * Returns a <code>List</code> of Address objects that have a matching stateProvinceRegion
     * @return List a List of Address objects that match the stateProvinceRegion property given as parameter.
     * @param stateProvinceRegion the stateProvinceRegion on which to match the required records.
     */
    public List<Address> listAddressByStateProvinceRegion(String stateProvinceRegion);

    /**
     * Returns a <code>List</code> of Address objects that have a matching postCode
     * @return List a List of Address objects that match the postCode property given as parameter.
     * @param postCode the postCode on which to match the required records.
     */
    public List<Address> listAddressByPostCode(String postCode);

    /**
     * Returns a <code>List</code> of Address objects that have a matching country
     * @return List a List of Address objects that match the country property given as parameter.
     * @param country the country on which to match the required records.
     */
    public List<Address> listAddressByCountry(Long country);

    
    /**
     * Load existing Address objects from the database that have a createdByID column
     * that matches the userId parameter.
     * @return List a List of Address objects that match the userId parameter.
     */
    public List<Address> listAddressByCreatedById(Long userId);
    
    
    /**
     * Load all existing AddressHistory objects for a particular Address.
     * The <code>List</code> of AddressHistory objects contains all of the changes that have been made to the
     * Address object identified by the address parameter'
     * @return List a List of AddressHistory objects.
     */
    public List<AddressHistory> listAddressHistory(Long address) throws Exception;
    
        
    
    /**
     * Creates a new entry in the ADDRESS table containing the parameters passed here.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the database generated Id of the newly created record.
     * @throws AddressSaveException on failure to save.  
     */
    public Long createAndStoreAddress(Address address, Long userID)
        throws AddressSaveException;


    /**
     * Updates an existing entry in the ADDRESS table containing the parameters passed here.
     * Only non-null parameters will be applied to the underlying table so preserving any existing entries.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws AddressLoadException if the existing record cannot be loaded
     * @throws AddressSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public void updateAddress(Address address, Long userID)
        throws AddressSaveException, AddressLoadException, AuthorisationException, InvalidUserIDException;
    
    
    /**
     * Loads a AddressFilter object based on the participantID of the currently logged in user
     * @param userId the userId is checked for authorisation to view the record. It is also the key to load a against the createdByID
     * column of the underlying record. There should only ever be one or zero filter records per Address.
     * @ return a AddressFilter object matching the parameter or a newly constructed, empty object if none can be found
     */
    public AddressFilter loadAddressFilter(Long userId) throws AddressLoadException, AuthorisationException, InvalidUserIDException;


    
    /**
     * Creates a new entry in the ADDRESSFILTER table containing the parameters passed here.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the userId which is also the assigned Id for the newly created record.
     * @throws AddressSaveException on failure to save.  
     */
    public Long createAndStoreAddressFilter(AddressFilter addressFilter, Long userId)
        throws AddressSaveException;
    
    
    /**
     * Updates an existing entry in the ADDRESSFILTER table and associated tables 
     * containing the parameters passed here. If the entry denoted by the userID does not exist then one is created.
     *	
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws AddressSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public Long updateAddressFilter(AddressFilter addressFilter, Long userId)
        throws AddressLoadException, AddressSaveException, AuthorisationException, InvalidUserIDException;
    
}
    
