package org.volunteertech.pledges.address.dao;
import org.hibernate.SessionFactory;
import com.netgrains.security.Authorisation;
import com.netgrains.security.AuthorisationException;
import com.netgrains.security.InvalidUserIDException;
import org.volunteertech.pledges.address.dao.Address;
import org.volunteertech.pledges.address.dao.AddressHistory;
import org.volunteertech.pledges.address.dao.AddressLoadException;
import org.volunteertech.pledges.address.dao.AddressSaveException;

import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.ArrayList;
import java.util.Arrays;
import java.math.BigDecimal;

import org.springframework.stereotype.Repository;
import org.springframework.util.StringUtils;





/**
 * The Address Details
 * This class has been generated by the XSLT processor from the metadata and represents the
 * implementation of the data access object for the Address entity.
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: * $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
@Repository 
public class AddressDaoImpl implements AddressDao
{
    /**
     * The Hibernate SessionFactory instance
     */
    private SessionFactory sessionFactory;
    
    
    

    /**
     * Default Constructor for the Address entity data manager
     */
    public AddressDaoImpl()
    {
    	//Initialise the related Object stores
        
    }
    

    /**
     * Allows Spring to set the container managed SessionFactory instance
     * @param a Spring managed SessionFactory instance
     */    
    public void setSessionFactory(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }


    /**
     * Loads a Address object based on the addressId column
     * @param AddressId the primary key for the underlying record.
     * @ return a Address object matching the parameter or null if none can be found. The
     * method also returns null if the parameter is null.
     */
    public Address load(Long addressId, Long loggedInUserId) throws AuthorisationException, InvalidUserIDException
    {
        if (Authorisation.isAuthorisedView("Address", loggedInUserId, addressId) == false)
        {
        	throw new AuthorisationException();
        }
    
    	Address hibernateEntity = null;
    	
        if (addressId != null)
        {
			hibernateEntity = (Address)this.sessionFactory.getCurrentSession().get(AddressImpl.class, addressId);

            // Load all related singular objects
            
        }
    	
        return hibernateEntity;
    }
    
    
    

    /**
     * Load all existing Address objects from the database. Hibernate will generate the appropriate SQL,
     * send it to the database and populate Address objects with the data.
     * @return List a List of Address objects.
     */
    public List<Address> listAddress()
    {
        @SuppressWarnings("unchecked")
        List<Address> result = this.sessionFactory.getCurrentSession().createQuery("from AddressImpl as address order by address.id asc").list();

        return result;
    }

    
    /**
     * Load existing Address objects from the database that have a addressOne column
     * that matches the addressOne parameter.
     * @return List a List of Address objects that match the addressOne parameter.
     */
    public List<Address> listAddressByAddressOne(String addressOne)
    {
        @SuppressWarnings("unchecked")
        List<Address> result = this.sessionFactory.getCurrentSession().createQuery("from AddressImpl as address where address.addressOne = :addressone order by address.id asc").setParameter("addressone", addressOne).list();

        return result;
    }

    /**
     * Load existing Address objects from the database that have a addressTwo column
     * that matches the addressTwo parameter.
     * @return List a List of Address objects that match the addressTwo parameter.
     */
    public List<Address> listAddressByAddressTwo(String addressTwo)
    {
        @SuppressWarnings("unchecked")
        List<Address> result = this.sessionFactory.getCurrentSession().createQuery("from AddressImpl as address where address.addressTwo = :addresstwo order by address.id asc").setParameter("addresstwo", addressTwo).list();

        return result;
    }

    /**
     * Load existing Address objects from the database that have a city column
     * that matches the city parameter.
     * @return List a List of Address objects that match the city parameter.
     */
    public List<Address> listAddressByCity(String city)
    {
        @SuppressWarnings("unchecked")
        List<Address> result = this.sessionFactory.getCurrentSession().createQuery("from AddressImpl as address where address.city = :city order by address.id asc").setParameter("city", city).list();

        return result;
    }

    /**
     * Load existing Address objects from the database that have a stateProvinceRegion column
     * that matches the stateProvinceRegion parameter.
     * @return List a List of Address objects that match the stateProvinceRegion parameter.
     */
    public List<Address> listAddressByStateProvinceRegion(String stateProvinceRegion)
    {
        @SuppressWarnings("unchecked")
        List<Address> result = this.sessionFactory.getCurrentSession().createQuery("from AddressImpl as address where address.stateProvinceRegion = :stateprovinceregion order by address.id asc").setParameter("stateprovinceregion", stateProvinceRegion).list();

        return result;
    }

    /**
     * Load existing Address objects from the database that have a postCode column
     * that matches the postCode parameter.
     * @return List a List of Address objects that match the postCode parameter.
     */
    public List<Address> listAddressByPostCode(String postCode)
    {
        @SuppressWarnings("unchecked")
        List<Address> result = this.sessionFactory.getCurrentSession().createQuery("from AddressImpl as address where address.postCode = :postcode order by address.id asc").setParameter("postcode", postCode).list();

        return result;
    }

    /**
     * Load existing Address objects from the database that have a country column
     * that matches the country parameter.
     * @return List a List of Address objects that match the country parameter.
     */
    public List<Address> listAddressByCountry(Long country)
    {
        @SuppressWarnings("unchecked")
        List<Address> result = this.sessionFactory.getCurrentSession().createQuery("from AddressImpl as address where address.country = :country order by address.id asc").setParameter("country", country).list();

        return result;
    }

    
    /**
     * Load existing Address objects from the database that have a createdByID column
     * that matches the createdById parameter.
     * @return List a List of Address objects that match the createdById parameter.
     */
    public List<Address> listAddressByCreatedById(Long userId)
    {
        @SuppressWarnings("unchecked")
        List<Address> result = this.sessionFactory.getCurrentSession().createQuery("from AddressImpl as address where address.createdByID = :userId order by address.id asc").setParameter("userId", userId).list();

        return result;
    }
    
    
    /**
     * Load all existing AddressHistory objects for a particular Address from the database.
     * Hibernate will generate the appropriate SQL,
     * send it to the database and populate a List of AddressHistory objects with the data.
     * @return List a List of AddressHistory objects.
     */
    public List<AddressHistory> listAddressHistory(Long address)
    {
        
        @SuppressWarnings("unchecked")
        List<AddressHistory> result = this.sessionFactory.getCurrentSession().createQuery("from AddressHistory as addressHistory where addressHistory.addressId = ? order by addressHistory.id asc").setLong(0, address).list();

        return result;
    }
    
    
    
    /**
     * Creates a new entry in the ADDRESS table containing the parameters passed here.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the database generated Id of the newly created record.
     * @throws AddressSaveException on failure to save.  
     */
    public Long createAndStoreAddress(Address address, Long userId)
    {
    	Long returnValue = new Long(0);

        address.setCreatedByID(userId);
        address.setUpdatedByID(userId);
        address.setDateCreated(new Date());
        address.setDateUpdated(new Date());
        
        this.sessionFactory.getCurrentSession().save(address);
            
        returnValue = address.getId();
		
		return returnValue;
    }


    /**
     * Updates an existing entry in the ADDRESS table containing the parameters passed here.
     * Only non-null parameters will be applied to the underlying table so preserving any existing entries.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @param the address the Address object to update in the database.
     * @param userId the userId of the currently logged in user. 
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userId passed as parameter is not valid
     */
    public void updateAddress(Address address, Long userId) throws AuthorisationException, InvalidUserIDException
    {
        if (Authorisation.isAuthorisedUpdate("Address", userId, address.getId()) == false)
        {
        	throw new AuthorisationException();
        }
    	
        address.setUpdatedByID(userId);
        address.setDateUpdated(new Date());
        this.sessionFactory.getCurrentSession().update(address);
    }
    
    
    /**
     * Loads a AddressFilter object based on the participantID of the currently logged in user
     * @param userID the userID is checked for authorisation to view the record. It is also the key to load a against the createdByID
     * column of the underlying record. There should only ever be one or zero filter records per Address.
     * @ return a AddressFilter object matching the parameter or a newly constructed, empty object if none can be found
     */
    public AddressFilter loadAddressFilter(Long userID) throws AddressLoadException, AuthorisationException, InvalidUserIDException
    {
    	AddressFilter hibernateEntity = null;
    	
        /*if (Authorisation.isAuthorisedView("Address", userID, ADDRESSID) == false)
        {
        	throw new AuthorisationException();
        }*/
    	

        if (userID != null)
        {
        	
        	try
        	{
				hibernateEntity = (AddressFilter)this.sessionFactory.getCurrentSession().load(AddressFilter.class, userID);
        	}
			catch (Exception ex)
			{
			     throw new AddressLoadException("AddressEntityDataManager::loadAddressFilter", ex);
			}		
    		
            // Load all related singular objects
            
        }
    	
        return hibernateEntity;
    }
    
    /**
     * Creates a new entry in the ADDRESSFILTER table containing the parameters passed here.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the userID which is also the assigned Id for the newly created record.
     * @throws AddressSaveException on failure to save.  
     */
    public Long createAndStoreAddressFilter(AddressFilter addressFilter,  Long userId)
        throws AddressSaveException
    {
    	Long returnValue = new Long(0);
        

		try
		{
            addressFilter.setId(userId);
            addressFilter.setCreatedByID(userId);
            addressFilter.setUpdatedByID(userId);
            addressFilter.setDateCreated(new Date());
            addressFilter.setDateUpdated(new Date());

            this.sessionFactory.getCurrentSession().save(addressFilter);
            
            returnValue = addressFilter.getId();
		}
		catch (Exception ex)
		{
		     throw new AddressSaveException("AddressEntityDataManager::createAndStoreAddressFilter", ex);
		}		
		
		return returnValue;
    }
    
    
    /**
     * Updates an existing entry in the ADDRESSFILTER table and associated tables 
     * containing the parameters passed here. If the entry denoted by the userID does not exist then one is created.
     *	
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws AddressSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public Long updateAddressFilter(AddressFilter addressFilter, Long userId)
        throws AddressLoadException, AddressSaveException, AuthorisationException, InvalidUserIDException
    {
    	Long returnValue = new Long(0);
    	
        //if (Authorisation.isAuthorisedUpdate("Address", userID, ADDRESSID) == false)
        //{
        //	throw new AuthorisationException();
        //}
    	
		try
		{
			addressFilter.setId(userId);
            addressFilter.setUpdatedByID(userId);
            addressFilter.setDateUpdated(new Date());
            this.sessionFactory.getCurrentSession().update(addressFilter);
            returnValue = addressFilter.getId();
        }
		catch (Exception ex)
		{
		     throw new AddressSaveException("AddressDaoImpl::updateAddressFilter, userId: " + userId, ex);
		}	
		
		return returnValue;	
        
    }
    
	
    
    /**
     * Converts a Comma Seperated Volume (delimited by ",") to a <code>List<code/> of type <code>String<code/>
     */
	private static List<String> convertCommaDelimitedStringToList(String delimitedString) {

		List<String> result = new ArrayList<String>();

		if (!StringUtils.isEmpty(delimitedString)) {
			result = Arrays.asList(StringUtils.delimitedListToStringArray(delimitedString, ","));
		}
		return result;

	}

    /**
     * Converts a List of type String to a Comma Seperated Volume (delimited by ",") 
     */
	private String convertListToCommaDelimitedString(List<String> list) {

		String result = "";
		if (list != null) {
			result = StringUtils.arrayToCommaDelimitedString(list.toArray());
		}
		return result;

	}

    /**
     * Cleans up any Collection Objects created by the Class instance
     */
    protected void finalize() throws Throwable
    {
        super.finalize();
        
    }    
    
}
    
