package org.volunteertech.pledges.address.dao;
import org.hibernate.SessionFactory;
import com.netgrains.security.AuthorisationException;
import com.netgrains.security.InvalidUserIDException;
import org.volunteertech.pledges.address.dao.Address;
import org.volunteertech.pledges.address.dao.AddressHistory;
import org.volunteertech.pledges.address.dao.AddressLoadException;
import org.volunteertech.pledges.address.dao.AddressSaveException;
import java.util.List;
import java.util.Set;
import java.util.Date;
import java.math.BigDecimal;




/**
 * The Address Details
 * This Interface has been generated by the XSLT processor from the meta data and represents the
 * interface of the data access object(DAO) for the Address entity.
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: * $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
public interface AddressDao
{

    /**
     * Allows Spring to set the container managed SessionFactory instance
     * @param a Spring managed SessionFactory instance
     */    
    public void setSessionFactory(SessionFactory sessionFactory);


    /**
     * Loads a Address object based on the addressId column
     * @param addressId the primary key for the underlying record.
     * @ return a Address object matching the parameter or null if none can be found. The
     * method also returns null if the parameter is null.
     */
    public Address load(Long addressId, Long loggedInUserId) throws AuthorisationException, InvalidUserIDException;
    

    /**
     * Load all existing Address objects from the database. Hibernate will generate the appropriate SQL,
     * send it to the database and populate a List of Address objects with the data.
     * @return List a List of Address objects.
     */
    public List<Address> listAddress();
    
    
    /**
     * Load existing Address objects from the database that have a addressOne column
     * that matches the addressOne parameter.
     * @return List a List of Address objects that match the addressOne parameter.
     */
    public List<Address> listAddressByAddressOne(String addressOne);

    /**
     * Load existing Address objects from the database that have a addressTwo column
     * that matches the addressTwo parameter.
     * @return List a List of Address objects that match the addressTwo parameter.
     */
    public List<Address> listAddressByAddressTwo(String addressTwo);

    /**
     * Load existing Address objects from the database that have a city column
     * that matches the city parameter.
     * @return List a List of Address objects that match the city parameter.
     */
    public List<Address> listAddressByCity(String city);

    /**
     * Load existing Address objects from the database that have a stateProvinceRegion column
     * that matches the stateProvinceRegion parameter.
     * @return List a List of Address objects that match the stateProvinceRegion parameter.
     */
    public List<Address> listAddressByStateProvinceRegion(String stateProvinceRegion);

    /**
     * Load existing Address objects from the database that have a postCode column
     * that matches the postCode parameter.
     * @return List a List of Address objects that match the postCode parameter.
     */
    public List<Address> listAddressByPostCode(String postCode);

    /**
     * Load existing Address objects from the database that have a country column
     * that matches the country parameter.
     * @return List a List of Address objects that match the country parameter.
     */
    public List<Address> listAddressByCountry(Long country);

    
    /**
     * Load existing Address objects from the database that have a createdByID column
     * that matches the userId parameter.
     * @return List a List of Address objects that match the userId parameter.
     */
    public List<Address> listAddressByCreatedById(Long userId);
    
    
    /**
     * Load all existing AddressHistory objects for a particular Address from the database.
     * Hibernate will generate the appropriate SQL,
     * send it to the database and populate AddressHistory objects with the data.
     * @return List a List of AddressHistory objects.
     */
    public List<AddressHistory> listAddressHistory(Long address);
    
    
    
    
    /**
     * Creates a new entry in the ADDRESS table containing the parameters passed here.
     *
     * @param userID the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the database generated Id of the newly created record.
     */
    public Long createAndStoreAddress(Address address, Long userId);


    /**
     * Updates an existing entry in the ADDRESS table containing the parameters passed here.
     * Only non-null parameters will be applied to the underlying table so preserving any existing entries.
     * @param the address the Address object to update in the database.
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     */
    public void updateAddress(Address address, Long userId) throws AuthorisationException, InvalidUserIDException;
    
    
    /**
     * Loads a AddressFilter object based on the participantID of the currently logged in user
     * @param userID the userID is checked for authorisation to view the record. It is also the key to load a against the createdByID
     * column of the underlying record. There should only ever be one or zero filter records per Address.
     * @ return a AddressFilter object matching the parameter or a newly constructed, empty object if none can be found
     */
    public AddressFilter loadAddressFilter(Long userID) throws AddressLoadException, AuthorisationException, InvalidUserIDException;


    
    /**
     * Creates a new entry in the ADDRESSFILTER table containing the parameters passed here.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the userId which is also the assigned Id for the newly created record.
     * @throws AddressSaveException on failure to save.  
     */
    public Long createAndStoreAddressFilter(AddressFilter addressFilter, Long userId)
        throws AddressSaveException;
    
    
    /**
     * Updates an existing entry in the ADDRESSFILTER table and associated tables 
     * containing the parameters passed here. If the entry denoted by the userID does not exist then one is created.
     *	
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws AddressSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public Long updateAddressFilter(AddressFilter addressFilter, Long userId)
        throws AddressLoadException, AddressSaveException, AuthorisationException, InvalidUserIDException;
    
	
}
    
