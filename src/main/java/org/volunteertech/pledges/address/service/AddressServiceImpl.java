package org.volunteertech.pledges.address.service;
import com.netgrains.security.Authorisation;
import com.netgrains.security.AuthorisationException;
import com.netgrains.security.InvalidUserIDException;
import org.volunteertech.pledges.address.dao.Address;
import org.volunteertech.pledges.address.business.AddressBo;
import org.volunteertech.pledges.address.dao.AddressFilter;
import org.volunteertech.pledges.address.dao.AddressHistory;
import org.volunteertech.pledges.address.dao.AddressLoadException;
import org.volunteertech.pledges.address.dao.AddressSaveException;

import java.util.Date;
import java.util.List;
import java.util.Set;
import java.math.BigDecimal;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.Locale;

import org.volunteertech.pledges.main.constants.Constants;
import org.springframework.beans.factory.annotation.Autowired;

import org.volunteertech.pledges.reference.service.ReferenceService;
  
import org.volunteertech.pledges.localisation.service.MessageResourceService;
  



/**
 * The Address Details
 * This Class has been generated by the XSLT processor from the meta data and represents the
 * implementation of the Service  Layer Object for the Address entity. A Business Object
 * is provided in order to provide a seperation from the Data Access implementation. 
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: * $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
public class AddressServiceImpl implements AddressService
{
	/**
	 * The Business Object
	 */
	AddressBo  addressBo;
	
	/**
	 * Reference service for lookups of drop down contents
	 */
    ReferenceService referenceService;	  
	  
	/**
	 * The message resource service that allows access to locale specific messages
	 */
    MessageResourceService messageResourceService;	  
	  
    
    /**
     * Default Constructor for the Address Business Object.
     */
    public AddressServiceImpl()
    {
    	//Initialise the related Object stores
        
    }
    
	
	/**
	 * Sets the reference Service to perform a user roles lookup
	 */
	public void setReferenceService(ReferenceService referenceService){
		this.referenceService = referenceService;
	}
	
	/**
	 * Returns a reference to reference Service.
	 */
	public ReferenceService getReferenceService(){
		return this.referenceService;
	}	
	  
	/**
	 * Sets the message resource service to perform localization lookups
	 */
	public void setMessageResourceService(MessageResourceService messageResourceService){
		this.messageResourceService = messageResourceService;
	}
	
	/**
	 * Returns a reference to the message resource service.
	 */
	public MessageResourceService getMessageResourceService(){
		return this.messageResourceService;
	}	
      
    
    /**
     * Sets the required Business Object (BO)
     * @param addressBo the addressBo used to access the address entity
     * and it's associations.
     */
    public void setAddressBo(AddressBo addressBo){
    	this.addressBo = addressBo;
    }

    /**
     * Returns the required Business Object (BO)
     * @return the AddressBO used to access the address entity
     * and it's associations.     
     */
    public AddressBo getAddressBo(){
    	return this.addressBo;
    }

    /**
     * Loads a Address object based on the ADDRESSID column
     * @param ADDRESSID the primary key for the underlying record.
     * @param userID the userID is checked for authorisation to view the record
     * @ return a Address object matching the parameter or null if none can be found. The
     * method also returns null if the parameter is null.
     */
    public Address load(Long addressId, Long loggedInUserId) throws AddressLoadException, AuthorisationException, InvalidUserIDException
    {
    	Address address = null;
    	
        if (Authorisation.isAuthorisedView("Address", loggedInUserId, addressId) == false)
        {
        	throw new AuthorisationException();
        }
    	

        if (addressId != null)
        {
        	try
        	{
				address = (Address)this.getAddressBo().load(addressId, loggedInUserId);
        	}
			catch (Exception ex)
			{
			     throw new AddressLoadException("AddressServiceImpl::load(?, ?)", ex);
			}		
    		
            // Load all related singular objects
            
        }
    	
        return address;
    }
    
    


    /**
     * Load all existing Address objects. 
     * @return List a List of Address objects.
     */
    public List<Address> listAddress()
    {
        List<Address> result = this.getAddressBo().listAddress();

        return result;
    }
    
    
    /**
     * Returns a <code>List</code> of Address objects that have a matching addressOne
     * @return List a List of Address objects that match the addressOne property given as parameter.
     * @param addressOne the addressOne on which to match the required records.
     */
    public List<Address> listAddressByAddressOne(String addressOne)
    {
        List<Address> result = this.getAddressBo().listAddressByAddressOne(addressOne);

        return result;
    }

    /**
     * Returns a <code>List</code> of Address objects that have a matching addressTwo
     * @return List a List of Address objects that match the addressTwo property given as parameter.
     * @param addressTwo the addressTwo on which to match the required records.
     */
    public List<Address> listAddressByAddressTwo(String addressTwo)
    {
        List<Address> result = this.getAddressBo().listAddressByAddressTwo(addressTwo);

        return result;
    }

    /**
     * Returns a <code>List</code> of Address objects that have a matching city
     * @return List a List of Address objects that match the city property given as parameter.
     * @param city the city on which to match the required records.
     */
    public List<Address> listAddressByCity(String city)
    {
        List<Address> result = this.getAddressBo().listAddressByCity(city);

        return result;
    }

    /**
     * Returns a <code>List</code> of Address objects that have a matching stateProvinceRegion
     * @return List a List of Address objects that match the stateProvinceRegion property given as parameter.
     * @param stateProvinceRegion the stateProvinceRegion on which to match the required records.
     */
    public List<Address> listAddressByStateProvinceRegion(String stateProvinceRegion)
    {
        List<Address> result = this.getAddressBo().listAddressByStateProvinceRegion(stateProvinceRegion);

        return result;
    }

    /**
     * Returns a <code>List</code> of Address objects that have a matching postCode
     * @return List a List of Address objects that match the postCode property given as parameter.
     * @param postCode the postCode on which to match the required records.
     */
    public List<Address> listAddressByPostCode(String postCode)
    {
        List<Address> result = this.getAddressBo().listAddressByPostCode(postCode);

        return result;
    }

    /**
     * Returns a <code>List</code> of Address objects that have a matching country
     * @return List a List of Address objects that match the country property given as parameter.
     * @param country the country on which to match the required records.
     */
    public List<Address> listAddressByCountry(Long country)
    {
        List<Address> result = this.getAddressBo().listAddressByCountry(country);

        return result;
    }

    
    /**
     * Load existing Address objects from the database that have a createdByID column
     * that matches the userId parameter.
     * @return List a List of Address objects that match the userId parameter.
     */
    public List<Address> listAddressByCreatedById(Long userId)
    {
        List<Address> result = this.getAddressBo().listAddress();

        return result;
    }
    
    
    /**
     * Load all existing AddressHistory objects for a particular Address.
     * The <code>List</code> of AddressHistory objects contains all of the changes that have been made to the
     * Address object identified by the address parameter'
     * @return List a List of AddressHistory objects.
     */
    public List<AddressHistory> listAddressHistory(Long address) throws Exception
    {
        List<AddressHistory> result = this.getAddressBo().listAddressHistory(address);

        return result;
    }
    
    
    
    /**
     * Either updates an existing entry in the ADDRESS table or adds a new entry if one does not exist.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws AddressLoadException if the existing record cannot be loaded
     * @throws AddressSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public void storeAddress(Address address, Long userId)
        throws AddressSaveException, AddressLoadException, AuthorisationException, InvalidUserIDException
    {
    	
        if (Authorisation.isAuthorisedUpdate("Address", userId, address.getId()) == false)
        {
        	throw new AuthorisationException();
        }
    	
		try
		{
			if(address.isNew()){
		    	this.getAddressBo().createAndStoreAddress(address, userId);
			}else{
		    	this.getAddressBo().updateAddress(address, userId);
			}
        }
		catch (Exception ex)
		{
		     throw new AddressSaveException("AddressEntityDataManager::updateAddress, AddressID: " + address.getId(), ex);
		}		
        
    }
    
    
    /**
     * Loads a AddressFilter object based on the participantID of the currently logged in user
     * @param userID the userID is checked for authorisation to view the record. It is also the key to load a against the createdByID
     * column of the underlying record. There should only ever be one or zero filter records per Address.
     * @ return a AddressFilter object matching the parameter or a newly constructed, empty object if none can be found
     */
    public AddressFilter loadAddressFilter(Long userID) throws AddressLoadException, AuthorisationException, InvalidUserIDException
    {
    	AddressFilter addressFilter = null;
    	
        /*if (Authorisation.isAuthorisedView("Address", userID, ADDRESSID) == false)
        {
        	throw new AuthorisationException();
        }*/
    	

        if (userID != null)
        {
        	
        	try
        	{
				addressFilter = (AddressFilter)this.getAddressBo().loadAddressFilter(userID);
        	}
			catch (Exception ex)
			{
			     throw new AddressLoadException("AddressEntityDataManager::loadAddressFilter", ex);
			}		
    		
            // Load all related singular objects
            
        }
    	
        return addressFilter;
    }
    
    /**
     * Creates a new entry in the ADDRESSFILTER table containing the parameters passed here.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the userId which is also the assigned Id for the newly created record.
     * @throws AddressSaveException on failure to save.  
     */
    public Long createAndStoreAddressFilter(AddressFilter addressFilter, Long userId)
        throws AddressSaveException
    {
    	Long returnValue = new Long(0);
        

		try
		{
            addressFilter.setId(userId);
			addressFilter.setCreatedByID(userId);
            addressFilter.setUpdatedByID(userId);
            addressFilter.setDateCreated(new Date());
            addressFilter.setDateUpdated(new Date());

            returnValue = this.getAddressBo().createAndStoreAddressFilter(addressFilter, userId);
		}
		catch (Exception ex)
		{
		     throw new AddressSaveException("AddressServiceImpl::createAndStoreAddressFilter", ex);
		}		
		
		return returnValue;
    }
    
    
    /**
     * Updates an existing entry in the ADDRESSFILTER table and associated tables 
     * containing the parameters passed here. If the entry denoted by the userID does not exist then one is created.
     *	
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws AddressSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public Long updateAddressFilter(AddressFilter addressFilter, Long userId)
        throws AddressLoadException, AddressSaveException, AuthorisationException, InvalidUserIDException
    {
    	Long returnValue = new Long(0);
    	
        //if (Authorisation.isAuthorisedUpdate("Address", userId, ADDRESSID) == false)
        //{
        //	throw new AuthorisationException();
        //}
    	
		try
		{
        
			addressFilter.setUpdatedByID(userId);
            addressFilter.setDateUpdated(new Date());
            returnValue = this.getAddressBo().updateAddressFilter(addressFilter, userId);
        }
		catch (Exception ex)
		{
		     throw new AddressSaveException("AddressServiceImpl::updateAddressFilter, userId: " + userId, ex);
		}	
		
		return returnValue;	
        
    }

	/**
	 * Translates the referenceId type properties into the locale specific text for display on the front-end.
	 * @param address the dto object to be updated with the locale specific translations
	 * @param locale the Locale to be displayed
	 */    
    public Address translateReferenceValues(Address address, Locale locale){
    	
			Long countryReferenceId =  address.getCountry();
			String countryLocaleReference = null;
			if (countryReferenceId == null || countryReferenceId == -1){
				countryLocaleReference = this.messageResourceService.getMessage("global.select.noselection", new String[0], locale);
			}else{
				countryLocaleReference = this.messageResourceService.getMessage(countryReferenceId, new String[0], locale);
			}
			
			address.setCountryReferenceTranslation(countryLocaleReference);

    	return address;
    }
    
	/**
	 * Translates the referenceId type properties into the locale specific text for display on the front-end.
	 * @param addressList the dto object to be updated with the locale specific translations
	 * @param locale the Locale to be displayed
	 */    
    public List<Address> translateReferenceValues(List<Address> addressList, Locale locale){
    	for (Address address :  addressList){
    		address = translateReferenceValues(address, locale);
    	}
    	
    	return addressList;
    }
    
	
    
    /**
     * Cleans up any Collection Objects created by the Class instance
     */
    protected void finalize() throws Throwable
    {
        super.finalize();
        
    }    
    
    
}
    
