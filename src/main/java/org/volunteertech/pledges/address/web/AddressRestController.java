package org.volunteertech.pledges.address.web;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.SortedMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import java.util.Locale;

import org.volunteertech.pledges.address.dao.Address;
import org.volunteertech.pledges.address.dao.AddressImpl;
import org.volunteertech.pledges.address.service.AddressService;
import org.volunteertech.pledges.address.dao.AddressLoadException;
import org.volunteertech.pledges.address.dao.AddressSaveException;
import org.volunteertech.pledges.address.validator.AddressFormValidator;
import org.volunteertech.pledges.main.web.BaseController;
import org.volunteertech.pledges.users.dao.ApplicationUserDetails;
import org.volunteertech.pledges.users.dao.ApplicationUserDetailsLoadException;
import org.volunteertech.pledges.users.security.SecurityUser;
import org.volunteertech.pledges.users.service.ApplicationUserDetailsService;

import com.netgrains.security.AuthorisationException;
import com.netgrains.security.InvalidUserIDException;

import org.volunteertech.pledges.reference.ReferenceStore;

/**
 * The Address Details The Spring AddressRestController to handle restful web
 * service requests. This class has been generated by the XSLT processor from
 * the metadata and represents the the Spring AddressRestController to handle
 * restful web service requests.
 * <P>
 * It is essential that methods added to this class are given JavaDoc comments
 * to allow documentation to be generated. For a description of JavaDoc refer to
 * The JavaDoc documentation. A link is provided below.
 * <P>
 * 
 * @author Michael O'Connor
 * @version $Revision$ Date: $Date$
 * @see <a href=
 *      "http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">
 *      >JavaDoc Documentation</a> Change Log ---------- $Log$
 *
 */
@RestController
public class AddressRestController extends BaseController {
	final Logger logger = LoggerFactory.getLogger(AddressRestController.class);

	@Autowired
	private ReferenceStore referenceStore;

	@Autowired
	private AddressService addressService;

	@Autowired
	private ApplicationUserDetailsService applicationUserDetailsService;

	/**
	 * Returns a JSON representation of all Address records
	 * 
	 * @return the JSON representation of all Address.
	 */
	@RequestMapping(value = "/restful/address/list", method = RequestMethod.GET)
	@ResponseBody
	public List<Address> showAllAddress(Authentication authentication, Locale locale) {
		logger.info("Inside restful getAddress method...");
		List<Address> addressList = null;
		SecurityUser user = (SecurityUser) authentication.getPrincipal();
		Long userId = user.getApplicationUser().getId();

		try {
			// TODO: Needs exception handling policy
			addressList = addressService.listAddress();
			addressList = addressService.translateReferenceValues(addressList, locale);
		} catch (Exception ex) {
			logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}

		return addressList;
	}

	/**
	 * Returns a JSON representation of the Address record that matches the id
	 * parameter
	 * 
	 * @param id
	 *            the primary key by which to search
	 * @return the Address with the relevant primary key.
	 */
	@RequestMapping(value = "/restful/address", method = RequestMethod.GET)
	@ResponseBody
	public Address getAddress(Authentication authentication, @RequestParam(value = "id") String id) {
		logger.info("Inside restful getAddress method...");
		Address address = null;
		SecurityUser user = (SecurityUser) authentication.getPrincipal();
		Long userId = user.getApplicationUser().getId();

		try {
			// TODO: Needs exception handling policy
			address = addressService.load(Long.valueOf(id), userId);
		} catch (Exception ex) {
			logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}

		return address;
	}

	/**
	 * Returns a JSON representation of the Address record that matches the id
	 * parameter
	 * 
	 * @param id
	 *            the primary key by which to search
	 * @return the Address with the relevant primary key.
	 */
	@RequestMapping(value = "/restful/currentUserAddress", method = RequestMethod.GET)
	@ResponseBody
	public Address getApplicationUserAddress(Authentication authentication) {
		logger.info("Inside restful getAddress method...");
		Address address = new AddressImpl();
		SecurityUser user = (SecurityUser) authentication.getPrincipal();

		// probably a better way of getting the details fresh from teh DB. its JPA i dont fully know it.
		// ApplicationUserDetails ud = user.getApplicationUser().getApplicationUserDetails();

		ApplicationUserDetails ud;
		try {
			ud = applicationUserDetailsService.load(user.getApplicationUser().getApplicationUserDetails().getId(),user.getApplicationUser().getId());
			address.setAddressOne(ud.getAddressOne());
			address.setAddressTwo(ud.getAddressTwo());
			address.setCity(ud.getCity());
			
			address.setCountry(ud.getCountry());
			address.setPostCode(ud.getPostCode());
			address.setStateProvinceRegion(ud.getStateProvinceRegion());
		} catch (ApplicationUserDetailsLoadException | AuthorisationException | InvalidUserIDException e) {
			e.printStackTrace();
		}

		return address;
	}

	@RequestMapping(value = "/restful/address/update", method = RequestMethod.POST)
	@ResponseBody
	public List<Address> updateAddress(Authentication authentication, @RequestBody Address address) {
		logger.debug("In the updateAddress controller and got Id: " + address.getId());

		SecurityUser user = (SecurityUser) authentication.getPrincipal();
		Long userId = user.getApplicationUser().getId();

		try {
			// TODO needs security update
			addressService.storeAddress(address, userId);
		} catch (Exception ex) {
			// TODO needs custom exception handling
			logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}
		List<Address> addressList = addressService.listAddress();

		return addressList;
	}

	@RequestMapping(value = "/restful/address/new", method = RequestMethod.POST)
	@ResponseBody
	public List<Address> addAddress(Authentication authentication, @RequestBody Address address) {
		logger.debug("In the addAddress controller and got Id: " + address.getId());
		SecurityUser user = (SecurityUser) authentication.getPrincipal();
		Long userId = user.getApplicationUser().getId();

		try {
			// TODO needs security update
			addressService.storeAddress(address, userId);
		} catch (Exception ex) {
			// TODO needs custom exception handling
			logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}
		List<Address> addressList = addressService.listAddress();

		return addressList;
	}

}
