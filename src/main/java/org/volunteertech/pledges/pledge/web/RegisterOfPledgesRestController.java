package org.volunteertech.pledges.pledge.web;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.SortedMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import java.util.Locale;

import org.volunteertech.pledges.pledge.dao.RegisterOfPledges;
import org.volunteertech.pledges.pledge.dao.RegisterOfPledgesImpl;
import org.volunteertech.pledges.pledge.service.RegisterOfPledgesService;
import org.volunteertech.pledges.pledge.dao.RegisterOfPledgesLoadException;
import org.volunteertech.pledges.pledge.dao.RegisterOfPledgesSaveException;
import org.volunteertech.pledges.pledge.validator.RegisterOfPledgesFormValidator;
import org.volunteertech.pledges.main.web.BaseController;
import org.volunteertech.pledges.users.security.SecurityUser;

import org.volunteertech.pledges.reference.ReferenceStore;


import org.volunteertech.pledges.users.dao.ApplicationUserDetails;
import org.volunteertech.pledges.users.dao.ApplicationUserDetailsImpl;

import org.volunteertech.pledges.accommodationpledge.dao.AccommodationPledge;
import org.volunteertech.pledges.accommodationpledge.dao.AccommodationPledgeImpl;

import org.volunteertech.pledges.servicepledge.dao.ServicePledge;
import org.volunteertech.pledges.servicepledge.dao.ServicePledgeImpl;

import org.volunteertech.pledges.goodspledge.dao.GoodsPledge;
import org.volunteertech.pledges.goodspledge.dao.GoodsPledgeImpl;




/**
 * The register of pledges screen is used to add/edit new/existing pledges
 * The Spring RegisterOfPledgesRestController to handle restful web service requests.
 * This class has been generated by the XSLT processor from the metadata and represents the
 * the Spring RegisterOfPledgesRestController to handle restful web service requests.
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
@RestController
public class RegisterOfPledgesRestController extends BaseController
{
	final Logger logger = LoggerFactory.getLogger(RegisterOfPledgesRestController.class);
	
	@Autowired
	private ReferenceStore referenceStore;
	
	@Autowired
	private RegisterOfPledgesService registerOfPledgesService;
	
	


	/**
	 * Returns a JSON representation of all RegisterOfPledges records
	 * @return the JSON representation of all RegisterOfPledges.
	 */
	@RequestMapping(value = "/restful/registerofpledges/list", method = RequestMethod.GET)
	@ResponseBody
    public List<RegisterOfPledges> showAllRegisterOfPledges(Authentication authentication, Locale locale) {
		logger.info("Inside restful getRegisterOfPledges method...");
		List <RegisterOfPledges> registerOfPledgesList = null;
		SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();		
		
		try{
			// TODO: Needs exception handling policy
	    	registerOfPledgesList = registerOfPledgesService.listRegisterOfPledges();
	    	registerOfPledgesList = registerOfPledgesService.translateReferenceValues(registerOfPledgesList, locale);
		}
		catch (Exception ex){
			logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}		
		
		
    	return registerOfPledgesList;
    }


	
	/**
	 * Returns a JSON representation of the RegisterOfPledges record that matches the id parameter
	 * @param id the primary key by which to search
	 * @return the RegisterOfPledges with the relevant primary key.
	 */
	@RequestMapping(value = "/restful/registerofpledges", method = RequestMethod.GET)
	@ResponseBody
    public RegisterOfPledges getRegisterOfPledges(Authentication authentication, @RequestParam(value="id") String id) {
		logger.info("Inside restful getRegisterOfPledges method...");
		RegisterOfPledges registerOfPledges = null;
		SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();		
		
		try{
			// TODO: Needs exception handling policy
	    	registerOfPledges = registerOfPledgesService.load(new Long(id), userId);
		}
		catch (Exception ex){
			logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}		
		
		
    	return registerOfPledges;
    }
    
    @RequestMapping(value = "/restful/registerofpledges/update", method = RequestMethod.POST)
    @ResponseBody
    public List<RegisterOfPledges> updateRegisterOfPledges(Authentication authentication, @RequestBody RegisterOfPledges registerOfPledges) {
        logger.debug("In the updateRegisterOfPledges controller and got Id: " + registerOfPledges.getId());

		SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();
        
		try{
			// TODO needs security update
			registerOfPledgesService.storeRegisterOfPledges(registerOfPledges, userId);
		}
		catch (Exception ex){
		// TODO needs custom exception handling
		logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}
    	List<RegisterOfPledges> registerOfPledgesList = registerOfPledgesService.listRegisterOfPledges();
        
        return registerOfPledgesList;
    }
    
    
    @RequestMapping(value = "/restful/registerofpledges/new", method = RequestMethod.POST)
    @ResponseBody
    public List<RegisterOfPledges> addRegisterOfPledges(Authentication authentication, @RequestBody RegisterOfPledges registerOfPledges) {
        logger.debug("In the addRegisterOfPledges controller and got Id: " + registerOfPledges.getId());
        SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();

		try{
			// TODO needs security update
			registerOfPledgesService.storeRegisterOfPledges(registerOfPledges, userId);
		}
		catch (Exception ex){
		// TODO needs custom exception handling
		logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}
    	List<RegisterOfPledges> registerOfPledgesList = registerOfPledgesService.listRegisterOfPledges();
        
        return registerOfPledgesList;
    }
    
    
        

    @RequestMapping(value = "/restful/registerofpledges/applicationuserdetails/update", method = RequestMethod.POST)
    @ResponseBody
    public List<ApplicationUserDetails> updateApplicationUserDetails(Authentication authentication, @RequestBody ApplicationUserDetailsImpl applicationUserDetails, Locale locale) {
        logger.debug("In the updateApplicationUserDetails controller and got Id: " + applicationUserDetails.getId());
        List<ApplicationUserDetails> applicationUserDetailsList = null;
		SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();        

		try{
			// TODO needs security update and move processing inside the business object
			
			applicationUserDetailsList = registerOfPledgesService.getRegisterOfPledgesBo().getRegisterOfPledgesDao().updateApplicationUserDetails(applicationUserDetails.getParentObjectId(), applicationUserDetails, userId);
			applicationUserDetailsList = this.registerOfPledgesService.translateApplicationUserDetailsReferenceValues(applicationUserDetailsList, locale);
	    }
		catch (Exception ex){
		// TODO needs custom exception handling
		logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}
        
        return applicationUserDetailsList;
    }

	/**
	 * Returns a JSON representation of the <code>List</code> of AccommodationPledge records that
	 * are linked to the RegisterOfPledges identified by the id parameter.
	 * @param id the primary key of the RegisterOfPledges by which to search for the associated AccommodationPledge records.
	 * @return A <code>List</code>of RegisterOfPledges records that are associated with the RegisterOfPledges
	 * identified by the id parameter.
	 */
	@RequestMapping(value = "/restful/registerofpledges/accommodationpledges/list", method = RequestMethod.GET)
    public List<AccommodationPledge> getAccommodationPledges(Authentication authentication, @RequestParam(value="id") String registerOfPledgesId, Locale locale) {
		logger.info("Inside restful getAccommodationPledges method...");
		List<AccommodationPledge> accommodationPledgeList = null;
		SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();
		
		try{
			// TODO: Needs exception handling policy and calls moved inside the business object.
	    	accommodationPledgeList = registerOfPledgesService.getAccommodationPledges(new Long(registerOfPledgesId), userId);
	    	accommodationPledgeList = this.registerOfPledgesService.translateAccommodationPledgeReferenceValues(accommodationPledgeList, locale);
			
		}
		catch (Exception ex){
			logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}		
		
		
    	return accommodationPledgeList;
    }
    
    @RequestMapping(value = "/restful/registerofpledges/accommodationpledges/new", method = RequestMethod.POST)
    @ResponseBody
    public List<AccommodationPledge> addAccommodationPledges(Authentication authentication, @RequestBody AccommodationPledgeImpl accommodationPledge, Locale locale) {
        logger.debug("In the addAccommodationPledges controller and got Id: " + accommodationPledge.getId());
		List<AccommodationPledge> accommodationPledgeList = null;
		SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();
        		
		try{
			// TODO needs security update and move processing inside the business object
			accommodationPledgeList = registerOfPledgesService.addAccommodationPledgeToAccommodationPledges(accommodationPledge, accommodationPledge.getParentObjectId(), userId);
			accommodationPledgeList = this.registerOfPledgesService.translateAccommodationPledgeReferenceValues(accommodationPledgeList, locale);
		}
		catch (Exception ex){
		// TODO needs custom exception handling
		logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}
        return accommodationPledgeList;
    }
    

    @RequestMapping(value = "/restful/registerofpledges/accommodationpledges/update", method = RequestMethod.POST)
    @ResponseBody
    public List<AccommodationPledge> updateAccommodationPledges(Authentication authentication, @RequestBody AccommodationPledgeImpl accommodationPledge, Locale locale) {
        logger.debug("In the updateAccommodationPledges controller and got Id: " + accommodationPledge.getId());
        List<AccommodationPledge> accommodationPledgeList = null;
		SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();        

		try{
			// TODO needs security update and move processing inside the business object
			
			accommodationPledgeList = registerOfPledgesService.getRegisterOfPledgesBo().getRegisterOfPledgesDao().updateAccommodationPledges(accommodationPledge.getParentObjectId(), accommodationPledge, userId);
			accommodationPledgeList = this.registerOfPledgesService.translateAccommodationPledgeReferenceValues(accommodationPledgeList, locale);
	    }
		catch (Exception ex){
		// TODO needs custom exception handling
		logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}
        
        return accommodationPledgeList;
    }

	/**
	 * Returns a JSON representation of the <code>List</code> of ServicePledge records that
	 * are linked to the RegisterOfPledges identified by the id parameter.
	 * @param id the primary key of the RegisterOfPledges by which to search for the associated ServicePledge records.
	 * @return A <code>List</code>of RegisterOfPledges records that are associated with the RegisterOfPledges
	 * identified by the id parameter.
	 */
	@RequestMapping(value = "/restful/registerofpledges/servicepledges/list", method = RequestMethod.GET)
    public List<ServicePledge> getServicePledges(Authentication authentication, @RequestParam(value="id") String registerOfPledgesId, Locale locale) {
		logger.info("Inside restful getServicePledges method...");
		List<ServicePledge> servicePledgeList = null;
		SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();
		
		try{
			// TODO: Needs exception handling policy and calls moved inside the business object.
	    	servicePledgeList = registerOfPledgesService.getServicePledges(new Long(registerOfPledgesId), userId);
	    	servicePledgeList = this.registerOfPledgesService.translateServicePledgeReferenceValues(servicePledgeList, locale);
			
		}
		catch (Exception ex){
			logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}		
		
		
    	return servicePledgeList;
    }
    
    @RequestMapping(value = "/restful/registerofpledges/servicepledges/new", method = RequestMethod.POST)
    @ResponseBody
    public List<ServicePledge> addServicePledges(Authentication authentication, @RequestBody ServicePledgeImpl servicePledge, Locale locale) {
        logger.debug("In the addServicePledges controller and got Id: " + servicePledge.getId());
		List<ServicePledge> servicePledgeList = null;
		SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();
        		
		try{
			// TODO needs security update and move processing inside the business object
			servicePledgeList = registerOfPledgesService.addServicePledgeToServicePledges(servicePledge, servicePledge.getParentObjectId(), userId);
			servicePledgeList = this.registerOfPledgesService.translateServicePledgeReferenceValues(servicePledgeList, locale);
		}
		catch (Exception ex){
		// TODO needs custom exception handling
		logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}
        return servicePledgeList;
    }
    

    @RequestMapping(value = "/restful/registerofpledges/servicepledges/update", method = RequestMethod.POST)
    @ResponseBody
    public List<ServicePledge> updateServicePledges(Authentication authentication, @RequestBody ServicePledgeImpl servicePledge, Locale locale) {
        logger.debug("In the updateServicePledges controller and got Id: " + servicePledge.getId());
        List<ServicePledge> servicePledgeList = null;
		SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();        

		try{
			// TODO needs security update and move processing inside the business object
			
			servicePledgeList = registerOfPledgesService.getRegisterOfPledgesBo().getRegisterOfPledgesDao().updateServicePledges(servicePledge.getParentObjectId(), servicePledge, userId);
			servicePledgeList = this.registerOfPledgesService.translateServicePledgeReferenceValues(servicePledgeList, locale);
	    }
		catch (Exception ex){
		// TODO needs custom exception handling
		logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}
        
        return servicePledgeList;
    }

	/**
	 * Returns a JSON representation of the <code>List</code> of GoodsPledge records that
	 * are linked to the RegisterOfPledges identified by the id parameter.
	 * @param id the primary key of the RegisterOfPledges by which to search for the associated GoodsPledge records.
	 * @return A <code>List</code>of RegisterOfPledges records that are associated with the RegisterOfPledges
	 * identified by the id parameter.
	 */
	@RequestMapping(value = "/restful/registerofpledges/goodspledges/list", method = RequestMethod.GET)
    public List<GoodsPledge> getGoodsPledges(Authentication authentication, @RequestParam(value="id") String registerOfPledgesId, Locale locale) {
		logger.info("Inside restful getGoodsPledges method...");
		List<GoodsPledge> goodsPledgeList = null;
		SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();
		
		try{
			// TODO: Needs exception handling policy and calls moved inside the business object.
	    	goodsPledgeList = registerOfPledgesService.getGoodsPledges(new Long(registerOfPledgesId), userId);
	    	goodsPledgeList = this.registerOfPledgesService.translateGoodsPledgeReferenceValues(goodsPledgeList, locale);
			
		}
		catch (Exception ex){
			logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}		
		
		
    	return goodsPledgeList;
    }
    
    @RequestMapping(value = "/restful/registerofpledges/goodspledges/new", method = RequestMethod.POST)
    @ResponseBody
    public List<GoodsPledge> addGoodsPledges(Authentication authentication, @RequestBody GoodsPledgeImpl goodsPledge, Locale locale) {
        logger.debug("In the addGoodsPledges controller and got Id: " + goodsPledge.getId());
		List<GoodsPledge> goodsPledgeList = null;
		SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();
        		
		try{
			// TODO needs security update and move processing inside the business object
			goodsPledgeList = registerOfPledgesService.addGoodsPledgeToGoodsPledges(goodsPledge, goodsPledge.getParentObjectId(), userId);
			goodsPledgeList = this.registerOfPledgesService.translateGoodsPledgeReferenceValues(goodsPledgeList, locale);
		}
		catch (Exception ex){
		// TODO needs custom exception handling
		logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}
        return goodsPledgeList;
    }
    

    @RequestMapping(value = "/restful/registerofpledges/goodspledges/update", method = RequestMethod.POST)
    @ResponseBody
    public List<GoodsPledge> updateGoodsPledges(Authentication authentication, @RequestBody GoodsPledgeImpl goodsPledge, Locale locale) {
        logger.debug("In the updateGoodsPledges controller and got Id: " + goodsPledge.getId());
        List<GoodsPledge> goodsPledgeList = null;
		SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();        

		try{
			// TODO needs security update and move processing inside the business object
			
			goodsPledgeList = registerOfPledgesService.getRegisterOfPledgesBo().getRegisterOfPledgesDao().updateGoodsPledges(goodsPledge.getParentObjectId(), goodsPledge, userId);
			goodsPledgeList = this.registerOfPledgesService.translateGoodsPledgeReferenceValues(goodsPledgeList, locale);
	    }
		catch (Exception ex){
		// TODO needs custom exception handling
		logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}
        
        return goodsPledgeList;
    }

}
