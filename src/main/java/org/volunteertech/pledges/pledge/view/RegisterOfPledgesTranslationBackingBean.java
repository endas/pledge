package org.volunteertech.pledges.pledge.view;

import org.volunteertech.pledges.pledge.dao.RegisterOfPledges;
import java.io.Serializable;


import org.volunteertech.pledges.users.dao.ApplicationUserDetails;

import org.volunteertech.pledges.accommodationpledge.dao.AccommodationPledge;

import org.volunteertech.pledges.servicepledge.dao.ServicePledge;

import org.volunteertech.pledges.goodspledge.dao.GoodsPledge;

import org.volunteertech.pledges.users.dao.ApplicationUserDetails;

import org.volunteertech.pledges.accommodationpledge.dao.AccommodationPledge;

import org.volunteertech.pledges.servicepledge.dao.ServicePledge;

import org.volunteertech.pledges.goodspledge.dao.GoodsPledge;




/**
 * The register of pledges screen is used to add/edit new/existing pledges
 * The RegisterOfPledgesTranslationBacking Bean supports the localisation of the RegisterOfPledges Screen
 * This class has been generated by the XSLT processor from the metadata and represents the
 * DataBase access handler for the RegisterOfPledges entity.
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
public interface RegisterOfPledgesTranslationBackingBean extends RegisterOfPledges{ 

    
    /*
     * Returns the Id for the underlying database table record
     */
	public Long getId();
	
    
    /*
     * Sets the Id. This allows front-end forms to bind the id property
     */
	public void setId(Long id);
	
	
    /*
     * Returns the parentObjectId when this object has been populated via a restful webservice JSON mapping
     */
	public Long getParentObjectId();
	

    /*
     * Sets the parentObjectId. This allows restful web services to bind the parentId property when adding a new record.
     */
	public void setParentObjectId(Long parentObjectId);
	

    

    /**
     * Checks for a newly created entity object
     * @return true if this is a newly created entity object meaning that it has not yet been persisted, otherwise false
     */
	public boolean isNew();
	
    
    
     @Override
     public String toString();
     
}
    
    
    

