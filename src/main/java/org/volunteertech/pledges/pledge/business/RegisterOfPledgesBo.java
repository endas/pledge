package org.volunteertech.pledges.pledge.business;
import com.netgrains.security.AuthorisationException;
import com.netgrains.security.InvalidUserIDException;
import org.volunteertech.pledges.pledge.dao.RegisterOfPledges;
import org.volunteertech.pledges.pledge.dao.RegisterOfPledgesDao;
import org.volunteertech.pledges.pledge.dao.RegisterOfPledgesFilter;
import org.volunteertech.pledges.pledge.dao.RegisterOfPledgesHistory;
import org.volunteertech.pledges.pledge.dao.RegisterOfPledgesLoadException;
import org.volunteertech.pledges.pledge.dao.RegisterOfPledgesSaveException;
import java.util.List;
import java.util.Set;
import java.util.Date;
import java.math.BigDecimal;

import org.volunteertech.pledges.users.business.ApplicationUserDetailsBo;
import org.volunteertech.pledges.users.dao.ApplicationUserDetails;

import org.volunteertech.pledges.accommodationpledge.business.AccommodationPledgeBo;
import org.volunteertech.pledges.accommodationpledge.dao.AccommodationPledge;

import org.volunteertech.pledges.servicepledge.business.ServicePledgeBo;
import org.volunteertech.pledges.servicepledge.dao.ServicePledge;

import org.volunteertech.pledges.goodspledge.business.GoodsPledgeBo;
import org.volunteertech.pledges.goodspledge.dao.GoodsPledge;



/**
 * The register of pledges screen is used to add/edit new/existing pledges
 * This Interface has been generated by the XSLT processor from the meta data and represents the
 * interface of the Business Object(BO) for the RegisterOfPledges entity. A Business Object
 * is provided in order to provide a seperation from the Data Access implementation. 
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: * $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
public interface RegisterOfPledgesBo
{
    
    
    /**
     * Sets the required Data Access Object (DAO)
     * @param registerOfPledgesDao the registerOfPledgesDao used to access the registerOfPledges entity.
     */
    public void setRegisterOfPledgesDao(RegisterOfPledgesDao registerOfPledgesDao);
    

    /**
     * Returns the required Data Access Object (DAO)
     * @return the RegisterOfPledgesDao used to access the registerOfPledges entity.
     */
    public RegisterOfPledgesDao getRegisterOfPledgesDao();
    
    /**
     * Sets the required Business Object (BO) for the applicationUserDetails association to
     * allow access to the underlying business methods.
     * @param applicationUserDetailsBo the ApplicationUserDetailsBo used to
     * access the business methods of the associated ApplicationUserDetails entity.
     */
    public void setApplicationUserDetailsBo(ApplicationUserDetailsBo applicationUserDetailsBo);
    

    /**
     * Returns the required Business Object (BO) to allow access to the underlying ApplicationUserDetails
     * business object that supports the applicationUserDetailsBo property 
     * @return the ApplicationUserDetailsBo used to manipulate the underlying ApplicationUserDetails object.
     */
    public ApplicationUserDetailsBo getApplicationUserDetailsBo();
        

    /**
     * Sets the required Business Object (BO) for the accommodationPledges association to
     * allow access to the underlying business methods.
     * @param accommodationPledgesBo the AccommodationPledgeBo used to
     * access the business methods of the associated AccommodationPledge entity.
     */
    public void setAccommodationPledgesBo(AccommodationPledgeBo accommodationPledgesBo);
    

    /**
     * Returns the required Business Object (BO) to allow access to the underlying AccommodationPledge
     * business object that supports the accommodationPledgesBo property 
     * @return the AccommodationPledgeBo used to manipulate the underlying AccommodationPledge object.
     */
    public AccommodationPledgeBo getAccommodationPledgesBo();
        

    /**
     * Sets the required Business Object (BO) for the servicePledges association to
     * allow access to the underlying business methods.
     * @param servicePledgesBo the ServicePledgeBo used to
     * access the business methods of the associated ServicePledge entity.
     */
    public void setServicePledgesBo(ServicePledgeBo servicePledgesBo);
    

    /**
     * Returns the required Business Object (BO) to allow access to the underlying ServicePledge
     * business object that supports the servicePledgesBo property 
     * @return the ServicePledgeBo used to manipulate the underlying ServicePledge object.
     */
    public ServicePledgeBo getServicePledgesBo();
        

    /**
     * Sets the required Business Object (BO) for the goodsPledges association to
     * allow access to the underlying business methods.
     * @param goodsPledgesBo the GoodsPledgeBo used to
     * access the business methods of the associated GoodsPledge entity.
     */
    public void setGoodsPledgesBo(GoodsPledgeBo goodsPledgesBo);
    

    /**
     * Returns the required Business Object (BO) to allow access to the underlying GoodsPledge
     * business object that supports the goodsPledgesBo property 
     * @return the GoodsPledgeBo used to manipulate the underlying GoodsPledge object.
     */
    public GoodsPledgeBo getGoodsPledgesBo();
        


    
    /**
     * Loads a RegisterOfPledges object based on the REGISTEROFPLEDGESID column
     * @param REGISTEROFPLEDGESID the primary key for the underlying record.
     * @param userID the userID is checked for authorisation to view the record
     * @ return a RegisterOfPledges object matching the parameter or null if none can be found. The
     * method also returns null if the parameter is null.
     */
    public RegisterOfPledges load(Long registerOfPledgesID, Long loggedInUserId) throws RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException;
    
    

    /**
     * Load all existing RegisterOfPledges objects. 
     * @return List a List of RegisterOfPledges objects.
     */
    public List<RegisterOfPledges> listRegisterOfPledges();
    
    
    
    /**
     * Load existing RegisterOfPledges objects from the database that have a createdByID column
     * that matches the userId parameter.
     * @return List a List of RegisterOfPledges objects that match the userId parameter.
     */
    public List<RegisterOfPledges> listRegisterOfPledgesByCreatedById(Long userId);
    
    
    /**
     * Load all existing RegisterOfPledgesHistory objects for a particular RegisterOfPledges.
     * The <code>List</code> of RegisterOfPledgesHistory objects contains all of the changes that have been made to the
     * RegisterOfPledges object identified by the registerOfPledges parameter'
     * @return List a List of RegisterOfPledgesHistory objects.
     */
    public List<RegisterOfPledgesHistory> listRegisterOfPledgesHistory(Long registerOfPledges) throws Exception;
    
    
    /**
     * Returns a List of associated AccommodationPledge objects that represent the accommodationPledges property
     * and that are defined by the one-to-many relationship defined as RegisterOfPledges.accommodationPledges.
     * @return the <code>List</code> of the associated AccommodationPledge objects that represent the accommodationPledges property.
     */
    public List<AccommodationPledge> getAccommodationPledges(Long registerOfPledgesId, Long userId) throws RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException;
    
    /**
     * Adds a AccommodationPledge to the Set of associated AccommodationPledge objects that represent the accommodationPledges property
     * and that are defined by the one-to-many relationship defined as RegisterOfPledges.accommodationPledges.
     * @return the updated <code>List</code> of the associated AccommodationPledge objects that represent the accommodationPledges property.
     */
    public List<AccommodationPledge> addAccommodationPledgeToAccommodationPledges(AccommodationPledge accommodationPledges, Long registerOfPledgesId, Long userId) throws RegisterOfPledgesSaveException, RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException;
  
    /**
     * Returns a List of associated ServicePledge objects that represent the servicePledges property
     * and that are defined by the one-to-many relationship defined as RegisterOfPledges.servicePledges.
     * @return the <code>List</code> of the associated ServicePledge objects that represent the servicePledges property.
     */
    public List<ServicePledge> getServicePledges(Long registerOfPledgesId, Long userId) throws RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException;
    
    /**
     * Adds a ServicePledge to the Set of associated ServicePledge objects that represent the servicePledges property
     * and that are defined by the one-to-many relationship defined as RegisterOfPledges.servicePledges.
     * @return the updated <code>List</code> of the associated ServicePledge objects that represent the servicePledges property.
     */
    public List<ServicePledge> addServicePledgeToServicePledges(ServicePledge servicePledges, Long registerOfPledgesId, Long userId) throws RegisterOfPledgesSaveException, RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException;
  
    /**
     * Returns a List of associated GoodsPledge objects that represent the goodsPledges property
     * and that are defined by the one-to-many relationship defined as RegisterOfPledges.goodsPledges.
     * @return the <code>List</code> of the associated GoodsPledge objects that represent the goodsPledges property.
     */
    public List<GoodsPledge> getGoodsPledges(Long registerOfPledgesId, Long userId) throws RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException;
    
    /**
     * Adds a GoodsPledge to the Set of associated GoodsPledge objects that represent the goodsPledges property
     * and that are defined by the one-to-many relationship defined as RegisterOfPledges.goodsPledges.
     * @return the updated <code>List</code> of the associated GoodsPledge objects that represent the goodsPledges property.
     */
    public List<GoodsPledge> addGoodsPledgeToGoodsPledges(GoodsPledge goodsPledges, Long registerOfPledgesId, Long userId) throws RegisterOfPledgesSaveException, RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException;
      
    
    /**
     * Creates a new entry in the REGISTEROFPLEDGES table containing the parameters passed here.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the database generated Id of the newly created record.
     * @throws RegisterOfPledgesSaveException on failure to save.  
     */
    public Long createAndStoreRegisterOfPledges(RegisterOfPledges registerOfPledges, Long userID)
        throws RegisterOfPledgesSaveException;


    /**
     * Updates an existing entry in the REGISTEROFPLEDGES table containing the parameters passed here.
     * Only non-null parameters will be applied to the underlying table so preserving any existing entries.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws RegisterOfPledgesLoadException if the existing record cannot be loaded
     * @throws RegisterOfPledgesSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public void updateRegisterOfPledges(RegisterOfPledges registerOfPledges, Long userID)
        throws RegisterOfPledgesSaveException, RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException;
    
    
    /**
     * Loads a RegisterOfPledgesFilter object based on the participantID of the currently logged in user
     * @param userId the userId is checked for authorisation to view the record. It is also the key to load a against the createdByID
     * column of the underlying record. There should only ever be one or zero filter records per RegisterOfPledges.
     * @ return a RegisterOfPledgesFilter object matching the parameter or a newly constructed, empty object if none can be found
     */
    public RegisterOfPledgesFilter loadRegisterOfPledgesFilter(Long userId) throws RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException;


    
    /**
     * Creates a new entry in the REGISTEROFPLEDGESFILTER table containing the parameters passed here.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the userId which is also the assigned Id for the newly created record.
     * @throws RegisterOfPledgesSaveException on failure to save.  
     */
    public Long createAndStoreRegisterOfPledgesFilter(RegisterOfPledgesFilter registerOfPledgesFilter, Long userId)
        throws RegisterOfPledgesSaveException;
    
    
    /**
     * Updates an existing entry in the REGISTEROFPLEDGESFILTER table and associated tables 
     * containing the parameters passed here. If the entry denoted by the userID does not exist then one is created.
     *	
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws RegisterOfPledgesSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public Long updateRegisterOfPledgesFilter(RegisterOfPledgesFilter registerOfPledgesFilter, Long userId)
        throws RegisterOfPledgesLoadException, RegisterOfPledgesSaveException, AuthorisationException, InvalidUserIDException;
    
}
    
