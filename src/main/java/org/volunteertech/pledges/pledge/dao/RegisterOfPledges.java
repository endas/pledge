package org.volunteertech.pledges.pledge.dao;
import java.io.Serializable;
import java.util.Date;
import java.util.Set;
import java.util.HashSet;
import java.math.BigDecimal;


import org.volunteertech.pledges.users.dao.ApplicationUserDetails;

import org.volunteertech.pledges.accommodationpledge.dao.AccommodationPledge;

import org.volunteertech.pledges.servicepledge.dao.ServicePledge;

import org.volunteertech.pledges.goodspledge.dao.GoodsPledge;




/**
 * The register of pledges screen is used to add/edit new/existing pledges
 * This Interface has been generated by the XSLT processor from the metadata and represents the
 * DataBase access handler interface for the RegisterOfPledges entity.
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
public interface RegisterOfPledges extends Serializable { 

    public enum CurrentMode{
    	ADD,UPDATE,LOCALIZE;
    	
    	public String toString(){
    		switch(this){
    			case ADD: return "ADD";
    			case UPDATE: return "UPDATE";
    			case LOCALIZE: return "LOCALIZE";
    			default: return "UNKNOWN";
    		}	
    	}
    }
    	
    /**
     * Returns the Id for the underlying database table record
     * @return the Id for the underlying database table record
     */
	public Long getId();
	
    /**
     * Sets the Id. This allows front-end forms to bind the id property.
     * @param id the Id for the underlying database table record.
     */
	public void setId(Long id);
	
    /**
     * Returns the parentObjectId when this object has been populated via a restful webservice JSON mapping
     * @return the parentObjectId when this object has been populated via a restful webservice JSON mapping
     */
	public Long getParentObjectId();
	
    /**
     * Sets the parentObjectId. This allows restful web services to bind the parentId property when adding a new record.
     * @param parentObjectId allows restful web services to bind the parentId property when adding a new record.
     */
	public void setParentObjectId(Long parentObjectId);
    
    /**
     * Sets the ApplicationUserDetails defined as the one-to-one association in RegisterOfPledges.applicationUserDetails in ApplicationDef.xml
     * @param applicationUserDetails is This section displays the contact information that the user entered on the first page of the pledge process. The requirement was to present a user profile so that the user could edit their details and return at any point to add/edit their pledges. You can edit your contact information by pressing the 'Edit your Contact Information' button' defined as the one-to-one association in RegisterOfPledges.applicationUserDetails in ApplicationDef.xml 
     */
    public void setApplicationUserDetails(ApplicationUserDetails applicationUserDetails);

    /**
     * Returns the  ApplicationUserDetails defined as the one-to-one association in RegisterOfPledges.applicationUserDetails in ApplicationDef.xml
     * @return This section displays the contact information that the user entered on the first page of the pledge process. The requirement was to present a user profile so that the user could edit their details and return at any point to add/edit their pledges. You can edit your contact information by pressing the 'Edit your Contact Information' button'. The ApplicationUserDetails defined as the one-to-one association in RegisterOfPledges.applicationUserDetails in ApplicationDef.xml
     */
    public ApplicationUserDetails getApplicationUserDetails();
    
    /**
     * Sets the <code>Set</code> of AccommodationPledge defined as the one-to-many association in RegisterOfPledges.accommodationPledges in ApplicationDef.xml
     * @param accommodationPledges is Complete this section if you would like to offer accommodation. Please add an entry for each property that you wish to provide by pressing the 'Accommodation' button. defined as the one-to-many association in RegisterOfPledges.accommodationPledges in ApplicationDef.xml 
     */
    public void setAccommodationPledges(Set<AccommodationPledge> accommodationPledges);

    /**
     * Returns the <code>Set</code> of AccommodationPledge defined as the one-to-many association in RegisterOfPledges.accommodationPledges in ApplicationDef.xml
     * @return Complete this section if you would like to offer accommodation. Please add an entry for each property that you wish to provide by pressing the 'Accommodation' button.. The <code>Set</code> of AccommodationPledge defined as the one-to-many association in RegisterOfPledges.accommodationPledges in ApplicationDef.xml
     */
    public Set<AccommodationPledge> getAccommodationPledges();
    
    /**
     * Sets the <code>Set</code> of ServicePledge defined as the one-to-many association in RegisterOfPledges.servicePledges in ApplicationDef.xml
     * @param servicePledges is Complete this section if you would like to offer a service, professional or otherwise. Please add an entry for each service that you wish to provide by pressing the 'Offer a Skill/Service' button. defined as the one-to-many association in RegisterOfPledges.servicePledges in ApplicationDef.xml 
     */
    public void setServicePledges(Set<ServicePledge> servicePledges);

    /**
     * Returns the <code>Set</code> of ServicePledge defined as the one-to-many association in RegisterOfPledges.servicePledges in ApplicationDef.xml
     * @return Complete this section if you would like to offer a service, professional or otherwise. Please add an entry for each service that you wish to provide by pressing the 'Offer a Skill/Service' button.. The <code>Set</code> of ServicePledge defined as the one-to-many association in RegisterOfPledges.servicePledges in ApplicationDef.xml
     */
    public Set<ServicePledge> getServicePledges();
    
    /**
     * Sets the <code>Set</code> of GoodsPledge defined as the one-to-many association in RegisterOfPledges.goodsPledges in ApplicationDef.xml
     * @param goodsPledges is Complete this section if you would like to offer goods or items such as clothes, electronics or toiletries/medicines. Please add an entry for each category of goods that you wish to provide by pressing the 'Offer Goods/items/Medicines' button. defined as the one-to-many association in RegisterOfPledges.goodsPledges in ApplicationDef.xml 
     */
    public void setGoodsPledges(Set<GoodsPledge> goodsPledges);

    /**
     * Returns the <code>Set</code> of GoodsPledge defined as the one-to-many association in RegisterOfPledges.goodsPledges in ApplicationDef.xml
     * @return Complete this section if you would like to offer goods or items such as clothes, electronics or toiletries/medicines. Please add an entry for each category of goods that you wish to provide by pressing the 'Offer Goods/items/Medicines' button.. The <code>Set</code> of GoodsPledge defined as the one-to-many association in RegisterOfPledges.goodsPledges in ApplicationDef.xml
     */
    public Set<GoodsPledge> getGoodsPledges();
    

    /**
     * sets the Id of the user that created the underlying record
     * @param createdByID the Id of the user that created the underlying record
     */
    public void setCreatedByID(Long createdByID);
    
    /**
     * gets the Id of the user that created the underlying record
     * @return the Id of the user that created the underlying record
     */
    public Long getCreatedByID();
         
   	/**
     * sets the Id of the user that last updated the underlying record
     * @param updatedByID the Id of the user that last updated the underlying record
     */
    public void setUpdatedByID(Long updatedByID);
     
    /**
     * gets the Id of the user that last updated the underlying record
     * @return the Id of the user that last updated the underlying record
     */
    public Long getUpdatedByID();

    /**
     * sets the date that the underlying record was first created as a <code>java.util.Date</code> object
     * @param dateCreated the date that the underlying record was first created
     */
    public void setDateCreated(Date dateCreated);

    /**
     * Gets the date that the underlying record was first created as a <code>java.util.Date</code> object
     * @return the date that the underlying record was first created
     */
    public Date getDateCreated();

    /**
     * Sets the date that the underlying record was last updated as a <code>java.util.Date</code> object
     * @param dateUpdated the date that the underlying record was last updated
     */
    public void setDateUpdated(Date dateUpdated);
    
    /**
     * Gets the date that the underlying record was last updated as a <code>java.util.Date</code> object
     * @return the date that the underlying record was last updated
     */
    public Date getDateUpdated();
    
    /**
     * Checks for a newly created entity object
     * @return true if this is a newly created entity object meaning that it has not yet been persisted, otherwise false
     */
	public boolean isNew();
	
	/**
	 * Sets the current mode of use for the entity object;
	 * @param mode a member of the CurrentMode enumeration
	 */
	public void setCurrentMode(CurrentMode mode);

    /**
     * Returns the current mode under which the class instance was loaded
     * @return A member of the CurrentMode Enumeration
     */
	public CurrentMode getCurrentMode();
}
    
    
    

