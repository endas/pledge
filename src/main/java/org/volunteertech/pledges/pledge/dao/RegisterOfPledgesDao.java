package org.volunteertech.pledges.pledge.dao;
import org.hibernate.SessionFactory;
import com.netgrains.security.AuthorisationException;
import com.netgrains.security.InvalidUserIDException;
import org.volunteertech.pledges.pledge.dao.RegisterOfPledges;
import org.volunteertech.pledges.pledge.dao.RegisterOfPledgesHistory;
import org.volunteertech.pledges.pledge.dao.RegisterOfPledgesLoadException;
import org.volunteertech.pledges.pledge.dao.RegisterOfPledgesSaveException;
import java.util.List;
import java.util.Set;
import java.util.Date;
import java.math.BigDecimal;


import org.volunteertech.pledges.users.dao.ApplicationUserDetails;

import org.volunteertech.pledges.accommodationpledge.dao.AccommodationPledge;

import org.volunteertech.pledges.servicepledge.dao.ServicePledge;

import org.volunteertech.pledges.goodspledge.dao.GoodsPledge;



/**
 * The register of pledges screen is used to add/edit new/existing pledges
 * This Interface has been generated by the XSLT processor from the meta data and represents the
 * interface of the data access object(DAO) for the RegisterOfPledges entity.
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: * $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
public interface RegisterOfPledgesDao
{

    /**
     * Allows Spring to set the container managed SessionFactory instance
     * @param a Spring managed SessionFactory instance
     */    
    public void setSessionFactory(SessionFactory sessionFactory);


    /**
     * Loads a RegisterOfPledges object based on the registerOfPledgesId column
     * @param registerOfPledgesId the primary key for the underlying record.
     * @ return a RegisterOfPledges object matching the parameter or null if none can be found. The
     * method also returns null if the parameter is null.
     */
    public RegisterOfPledges load(Long registerOfPledgesId, Long loggedInUserId) throws AuthorisationException, InvalidUserIDException;
    

    /**
     * Load all existing RegisterOfPledges objects from the database. Hibernate will generate the appropriate SQL,
     * send it to the database and populate a List of RegisterOfPledges objects with the data.
     * @return List a List of RegisterOfPledges objects.
     */
    public List<RegisterOfPledges> listRegisterOfPledges();
    
    
    
    /**
     * Load existing RegisterOfPledges objects from the database that have a createdByID column
     * that matches the userId parameter.
     * @return List a List of RegisterOfPledges objects that match the userId parameter.
     */
    public List<RegisterOfPledges> listRegisterOfPledgesByCreatedById(Long userId);
    
    
    /**
     * Load all existing RegisterOfPledgesHistory objects for a particular RegisterOfPledges from the database.
     * Hibernate will generate the appropriate SQL,
     * send it to the database and populate RegisterOfPledgesHistory objects with the data.
     * @return List a List of RegisterOfPledgesHistory objects.
     */
    public List<RegisterOfPledgesHistory> listRegisterOfPledgesHistory(Long registerOfPledges);
    
    
    /**
     * Returns a List representing the Set of associated ApplicationUserDetails objects that represent the applicationUserDetails property
     * and that are defined by the one-to-one relationship defined as RegisterOfPledges.applicationUserDetails.
     * @return the <code>List</code> of the associated ApplicationUserDetails objects that represent the applicationUserDetails property.
     */
    public List<ApplicationUserDetails> getApplicationUserDetails(Long registerOfPledgesId, Long userId) throws RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException;
    
    /**
     * Updates an ApplicationUserDetails in the applicationUserDetails property and returns a List representing the Set of associated ApplicationUserDetails objects that represent the applicationUserDetails property
     * and that are defined by the one-to-one relationship defined as RegisterOfPledges.applicationUserDetails.
     * @return the <code>List</code> of the associated ApplicationUserDetails objects that represent the applicationUserDetails property.
     */
    public List<ApplicationUserDetails> updateApplicationUserDetails(Long registerOfPledgesId, ApplicationUserDetails applicationUserDetails, Long userId) throws RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException;
  
    /**
     * Adds a AccommodationPledge to the Set of associated AccommodationPledge objects that represent the accommodationPledges property
     * and that are defined by the one-to-many relationship defined as RegisterOfPledges.accommodationPledges.
     * @return the updated <code>List</code> of the associated AccommodationPledge objects that represent the accommodationPledges property.
     */
    public List<AccommodationPledge> addAccommodationPledgeToAccommodationPledges(AccommodationPledge accommodationPledges, Long registerOfPledgesId, Long userId) throws RegisterOfPledgesSaveException, RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException;
    
    /**
     * Returns a List representing the Set of associated AccommodationPledge objects that represent the accommodationPledges property
     * and that are defined by the one-to-many relationship defined as RegisterOfPledges.accommodationPledges.
     * @return the <code>List</code> of the associated AccommodationPledge objects that represent the accommodationPledges property.
     */
    public List<AccommodationPledge> getAccommodationPledges(Long registerOfPledgesId, Long userId) throws RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException;
    
    /**
     * Updates an AccommodationPledge in the accommodationPledges property and returns a List representing the Set of associated AccommodationPledge objects that represent the accommodationPledges property
     * and that are defined by the one-to-many relationship defined as RegisterOfPledges.accommodationPledges.
     * @return the <code>List</code> of the associated AccommodationPledge objects that represent the accommodationPledges property.
     */
    public List<AccommodationPledge> updateAccommodationPledges(Long registerOfPledgesId, AccommodationPledge accommodationPledge, Long userId) throws RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException;
  
    /**
     * Adds a ServicePledge to the Set of associated ServicePledge objects that represent the servicePledges property
     * and that are defined by the one-to-many relationship defined as RegisterOfPledges.servicePledges.
     * @return the updated <code>List</code> of the associated ServicePledge objects that represent the servicePledges property.
     */
    public List<ServicePledge> addServicePledgeToServicePledges(ServicePledge servicePledges, Long registerOfPledgesId, Long userId) throws RegisterOfPledgesSaveException, RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException;
    
    /**
     * Returns a List representing the Set of associated ServicePledge objects that represent the servicePledges property
     * and that are defined by the one-to-many relationship defined as RegisterOfPledges.servicePledges.
     * @return the <code>List</code> of the associated ServicePledge objects that represent the servicePledges property.
     */
    public List<ServicePledge> getServicePledges(Long registerOfPledgesId, Long userId) throws RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException;
    
    /**
     * Updates an ServicePledge in the servicePledges property and returns a List representing the Set of associated ServicePledge objects that represent the servicePledges property
     * and that are defined by the one-to-many relationship defined as RegisterOfPledges.servicePledges.
     * @return the <code>List</code> of the associated ServicePledge objects that represent the servicePledges property.
     */
    public List<ServicePledge> updateServicePledges(Long registerOfPledgesId, ServicePledge servicePledge, Long userId) throws RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException;
  
    /**
     * Adds a GoodsPledge to the Set of associated GoodsPledge objects that represent the goodsPledges property
     * and that are defined by the one-to-many relationship defined as RegisterOfPledges.goodsPledges.
     * @return the updated <code>List</code> of the associated GoodsPledge objects that represent the goodsPledges property.
     */
    public List<GoodsPledge> addGoodsPledgeToGoodsPledges(GoodsPledge goodsPledges, Long registerOfPledgesId, Long userId) throws RegisterOfPledgesSaveException, RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException;
    
    /**
     * Returns a List representing the Set of associated GoodsPledge objects that represent the goodsPledges property
     * and that are defined by the one-to-many relationship defined as RegisterOfPledges.goodsPledges.
     * @return the <code>List</code> of the associated GoodsPledge objects that represent the goodsPledges property.
     */
    public List<GoodsPledge> getGoodsPledges(Long registerOfPledgesId, Long userId) throws RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException;
    
    /**
     * Updates an GoodsPledge in the goodsPledges property and returns a List representing the Set of associated GoodsPledge objects that represent the goodsPledges property
     * and that are defined by the one-to-many relationship defined as RegisterOfPledges.goodsPledges.
     * @return the <code>List</code> of the associated GoodsPledge objects that represent the goodsPledges property.
     */
    public List<GoodsPledge> updateGoodsPledges(Long registerOfPledgesId, GoodsPledge goodsPledge, Long userId) throws RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException;
  
    
    
    /**
     * Creates a new entry in the REGISTEROFPLEDGES table containing the parameters passed here.
     *
     * @param userID the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the database generated Id of the newly created record.
     */
    public Long createAndStoreRegisterOfPledges(RegisterOfPledges registerOfPledges, Long userId);


    /**
     * Updates an existing entry in the REGISTEROFPLEDGES table containing the parameters passed here.
     * Only non-null parameters will be applied to the underlying table so preserving any existing entries.
     * @param the registerOfPledges the RegisterOfPledges object to update in the database.
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     */
    public void updateRegisterOfPledges(RegisterOfPledges registerOfPledges, Long userId) throws AuthorisationException, InvalidUserIDException;
    
    
    /**
     * Loads a RegisterOfPledgesFilter object based on the participantID of the currently logged in user
     * @param userID the userID is checked for authorisation to view the record. It is also the key to load a against the createdByID
     * column of the underlying record. There should only ever be one or zero filter records per RegisterOfPledges.
     * @ return a RegisterOfPledgesFilter object matching the parameter or a newly constructed, empty object if none can be found
     */
    public RegisterOfPledgesFilter loadRegisterOfPledgesFilter(Long userID) throws RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException;


    
    /**
     * Creates a new entry in the REGISTEROFPLEDGESFILTER table containing the parameters passed here.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the userId which is also the assigned Id for the newly created record.
     * @throws RegisterOfPledgesSaveException on failure to save.  
     */
    public Long createAndStoreRegisterOfPledgesFilter(RegisterOfPledgesFilter registerOfPledgesFilter, Long userId)
        throws RegisterOfPledgesSaveException;
    
    
    /**
     * Updates an existing entry in the REGISTEROFPLEDGESFILTER table and associated tables 
     * containing the parameters passed here. If the entry denoted by the userID does not exist then one is created.
     *	
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws RegisterOfPledgesSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public Long updateRegisterOfPledgesFilter(RegisterOfPledgesFilter registerOfPledgesFilter, Long userId)
        throws RegisterOfPledgesLoadException, RegisterOfPledgesSaveException, AuthorisationException, InvalidUserIDException;
    
	
}
    
