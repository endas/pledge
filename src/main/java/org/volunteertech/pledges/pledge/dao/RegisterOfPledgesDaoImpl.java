package org.volunteertech.pledges.pledge.dao;
import org.hibernate.SessionFactory;
import com.netgrains.security.Authorisation;
import com.netgrains.security.AuthorisationException;
import com.netgrains.security.InvalidUserIDException;
import org.volunteertech.pledges.pledge.dao.RegisterOfPledges;
import org.volunteertech.pledges.pledge.dao.RegisterOfPledgesHistory;
import org.volunteertech.pledges.pledge.dao.RegisterOfPledgesLoadException;
import org.volunteertech.pledges.pledge.dao.RegisterOfPledgesSaveException;

import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.ArrayList;
import java.util.Arrays;
import java.math.BigDecimal;

import org.springframework.stereotype.Repository;
import org.springframework.util.StringUtils;


import org.volunteertech.pledges.users.dao.ApplicationUserDetails;

import org.volunteertech.pledges.users.dao.ApplicationUserDetailsImpl;

import org.volunteertech.pledges.accommodationpledge.dao.AccommodationPledge;

import org.volunteertech.pledges.servicepledge.dao.ServicePledge;

import org.volunteertech.pledges.goodspledge.dao.GoodsPledge;




/**
 * The register of pledges screen is used to add/edit new/existing pledges
 * This class has been generated by the XSLT processor from the metadata and represents the
 * implementation of the data access object for the RegisterOfPledges entity.
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: * $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
@Repository 
public class RegisterOfPledgesDaoImpl implements RegisterOfPledgesDao
{
    /**
     * The Hibernate SessionFactory instance
     */
    private SessionFactory sessionFactory;
    
    
    

    /**
     * Default Constructor for the RegisterOfPledges entity data manager
     */
    public RegisterOfPledgesDaoImpl()
    {
    	//Initialise the related Object stores
        
    }
    

    /**
     * Allows Spring to set the container managed SessionFactory instance
     * @param a Spring managed SessionFactory instance
     */    
    public void setSessionFactory(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }


    /**
     * Loads a RegisterOfPledges object based on the registerOfPledgesId column
     * @param RegisterOfPledgesId the primary key for the underlying record.
     * @ return a RegisterOfPledges object matching the parameter or null if none can be found. The
     * method also returns null if the parameter is null.
     */
    public RegisterOfPledges load(Long registerOfPledgesId, Long loggedInUserId) throws AuthorisationException, InvalidUserIDException
    {
        if (Authorisation.isAuthorisedView("RegisterOfPledges", loggedInUserId, registerOfPledgesId) == false)
        {
        	throw new AuthorisationException();
        }
    
    	RegisterOfPledges hibernateEntity = null;
    	
        if (registerOfPledgesId != null)
        {
			hibernateEntity = (RegisterOfPledges)this.sessionFactory.getCurrentSession().get(RegisterOfPledgesImpl.class, registerOfPledgesId);

            // Load all related singular objects
            
        }
    	
        return hibernateEntity;
    }
    
    
    

    /**
     * Load all existing RegisterOfPledges objects from the database. Hibernate will generate the appropriate SQL,
     * send it to the database and populate RegisterOfPledges objects with the data.
     * @return List a List of RegisterOfPledges objects.
     */
    public List<RegisterOfPledges> listRegisterOfPledges()
    {
        @SuppressWarnings("unchecked")
        List<RegisterOfPledges> result = this.sessionFactory.getCurrentSession().createQuery("from RegisterOfPledgesImpl as registerOfPledges order by registerOfPledges.id asc").list();

        return result;
    }

    
    
    /**
     * Load existing RegisterOfPledges objects from the database that have a createdByID column
     * that matches the createdById parameter.
     * @return List a List of RegisterOfPledges objects that match the createdById parameter.
     */
    public List<RegisterOfPledges> listRegisterOfPledgesByCreatedById(Long userId)
    {
        @SuppressWarnings("unchecked")
        List<RegisterOfPledges> result = this.sessionFactory.getCurrentSession().createQuery("from RegisterOfPledgesImpl as registerOfPledges where registerOfPledges.createdByID = :userId order by registerOfPledges.id asc").setParameter("userId", userId).list();

        return result;
    }
    
    
    /**
     * Load all existing RegisterOfPledgesHistory objects for a particular RegisterOfPledges from the database.
     * Hibernate will generate the appropriate SQL,
     * send it to the database and populate a List of RegisterOfPledgesHistory objects with the data.
     * @return List a List of RegisterOfPledgesHistory objects.
     */
    public List<RegisterOfPledgesHistory> listRegisterOfPledgesHistory(Long registerOfPledges)
    {
        
        @SuppressWarnings("unchecked")
        List<RegisterOfPledgesHistory> result = this.sessionFactory.getCurrentSession().createQuery("from RegisterOfPledgesHistory as registerOfPledgesHistory where registerOfPledgesHistory.registerOfPledgesId = ? order by registerOfPledgesHistory.id asc").setLong(0, registerOfPledges).list();

        return result;
    }
    
    
    /**
     * Returns a List representing the Set of associated ApplicationUserDetails objects that represent the applicationUserDetails property
     * and that are defined by the one-to-one relationship defined as RegisterOfPledges.applicationUserDetails.
     * @return the <code>List</code> of the associated ApplicationUserDetails objects that represent the applicationUserDetails property.
     */
    public List<ApplicationUserDetails> getApplicationUserDetails(Long registerOfPledgesId, Long userId) throws RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException{
    	@SuppressWarnings("unchecked")
		List<ApplicationUserDetails> result = this.sessionFactory.getCurrentSession().createQuery("select applicationUserDetails from ApplicationUserDetailsImpl as applicationUserDetails inner join applicationUserDetails.registerOfPledges as registerOfPledges where registerOfPledges.id = :registerOfPledgesId order by applicationUserDetails.id asc").setParameter("registerOfPledgesId", registerOfPledgesId).list();
    	return result;
    }
      
    
    /**
     * Updates an ApplicationUserDetails in the applicationUserDetails property and returns a List representing the Set of associated ApplicationUserDetails objects that represent the applicationUserDetails property
     * and that are defined by the one-to-one relationship defined as RegisterOfPledges.applicationUserDetails.
     * @return the <code>List</code> of the associated ApplicationUserDetails objects that represent the applicationUserDetails property.
     */
    public List<ApplicationUserDetails> updateApplicationUserDetails(Long registerOfPledgesId, ApplicationUserDetails applicationUserDetails, Long userId) throws RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException{
    applicationUserDetails.setUpdatedByID(userId);
        applicationUserDetails.setDateUpdated(new Date());
        this.sessionFactory.getCurrentSession().update(applicationUserDetails);
    	
    	return getApplicationUserDetails(registerOfPledgesId, userId);
    }
  
    /**
     * Adds a AccommodationPledge to the Set of associated AccommodationPledge objects that represent the accommodationPledges property
     * and that are defined by the one-to-many relationship defined as RegisterOfPledges.accommodationPledges.
     * @return the updated <code>List</code> of the associated AccommodationPledge objects that represent the accommodationPledges property.
     */
    public List<AccommodationPledge> addAccommodationPledgeToAccommodationPledges(AccommodationPledge accommodationPledges, Long registerOfPledgesId, Long userId) throws RegisterOfPledgesSaveException, RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException{
    	accommodationPledges.setCreatedByID(userId);
    	accommodationPledges.setUpdatedByID(userId);
    	RegisterOfPledges registerOfPledges = load(registerOfPledgesId, userId);
    	accommodationPledges.setRegisterOfPledges(registerOfPledges);
    	  registerOfPledges.getAccommodationPledges().add(accommodationPledges);
    	updateRegisterOfPledges(registerOfPledges, userId);
    	return getAccommodationPledges(registerOfPledgesId, userId);
	}
      
    /**
     * Returns a List representing the Set of associated AccommodationPledge objects that represent the accommodationPledges property
     * and that are defined by the one-to-many relationship defined as RegisterOfPledges.accommodationPledges.
     * @return the <code>List</code> of the associated AccommodationPledge objects that represent the accommodationPledges property.
     */
    public List<AccommodationPledge> getAccommodationPledges(Long registerOfPledgesId, Long userId) throws RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException{
    	@SuppressWarnings("unchecked")
		List<AccommodationPledge> result = this.sessionFactory.getCurrentSession().createQuery("select accommodationPledge from AccommodationPledgeImpl as accommodationPledge inner join accommodationPledge.registerOfPledges as registerOfPledges where registerOfPledges.id = :registerOfPledgesId order by accommodationPledge.id asc").setParameter("registerOfPledgesId", registerOfPledgesId).list();
    	return result;
    }
      
    
    /**
     * Updates an AccommodationPledge in the accommodationPledges property and returns a List representing the Set of associated AccommodationPledge objects that represent the accommodationPledges property
     * and that are defined by the one-to-many relationship defined as RegisterOfPledges.accommodationPledges.
     * @return the <code>List</code> of the associated AccommodationPledge objects that represent the accommodationPledges property.
     */
    public List<AccommodationPledge> updateAccommodationPledges(Long registerOfPledgesId, AccommodationPledge accommodationPledge, Long userId) throws RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException{
    RegisterOfPledges registerOfPledges = load(registerOfPledgesId, userId);
    	accommodationPledge.setRegisterOfPledges(registerOfPledges);
    	  accommodationPledge.setUpdatedByID(userId);
        accommodationPledge.setDateUpdated(new Date());
        this.sessionFactory.getCurrentSession().update(accommodationPledge);
    	
    	return getAccommodationPledges(registerOfPledgesId, userId);
    }
  
    /**
     * Adds a ServicePledge to the Set of associated ServicePledge objects that represent the servicePledges property
     * and that are defined by the one-to-many relationship defined as RegisterOfPledges.servicePledges.
     * @return the updated <code>List</code> of the associated ServicePledge objects that represent the servicePledges property.
     */
    public List<ServicePledge> addServicePledgeToServicePledges(ServicePledge servicePledges, Long registerOfPledgesId, Long userId) throws RegisterOfPledgesSaveException, RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException{
    	servicePledges.setCreatedByID(userId);
    	servicePledges.setUpdatedByID(userId);
    	RegisterOfPledges registerOfPledges = load(registerOfPledgesId, userId);
    	servicePledges.setRegisterOfPledges(registerOfPledges);
    	  registerOfPledges.getServicePledges().add(servicePledges);
    	updateRegisterOfPledges(registerOfPledges, userId);
    	return getServicePledges(registerOfPledgesId, userId);
	}
      
    /**
     * Returns a List representing the Set of associated ServicePledge objects that represent the servicePledges property
     * and that are defined by the one-to-many relationship defined as RegisterOfPledges.servicePledges.
     * @return the <code>List</code> of the associated ServicePledge objects that represent the servicePledges property.
     */
    public List<ServicePledge> getServicePledges(Long registerOfPledgesId, Long userId) throws RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException{
    	@SuppressWarnings("unchecked")
		List<ServicePledge> result = this.sessionFactory.getCurrentSession().createQuery("select servicePledge from ServicePledgeImpl as servicePledge inner join servicePledge.registerOfPledges as registerOfPledges where registerOfPledges.id = :registerOfPledgesId order by servicePledge.id asc").setParameter("registerOfPledgesId", registerOfPledgesId).list();
    	return result;
    }
      
    
    /**
     * Updates an ServicePledge in the servicePledges property and returns a List representing the Set of associated ServicePledge objects that represent the servicePledges property
     * and that are defined by the one-to-many relationship defined as RegisterOfPledges.servicePledges.
     * @return the <code>List</code> of the associated ServicePledge objects that represent the servicePledges property.
     */
    public List<ServicePledge> updateServicePledges(Long registerOfPledgesId, ServicePledge servicePledge, Long userId) throws RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException{
    RegisterOfPledges registerOfPledges = load(registerOfPledgesId, userId);
    	servicePledge.setRegisterOfPledges(registerOfPledges);
    	  servicePledge.setUpdatedByID(userId);
        servicePledge.setDateUpdated(new Date());
        this.sessionFactory.getCurrentSession().update(servicePledge);
    	
    	return getServicePledges(registerOfPledgesId, userId);
    }
  
    /**
     * Adds a GoodsPledge to the Set of associated GoodsPledge objects that represent the goodsPledges property
     * and that are defined by the one-to-many relationship defined as RegisterOfPledges.goodsPledges.
     * @return the updated <code>List</code> of the associated GoodsPledge objects that represent the goodsPledges property.
     */
    public List<GoodsPledge> addGoodsPledgeToGoodsPledges(GoodsPledge goodsPledges, Long registerOfPledgesId, Long userId) throws RegisterOfPledgesSaveException, RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException{
    	goodsPledges.setCreatedByID(userId);
    	goodsPledges.setUpdatedByID(userId);
    	RegisterOfPledges registerOfPledges = load(registerOfPledgesId, userId);
    	goodsPledges.setRegisterOfPledges(registerOfPledges);
    	  registerOfPledges.getGoodsPledges().add(goodsPledges);
    	updateRegisterOfPledges(registerOfPledges, userId);
    	return getGoodsPledges(registerOfPledgesId, userId);
	}
      
    /**
     * Returns a List representing the Set of associated GoodsPledge objects that represent the goodsPledges property
     * and that are defined by the one-to-many relationship defined as RegisterOfPledges.goodsPledges.
     * @return the <code>List</code> of the associated GoodsPledge objects that represent the goodsPledges property.
     */
    public List<GoodsPledge> getGoodsPledges(Long registerOfPledgesId, Long userId) throws RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException{
    	@SuppressWarnings("unchecked")
		List<GoodsPledge> result = this.sessionFactory.getCurrentSession().createQuery("select goodsPledge from GoodsPledgeImpl as goodsPledge inner join goodsPledge.registerOfPledges as registerOfPledges where registerOfPledges.id = :registerOfPledgesId order by goodsPledge.id asc").setParameter("registerOfPledgesId", registerOfPledgesId).list();
    	return result;
    }
      
    
    /**
     * Updates an GoodsPledge in the goodsPledges property and returns a List representing the Set of associated GoodsPledge objects that represent the goodsPledges property
     * and that are defined by the one-to-many relationship defined as RegisterOfPledges.goodsPledges.
     * @return the <code>List</code> of the associated GoodsPledge objects that represent the goodsPledges property.
     */
    public List<GoodsPledge> updateGoodsPledges(Long registerOfPledgesId, GoodsPledge goodsPledge, Long userId) throws RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException{
    RegisterOfPledges registerOfPledges = load(registerOfPledgesId, userId);
    	goodsPledge.setRegisterOfPledges(registerOfPledges);
    	  goodsPledge.setUpdatedByID(userId);
        goodsPledge.setDateUpdated(new Date());
        this.sessionFactory.getCurrentSession().update(goodsPledge);
    	
    	return getGoodsPledges(registerOfPledgesId, userId);
    }
  
    
    /**
     * Creates a new entry in the REGISTEROFPLEDGES table containing the parameters passed here.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the database generated Id of the newly created record.
     * @throws RegisterOfPledgesSaveException on failure to save.  
     */
    public Long createAndStoreRegisterOfPledges(RegisterOfPledges registerOfPledges, Long userId)
    {
    	Long returnValue = new Long(0);

        registerOfPledges.setCreatedByID(userId);
        registerOfPledges.setUpdatedByID(userId);
        registerOfPledges.setDateCreated(new Date());
        registerOfPledges.setDateUpdated(new Date());
        
  
		if (registerOfPledges.getApplicationUserDetails() == null){
			registerOfPledges.setApplicationUserDetails(new ApplicationUserDetailsImpl());
		}
        registerOfPledges.getApplicationUserDetails().setCreatedByID(userId);
        registerOfPledges.getApplicationUserDetails().setUpdatedByID(userId);
        registerOfPledges.getApplicationUserDetails().setDateCreated(new Date());
        registerOfPledges.getApplicationUserDetails().setDateUpdated(new Date());
		registerOfPledges.getApplicationUserDetails().setRegisterOfPledges(registerOfPledges);

        this.sessionFactory.getCurrentSession().save(registerOfPledges);
            
        returnValue = registerOfPledges.getId();
		
		return returnValue;
    }


    /**
     * Updates an existing entry in the REGISTEROFPLEDGES table containing the parameters passed here.
     * Only non-null parameters will be applied to the underlying table so preserving any existing entries.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @param the registerOfPledges the RegisterOfPledges object to update in the database.
     * @param userId the userId of the currently logged in user. 
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userId passed as parameter is not valid
     */
    public void updateRegisterOfPledges(RegisterOfPledges registerOfPledges, Long userId) throws AuthorisationException, InvalidUserIDException
    {
        if (Authorisation.isAuthorisedUpdate("RegisterOfPledges", userId, registerOfPledges.getId()) == false)
        {
        	throw new AuthorisationException();
        }
    	
        registerOfPledges.setUpdatedByID(userId);
        registerOfPledges.setDateUpdated(new Date());
        this.sessionFactory.getCurrentSession().update(registerOfPledges);
    }
    
    
    /**
     * Loads a RegisterOfPledgesFilter object based on the participantID of the currently logged in user
     * @param userID the userID is checked for authorisation to view the record. It is also the key to load a against the createdByID
     * column of the underlying record. There should only ever be one or zero filter records per RegisterOfPledges.
     * @ return a RegisterOfPledgesFilter object matching the parameter or a newly constructed, empty object if none can be found
     */
    public RegisterOfPledgesFilter loadRegisterOfPledgesFilter(Long userID) throws RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException
    {
    	RegisterOfPledgesFilter hibernateEntity = null;
    	
        /*if (Authorisation.isAuthorisedView("RegisterOfPledges", userID, REGISTEROFPLEDGESID) == false)
        {
        	throw new AuthorisationException();
        }*/
    	

        if (userID != null)
        {
        	
        	try
        	{
				hibernateEntity = (RegisterOfPledgesFilter)this.sessionFactory.getCurrentSession().load(RegisterOfPledgesFilter.class, userID);
        	}
			catch (Exception ex)
			{
			     throw new RegisterOfPledgesLoadException("RegisterOfPledgesEntityDataManager::loadRegisterOfPledgesFilter", ex);
			}		
    		
            // Load all related singular objects
            
        }
    	
        return hibernateEntity;
    }
    
    /**
     * Creates a new entry in the REGISTEROFPLEDGESFILTER table containing the parameters passed here.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the userID which is also the assigned Id for the newly created record.
     * @throws RegisterOfPledgesSaveException on failure to save.  
     */
    public Long createAndStoreRegisterOfPledgesFilter(RegisterOfPledgesFilter registerOfPledgesFilter,  Long userId)
        throws RegisterOfPledgesSaveException
    {
    	Long returnValue = new Long(0);
        

		try
		{
            registerOfPledgesFilter.setId(userId);
            registerOfPledgesFilter.setCreatedByID(userId);
            registerOfPledgesFilter.setUpdatedByID(userId);
            registerOfPledgesFilter.setDateCreated(new Date());
            registerOfPledgesFilter.setDateUpdated(new Date());

            this.sessionFactory.getCurrentSession().save(registerOfPledgesFilter);
            
            returnValue = registerOfPledgesFilter.getId();
		}
		catch (Exception ex)
		{
		     throw new RegisterOfPledgesSaveException("RegisterOfPledgesEntityDataManager::createAndStoreRegisterOfPledgesFilter", ex);
		}		
		
		return returnValue;
    }
    
    
    /**
     * Updates an existing entry in the REGISTEROFPLEDGESFILTER table and associated tables 
     * containing the parameters passed here. If the entry denoted by the userID does not exist then one is created.
     *	
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws RegisterOfPledgesSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public Long updateRegisterOfPledgesFilter(RegisterOfPledgesFilter registerOfPledgesFilter, Long userId)
        throws RegisterOfPledgesLoadException, RegisterOfPledgesSaveException, AuthorisationException, InvalidUserIDException
    {
    	Long returnValue = new Long(0);
    	
        //if (Authorisation.isAuthorisedUpdate("RegisterOfPledges", userID, REGISTEROFPLEDGESID) == false)
        //{
        //	throw new AuthorisationException();
        //}
    	
		try
		{
			registerOfPledgesFilter.setId(userId);
            registerOfPledgesFilter.setUpdatedByID(userId);
            registerOfPledgesFilter.setDateUpdated(new Date());
            this.sessionFactory.getCurrentSession().update(registerOfPledgesFilter);
            returnValue = registerOfPledgesFilter.getId();
        }
		catch (Exception ex)
		{
		     throw new RegisterOfPledgesSaveException("RegisterOfPledgesDaoImpl::updateRegisterOfPledgesFilter, userId: " + userId, ex);
		}	
		
		return returnValue;	
        
    }
    
	
    
    /**
     * Converts a Comma Seperated Volume (delimited by ",") to a <code>List<code/> of type <code>String<code/>
     */
	private static List<String> convertCommaDelimitedStringToList(String delimitedString) {

		List<String> result = new ArrayList<String>();

		if (!StringUtils.isEmpty(delimitedString)) {
			result = Arrays.asList(StringUtils.delimitedListToStringArray(delimitedString, ","));
		}
		return result;

	}

    /**
     * Converts a List of type String to a Comma Seperated Volume (delimited by ",") 
     */
	private String convertListToCommaDelimitedString(List<String> list) {

		String result = "";
		if (list != null) {
			result = StringUtils.arrayToCommaDelimitedString(list.toArray());
		}
		return result;

	}

    /**
     * Cleans up any Collection Objects created by the Class instance
     */
    protected void finalize() throws Throwable
    {
        super.finalize();
        
    }    
    
}
    
