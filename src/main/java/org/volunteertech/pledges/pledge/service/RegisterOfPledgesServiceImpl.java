package org.volunteertech.pledges.pledge.service;
import com.netgrains.security.Authorisation;
import com.netgrains.security.AuthorisationException;
import com.netgrains.security.InvalidUserIDException;
import org.volunteertech.pledges.pledge.dao.RegisterOfPledges;
import org.volunteertech.pledges.pledge.business.RegisterOfPledgesBo;
import org.volunteertech.pledges.pledge.dao.RegisterOfPledgesFilter;
import org.volunteertech.pledges.pledge.dao.RegisterOfPledgesHistory;
import org.volunteertech.pledges.pledge.dao.RegisterOfPledgesLoadException;
import org.volunteertech.pledges.pledge.dao.RegisterOfPledgesSaveException;

import java.util.Date;
import java.util.List;
import java.util.Set;
import java.math.BigDecimal;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.Locale;

import org.volunteertech.pledges.main.constants.Constants;
import org.springframework.beans.factory.annotation.Autowired;

import org.volunteertech.pledges.users.dao.ApplicationUserDetails;
import org.volunteertech.pledges.users.dao.ApplicationUserDetailsImpl;
import org.volunteertech.pledges.users.service.ApplicationUserDetailsService;

import org.volunteertech.pledges.accommodationpledge.dao.AccommodationPledge;
import org.volunteertech.pledges.accommodationpledge.dao.AccommodationPledgeImpl;
import org.volunteertech.pledges.accommodationpledge.service.AccommodationPledgeService;

import org.volunteertech.pledges.servicepledge.dao.ServicePledge;
import org.volunteertech.pledges.servicepledge.dao.ServicePledgeImpl;
import org.volunteertech.pledges.servicepledge.service.ServicePledgeService;

import org.volunteertech.pledges.goodspledge.dao.GoodsPledge;
import org.volunteertech.pledges.goodspledge.dao.GoodsPledgeImpl;
import org.volunteertech.pledges.goodspledge.service.GoodsPledgeService;

import org.volunteertech.pledges.reference.service.ReferenceService;
  
import org.volunteertech.pledges.localisation.service.MessageResourceService;
  



/**
 * The register of pledges screen is used to add/edit new/existing pledges
 * This Class has been generated by the XSLT processor from the meta data and represents the
 * implementation of the Service  Layer Object for the RegisterOfPledges entity. A Business Object
 * is provided in order to provide a seperation from the Data Access implementation. 
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: * $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
public class RegisterOfPledgesServiceImpl implements RegisterOfPledgesService
{
	/**
	 * The Business Object
	 */
	RegisterOfPledgesBo  registerOfPledgesBo;
	
	/**
	 * Reference service for lookups of drop down contents
	 */
    ReferenceService referenceService;	  
	  
	/**
	 * The message resource service that allows access to locale specific messages
	 */
    MessageResourceService messageResourceService;	  
	  
	@Autowired
	ApplicationUserDetailsService applicationUserDetailsService;
    
	@Autowired
	AccommodationPledgeService accommodationPledgeService;
    
	@Autowired
	ServicePledgeService servicePledgeService;
    
	@Autowired
	GoodsPledgeService goodsPledgeService;
    
    
    /**
     * Default Constructor for the RegisterOfPledges Business Object.
     */
    public RegisterOfPledgesServiceImpl()
    {
    	//Initialise the related Object stores
        
    }
    
	
	/**
	 * Sets the reference Service to perform a user roles lookup
	 */
	public void setReferenceService(ReferenceService referenceService){
		this.referenceService = referenceService;
	}
	
	/**
	 * Returns a reference to reference Service.
	 */
	public ReferenceService getReferenceService(){
		return this.referenceService;
	}	
	  
	/**
	 * Sets the message resource service to perform localization lookups
	 */
	public void setMessageResourceService(MessageResourceService messageResourceService){
		this.messageResourceService = messageResourceService;
	}
	
	/**
	 * Returns a reference to the message resource service.
	 */
	public MessageResourceService getMessageResourceService(){
		return this.messageResourceService;
	}	
      
    
    /**
     * Sets the required Business Object (BO)
     * @param registerOfPledgesBo the registerOfPledgesBo used to access the registerOfPledges entity
     * and it's associations.
     */
    public void setRegisterOfPledgesBo(RegisterOfPledgesBo registerOfPledgesBo){
    	this.registerOfPledgesBo = registerOfPledgesBo;
    }

    /**
     * Returns the required Business Object (BO)
     * @return the RegisterOfPledgesBO used to access the registerOfPledges entity
     * and it's associations.     
     */
    public RegisterOfPledgesBo getRegisterOfPledgesBo(){
    	return this.registerOfPledgesBo;
    }

    /**
     * Loads a RegisterOfPledges object based on the REGISTEROFPLEDGESID column
     * @param REGISTEROFPLEDGESID the primary key for the underlying record.
     * @param userID the userID is checked for authorisation to view the record
     * @ return a RegisterOfPledges object matching the parameter or null if none can be found. The
     * method also returns null if the parameter is null.
     */
    public RegisterOfPledges load(Long registerOfPledgesId, Long loggedInUserId) throws RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException
    {
    	RegisterOfPledges registerOfPledges = null;
    	
        if (Authorisation.isAuthorisedView("RegisterOfPledges", loggedInUserId, registerOfPledgesId) == false)
        {
        	throw new AuthorisationException();
        }
    	

        if (registerOfPledgesId != null)
        {
        	try
        	{
				registerOfPledges = (RegisterOfPledges)this.getRegisterOfPledgesBo().load(registerOfPledgesId, loggedInUserId);
        	}
			catch (Exception ex)
			{
			     throw new RegisterOfPledgesLoadException("RegisterOfPledgesServiceImpl::load(?, ?)", ex);
			}		
    		
            // Load all related singular objects
            
        }
    	
        return registerOfPledges;
    }
    
    


    /**
     * Load all existing RegisterOfPledges objects. 
     * @return List a List of RegisterOfPledges objects.
     */
    public List<RegisterOfPledges> listRegisterOfPledges()
    {
        List<RegisterOfPledges> result = this.getRegisterOfPledgesBo().listRegisterOfPledges();

        return result;
    }
    
    
    
    /**
     * Load existing RegisterOfPledges objects from the database that have a createdByID column
     * that matches the userId parameter.
     * @return List a List of RegisterOfPledges objects that match the userId parameter.
     */
    public List<RegisterOfPledges> listRegisterOfPledgesByCreatedById(Long userId)
    {
        List<RegisterOfPledges> result = this.getRegisterOfPledgesBo().listRegisterOfPledges();

        return result;
    }
    
    
    /**
     * Load all existing RegisterOfPledgesHistory objects for a particular RegisterOfPledges.
     * The <code>List</code> of RegisterOfPledgesHistory objects contains all of the changes that have been made to the
     * RegisterOfPledges object identified by the registerOfPledges parameter'
     * @return List a List of RegisterOfPledgesHistory objects.
     */
    public List<RegisterOfPledgesHistory> listRegisterOfPledgesHistory(Long registerOfPledges) throws Exception
    {
        List<RegisterOfPledgesHistory> result = this.getRegisterOfPledgesBo().listRegisterOfPledgesHistory(registerOfPledges);

        return result;
    }
    
    
    /**
     * Returns a List representing the Set of associated AccommodationPledge objects that represent the accommodationPledges property
     * and that are defined by the one-to-many relationship defined as RegisterOfPledges.accommodationPledges.
     * @return the <code>List</code> of the associated AccommodationPledge objects that represent the accommodationPledges property.
     */
    public List<AccommodationPledge> getAccommodationPledges(Long registerOfPledgesId, Long userId) throws RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException{
    	return this.getRegisterOfPledgesBo().getAccommodationPledges(registerOfPledgesId, userId);
    }
    
    /**
     * Adds a AccommodationPledge to the Set of associated AccommodationPledge objects that represent the accommodationPledges property
     * and that are defined by the one-to-many relationship defined as RegisterOfPledges.accommodationPledges.
     * @return the updated <code>List</code> of the associated AccommodationPledge objects that represent the accommodationPledges property.
     */
    public List<AccommodationPledge> addAccommodationPledgeToAccommodationPledges(AccommodationPledge accommodationPledges, Long registerOfPledgesId, Long userId) throws RegisterOfPledgesSaveException, RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException{
    	return this.getRegisterOfPledgesBo().addAccommodationPledgeToAccommodationPledges(accommodationPledges, registerOfPledgesId, userId);
	}
  
    /**
     * Returns a List representing the Set of associated ServicePledge objects that represent the servicePledges property
     * and that are defined by the one-to-many relationship defined as RegisterOfPledges.servicePledges.
     * @return the <code>List</code> of the associated ServicePledge objects that represent the servicePledges property.
     */
    public List<ServicePledge> getServicePledges(Long registerOfPledgesId, Long userId) throws RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException{
    	return this.getRegisterOfPledgesBo().getServicePledges(registerOfPledgesId, userId);
    }
    
    /**
     * Adds a ServicePledge to the Set of associated ServicePledge objects that represent the servicePledges property
     * and that are defined by the one-to-many relationship defined as RegisterOfPledges.servicePledges.
     * @return the updated <code>List</code> of the associated ServicePledge objects that represent the servicePledges property.
     */
    public List<ServicePledge> addServicePledgeToServicePledges(ServicePledge servicePledges, Long registerOfPledgesId, Long userId) throws RegisterOfPledgesSaveException, RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException{
    	return this.getRegisterOfPledgesBo().addServicePledgeToServicePledges(servicePledges, registerOfPledgesId, userId);
	}
  
    /**
     * Returns a List representing the Set of associated GoodsPledge objects that represent the goodsPledges property
     * and that are defined by the one-to-many relationship defined as RegisterOfPledges.goodsPledges.
     * @return the <code>List</code> of the associated GoodsPledge objects that represent the goodsPledges property.
     */
    public List<GoodsPledge> getGoodsPledges(Long registerOfPledgesId, Long userId) throws RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException{
    	return this.getRegisterOfPledgesBo().getGoodsPledges(registerOfPledgesId, userId);
    }
    
    /**
     * Adds a GoodsPledge to the Set of associated GoodsPledge objects that represent the goodsPledges property
     * and that are defined by the one-to-many relationship defined as RegisterOfPledges.goodsPledges.
     * @return the updated <code>List</code> of the associated GoodsPledge objects that represent the goodsPledges property.
     */
    public List<GoodsPledge> addGoodsPledgeToGoodsPledges(GoodsPledge goodsPledges, Long registerOfPledgesId, Long userId) throws RegisterOfPledgesSaveException, RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException{
    	return this.getRegisterOfPledgesBo().addGoodsPledgeToGoodsPledges(goodsPledges, registerOfPledgesId, userId);
	}
  
    
    /**
     * Either updates an existing entry in the REGISTEROFPLEDGES table or adds a new entry if one does not exist.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws RegisterOfPledgesLoadException if the existing record cannot be loaded
     * @throws RegisterOfPledgesSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public void storeRegisterOfPledges(RegisterOfPledges registerOfPledges, Long userId)
        throws RegisterOfPledgesSaveException, RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException
    {
    	
        if (Authorisation.isAuthorisedUpdate("RegisterOfPledges", userId, registerOfPledges.getId()) == false)
        {
        	throw new AuthorisationException();
        }
    	
		try
		{
			if(registerOfPledges.isNew()){
		    	this.getRegisterOfPledgesBo().createAndStoreRegisterOfPledges(registerOfPledges, userId);
			}else{
		    	this.getRegisterOfPledgesBo().updateRegisterOfPledges(registerOfPledges, userId);
			}
        }
		catch (Exception ex)
		{
		     throw new RegisterOfPledgesSaveException("RegisterOfPledgesEntityDataManager::updateRegisterOfPledges, RegisterOfPledgesID: " + registerOfPledges.getId(), ex);
		}		
        
    }
    
    
    /**
     * Loads a RegisterOfPledgesFilter object based on the participantID of the currently logged in user
     * @param userID the userID is checked for authorisation to view the record. It is also the key to load a against the createdByID
     * column of the underlying record. There should only ever be one or zero filter records per RegisterOfPledges.
     * @ return a RegisterOfPledgesFilter object matching the parameter or a newly constructed, empty object if none can be found
     */
    public RegisterOfPledgesFilter loadRegisterOfPledgesFilter(Long userID) throws RegisterOfPledgesLoadException, AuthorisationException, InvalidUserIDException
    {
    	RegisterOfPledgesFilter registerOfPledgesFilter = null;
    	
        /*if (Authorisation.isAuthorisedView("RegisterOfPledges", userID, REGISTEROFPLEDGESID) == false)
        {
        	throw new AuthorisationException();
        }*/
    	

        if (userID != null)
        {
        	
        	try
        	{
				registerOfPledgesFilter = (RegisterOfPledgesFilter)this.getRegisterOfPledgesBo().loadRegisterOfPledgesFilter(userID);
        	}
			catch (Exception ex)
			{
			     throw new RegisterOfPledgesLoadException("RegisterOfPledgesEntityDataManager::loadRegisterOfPledgesFilter", ex);
			}		
    		
            // Load all related singular objects
            
        }
    	
        return registerOfPledgesFilter;
    }
    
    /**
     * Creates a new entry in the REGISTEROFPLEDGESFILTER table containing the parameters passed here.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the userId which is also the assigned Id for the newly created record.
     * @throws RegisterOfPledgesSaveException on failure to save.  
     */
    public Long createAndStoreRegisterOfPledgesFilter(RegisterOfPledgesFilter registerOfPledgesFilter, Long userId)
        throws RegisterOfPledgesSaveException
    {
    	Long returnValue = new Long(0);
        

		try
		{
            registerOfPledgesFilter.setId(userId);
			registerOfPledgesFilter.setCreatedByID(userId);
            registerOfPledgesFilter.setUpdatedByID(userId);
            registerOfPledgesFilter.setDateCreated(new Date());
            registerOfPledgesFilter.setDateUpdated(new Date());

            returnValue = this.getRegisterOfPledgesBo().createAndStoreRegisterOfPledgesFilter(registerOfPledgesFilter, userId);
		}
		catch (Exception ex)
		{
		     throw new RegisterOfPledgesSaveException("RegisterOfPledgesServiceImpl::createAndStoreRegisterOfPledgesFilter", ex);
		}		
		
		return returnValue;
    }
    
    
    /**
     * Updates an existing entry in the REGISTEROFPLEDGESFILTER table and associated tables 
     * containing the parameters passed here. If the entry denoted by the userID does not exist then one is created.
     *	
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws RegisterOfPledgesSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public Long updateRegisterOfPledgesFilter(RegisterOfPledgesFilter registerOfPledgesFilter, Long userId)
        throws RegisterOfPledgesLoadException, RegisterOfPledgesSaveException, AuthorisationException, InvalidUserIDException
    {
    	Long returnValue = new Long(0);
    	
        //if (Authorisation.isAuthorisedUpdate("RegisterOfPledges", userId, REGISTEROFPLEDGESID) == false)
        //{
        //	throw new AuthorisationException();
        //}
    	
		try
		{
        
			registerOfPledgesFilter.setUpdatedByID(userId);
            registerOfPledgesFilter.setDateUpdated(new Date());
            returnValue = this.getRegisterOfPledgesBo().updateRegisterOfPledgesFilter(registerOfPledgesFilter, userId);
        }
		catch (Exception ex)
		{
		     throw new RegisterOfPledgesSaveException("RegisterOfPledgesServiceImpl::updateRegisterOfPledgesFilter, userId: " + userId, ex);
		}	
		
		return returnValue;	
        
    }

	/**
	 * Translates the referenceId type properties into the locale specific text for display on the front-end.
	 * @param registerOfPledges the dto object to be updated with the locale specific translations
	 * @param locale the Locale to be displayed
	 */    
    public RegisterOfPledges translateReferenceValues(RegisterOfPledges registerOfPledges, Locale locale){
    	
		this.applicationUserDetailsService.translateReferenceValues(registerOfPledges.getApplicationUserDetails(), locale);
		
    	return registerOfPledges;
    }
    
	/**
	 * Translates the referenceId type properties into the locale specific text for display on the front-end.
	 * @param registerOfPledgesList the dto object to be updated with the locale specific translations
	 * @param locale the Locale to be displayed
	 */    
    public List<RegisterOfPledges> translateReferenceValues(List<RegisterOfPledges> registerOfPledgesList, Locale locale){
    	for (RegisterOfPledges registerOfPledges :  registerOfPledgesList){
    		registerOfPledges = translateReferenceValues(registerOfPledges, locale);
    	}
    	
    	return registerOfPledgesList;
    }
    
	
	/**
	 * Translates the referenceId type properties into the locale specific text for display on the front-end.
	 * @param applicationUserDetails the dto object to be updated with the locale specific translations
	 * @param locale the Locale to be displayed
	 */    
    public ApplicationUserDetails translateApplicationUserDetailsReferenceValues(ApplicationUserDetails applicationUserDetails, Locale locale){
    	return this.applicationUserDetailsService.translateReferenceValues(applicationUserDetails, locale);
    }
    
	/**
	 * Translates the referenceId type properties into the locale specific text for display on the front-end.
	 * @param applicationUserDetailsList the dto object to be updated with the locale specific translations
	 * @param locale the Locale to be displayed
	 */    
    public List<ApplicationUserDetails> translateApplicationUserDetailsReferenceValues(List<ApplicationUserDetails> applicationUserDetailsList, Locale locale){
    	return this.applicationUserDetailsService.translateReferenceValues(applicationUserDetailsList, locale);
    }


	/**
	 * Translates the referenceId type properties into the locale specific text for display on the front-end.
	 * @param accommodationPledge the dto object to be updated with the locale specific translations
	 * @param locale the Locale to be displayed
	 */    
    public AccommodationPledge translateAccommodationPledgeReferenceValues(AccommodationPledge accommodationPledge, Locale locale){
    	return this.accommodationPledgeService.translateReferenceValues(accommodationPledge, locale);
    }
    
	/**
	 * Translates the referenceId type properties into the locale specific text for display on the front-end.
	 * @param accommodationPledgeList the dto object to be updated with the locale specific translations
	 * @param locale the Locale to be displayed
	 */    
    public List<AccommodationPledge> translateAccommodationPledgeReferenceValues(List<AccommodationPledge> accommodationPledgeList, Locale locale){
    	return this.accommodationPledgeService.translateReferenceValues(accommodationPledgeList, locale);
    }


	/**
	 * Translates the referenceId type properties into the locale specific text for display on the front-end.
	 * @param servicePledge the dto object to be updated with the locale specific translations
	 * @param locale the Locale to be displayed
	 */    
    public ServicePledge translateServicePledgeReferenceValues(ServicePledge servicePledge, Locale locale){
    	return this.servicePledgeService.translateReferenceValues(servicePledge, locale);
    }
    
	/**
	 * Translates the referenceId type properties into the locale specific text for display on the front-end.
	 * @param servicePledgeList the dto object to be updated with the locale specific translations
	 * @param locale the Locale to be displayed
	 */    
    public List<ServicePledge> translateServicePledgeReferenceValues(List<ServicePledge> servicePledgeList, Locale locale){
    	return this.servicePledgeService.translateReferenceValues(servicePledgeList, locale);
    }


	/**
	 * Translates the referenceId type properties into the locale specific text for display on the front-end.
	 * @param goodsPledge the dto object to be updated with the locale specific translations
	 * @param locale the Locale to be displayed
	 */    
    public GoodsPledge translateGoodsPledgeReferenceValues(GoodsPledge goodsPledge, Locale locale){
    	return this.goodsPledgeService.translateReferenceValues(goodsPledge, locale);
    }
    
	/**
	 * Translates the referenceId type properties into the locale specific text for display on the front-end.
	 * @param goodsPledgeList the dto object to be updated with the locale specific translations
	 * @param locale the Locale to be displayed
	 */    
    public List<GoodsPledge> translateGoodsPledgeReferenceValues(List<GoodsPledge> goodsPledgeList, Locale locale){
    	return this.goodsPledgeService.translateReferenceValues(goodsPledgeList, locale);
    }


    
    /**
     * Cleans up any Collection Objects created by the Class instance
     */
    protected void finalize() throws Throwable
    {
        super.finalize();
        
    }    
    
    
}
    
