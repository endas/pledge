package org.volunteertech.pledges.servicepledge.service;
import com.netgrains.security.AuthorisationException;
import com.netgrains.security.InvalidUserIDException;
import org.volunteertech.pledges.servicepledge.dao.ServicePledge;
import org.volunteertech.pledges.servicepledge.business.ServicePledgeBo;
import org.volunteertech.pledges.servicepledge.dao.ServicePledgeFilter;
import org.volunteertech.pledges.servicepledge.dao.ServicePledgeHistory;
import org.volunteertech.pledges.servicepledge.dao.ServicePledgeLoadException;
import org.volunteertech.pledges.servicepledge.dao.ServicePledgeSaveException;
import java.util.List;
import java.util.Set;
import java.util.Date;
import java.math.BigDecimal;
import java.util.Locale;


import org.volunteertech.pledges.reference.service.ReferenceService;
  
import org.volunteertech.pledges.localisation.service.MessageResourceService;
  


/**
 * The pledge services screen is used to add/edit a new/existing pledge of services
 * This Interface has been generated by the XSLT processor from the meta data and represents the
 * interface of the Service  Layer Object for the ServicePledge entity. A Business Object
 * is provided in order to provide a seperation from the Data Access implementation. 
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: * $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
public interface ServicePledgeService
{
    
	/**
	 * Sets the reference Service to perform a user roles lookup
	 */
	public void setReferenceService(ReferenceService referenceService);
	
	/**
	 * Returns a reference to reference Service.
	 */
	public ReferenceService getReferenceService();
	  
	/**
	 * Sets the message resource service to perform localization lookups
	 */
	public void setMessageResourceService(MessageResourceService messageResourceService);
	
	/**
	 * Returns a reference to the message resource service.
	 */
	public MessageResourceService getMessageResourceService();
  
    
    /**
     * Sets the required Business Object (BO)
     * @param servicePledgeBo the servicePledgeBo used to access the servicePledge entity
     * and it's associations.
     */
    public void setServicePledgeBo(ServicePledgeBo servicePledgeBo);
    

    /**
     * Returns the required Business Object (BO)
     * @return the ServicePledgeBo used to access the servicePledge entity
     * and it's associations.
     */
    public ServicePledgeBo getServicePledgeBo();
    
    

    /**
     * Loads a ServicePledge object based on the SERVICEPLEDGEID column
     * @param SERVICEPLEDGEID the primary key for the underlying record.
     * @param userID the userID is checked for authorisation to view the record
     * @ return a ServicePledge object matching the parameter or null if none can be found. The
     * method also returns null if the parameter is null.
     */
    public ServicePledge load(Long servicePledgeID, Long loggedInUserId) throws ServicePledgeLoadException, AuthorisationException, InvalidUserIDException;
    
    

    /**
     * Load all existing ServicePledge objects. 
     * @return List a List of ServicePledge objects.
     */
    public List<ServicePledge> listServicePledge();
    
    
    /**
     * Returns a <code>List</code> of ServicePledge objects that have a matching pledgeServiceLevelOne
     * @return List a List of ServicePledge objects that match the pledgeServiceLevelOne property given as parameter.
     * @param pledgeServiceLevelOne the pledgeServiceLevelOne on which to match the required records.
     */
    public List<ServicePledge> listServicePledgeByPledgeServiceLevelOne(Long pledgeServiceLevelOne);

    /**
     * Returns a <code>List</code> of ServicePledge objects that have a matching pledgeServiceLevelTwo
     * @return List a List of ServicePledge objects that match the pledgeServiceLevelTwo property given as parameter.
     * @param pledgeServiceLevelTwo the pledgeServiceLevelTwo on which to match the required records.
     */
    public List<ServicePledge> listServicePledgeByPledgeServiceLevelTwo(Long pledgeServiceLevelTwo);

    /**
     * Returns a <code>List</code> of ServicePledge objects that have a matching pledgeServiceLevelThree
     * @return List a List of ServicePledge objects that match the pledgeServiceLevelThree property given as parameter.
     * @param pledgeServiceLevelThree the pledgeServiceLevelThree on which to match the required records.
     */
    public List<ServicePledge> listServicePledgeByPledgeServiceLevelThree(Long pledgeServiceLevelThree);

    /**
     * Returns a <code>List</code> of ServicePledge objects that have a matching additionalInformation
     * @return List a List of ServicePledge objects that match the additionalInformation property given as parameter.
     * @param additionalInformation the additionalInformation on which to match the required records.
     */
    public List<ServicePledge> listServicePledgeByAdditionalInformation(String additionalInformation);

    /**
     * Returns a <code>List</code> of ServicePledge objects that have a matching pledgeServiceQualification
     * @return List a List of ServicePledge objects that match the pledgeServiceQualification property given as parameter.
     * @param pledgeServiceQualification the pledgeServiceQualification on which to match the required records.
     */
    public List<ServicePledge> listServicePledgeByPledgeServiceQualification(String pledgeServiceQualification);

    /**
     * Returns a <code>List</code> of ServicePledge objects that have a matching pledgeServiceDateAvailable
     * @return List a List of ServicePledge objects that match the pledgeServiceDateAvailable property given as parameter.
     * @param pledgeServiceDateAvailable the pledgeServiceDateAvailable on which to match the required records.
     */
    public List<ServicePledge> listServicePledgeByPledgeServiceDateAvailable(Date pledgeServiceDateAvailable);

    /**
     * Returns a <code>List</code> of ServicePledge objects that have a matching pledgeServiceHoursPerWeek
     * @return List a List of ServicePledge objects that match the pledgeServiceHoursPerWeek property given as parameter.
     * @param pledgeServiceHoursPerWeek the pledgeServiceHoursPerWeek on which to match the required records.
     */
    public List<ServicePledge> listServicePledgeByPledgeServiceHoursPerWeek(Long pledgeServiceHoursPerWeek);

    
    
    /**
     * Load existing ServicePledge objects from the database that have a createdByID column
     * that matches the userId parameter.
     * @return List a List of ServicePledge objects that match the userId parameter.
     */
    public List<ServicePledge> listServicePledgeByCreatedById(Long userId);
    
    
    /**
     * Load all existing ServicePledgeHistory objects for a particular ServicePledge.
     * The <code>List</code> of ServicePledgeHistory objects contains all of the changes that have been made to the
     * ServicePledge object identified by the servicePledge parameter'
     * @return List a List of ServicePledgeHistory objects.
     */
    public List<ServicePledgeHistory> listServicePledgeHistory(Long servicePledge) throws Exception;
    
    
    
    /**
     * Either updates an existing entry in the SERVICEPLEDGE table or adds a new entry if one does not exist.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws ServicePledgeLoadException if the existing record cannot be loaded
     * @throws ServicePledgeSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public void storeServicePledge(ServicePledge servicePledge, Long userId)
        throws ServicePledgeSaveException, ServicePledgeLoadException, AuthorisationException, InvalidUserIDException;
    
    
    /**
     * Loads a ServicePledgeFilter object based on the participantID of the currently logged in user
     * @param userId the userId is checked for authorisation to view the record. It is also the key to load a against the createdByID
     * column of the underlying record. There should only ever be one or zero filter records per ServicePledge.
     * @ return a ServicePledgeFilter object matching the parameter or a newly constructed, empty object if none can be found
     */
    public ServicePledgeFilter loadServicePledgeFilter(Long userId) throws ServicePledgeLoadException, AuthorisationException, InvalidUserIDException;


    
    /**
     * Creates a new entry in the SERVICEPLEDGEFILTER table containing the parameters passed here.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the userID which is also the assigned Id for the newly created record.
     * @throws ServicePledgeSaveException on failure to save.  
     */
    public Long createAndStoreServicePledgeFilter(ServicePledgeFilter servicePledgeFilter, Long userId)
        throws ServicePledgeSaveException;
    
    
    /**
     * Updates an existing entry in the SERVICEPLEDGEFILTER table and associated tables 
     * containing the parameters passed here. If the entry denoted by the userID does not exist then one is created.
     *	
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws ServicePledgeSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public Long updateServicePledgeFilter(ServicePledgeFilter servicePledgeFilter, Long userId)
        throws ServicePledgeLoadException, ServicePledgeSaveException, AuthorisationException, InvalidUserIDException;
    

	/**
	 * Translates the referenceId type properties into the locale specific text for display on the front-end.
	 * @param servicePledge the dto object to be updated with the locale specific translations
	 * @param locale the Locale to be displayed
	 * @return the same ServicePledge object but with the locale translation fields populated with the message
	 * that is relevant to the current locale
	 */    
    public ServicePledge translateReferenceValues(ServicePledge servicePledge, Locale locale);
    
	/**
	 * Translates the referenceId type properties into the locale specific text for display on the front-end.
	 * @param servicePledgeList the dto object to be updated with the locale specific translations
	 * @param locale the Locale to be displayed
	 */    
    public List<ServicePledge> translateReferenceValues(List<ServicePledge> servicePledgeList, Locale locale);
    
	
    
}    
