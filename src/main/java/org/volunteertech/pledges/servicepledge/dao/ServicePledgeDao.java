package org.volunteertech.pledges.servicepledge.dao;
import org.hibernate.SessionFactory;
import com.netgrains.security.AuthorisationException;
import com.netgrains.security.InvalidUserIDException;
import org.volunteertech.pledges.servicepledge.dao.ServicePledge;
import org.volunteertech.pledges.servicepledge.dao.ServicePledgeHistory;
import org.volunteertech.pledges.servicepledge.dao.ServicePledgeLoadException;
import org.volunteertech.pledges.servicepledge.dao.ServicePledgeSaveException;
import java.util.List;
import java.util.Set;
import java.util.Date;
import java.math.BigDecimal;

  
import org.volunteertech.pledges.pledge.dao.RegisterOfPledges;



/**
 * The pledge services screen is used to add/edit a new/existing pledge of services
 * This Interface has been generated by the XSLT processor from the meta data and represents the
 * interface of the data access object(DAO) for the ServicePledge entity.
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: * $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
public interface ServicePledgeDao
{

    /**
     * Allows Spring to set the container managed SessionFactory instance
     * @param a Spring managed SessionFactory instance
     */    
    public void setSessionFactory(SessionFactory sessionFactory);


    /**
     * Loads a ServicePledge object based on the servicePledgeId column
     * @param servicePledgeId the primary key for the underlying record.
     * @ return a ServicePledge object matching the parameter or null if none can be found. The
     * method also returns null if the parameter is null.
     */
    public ServicePledge load(Long servicePledgeId, Long loggedInUserId) throws AuthorisationException, InvalidUserIDException;
    

    /**
     * Load all existing ServicePledge objects from the database. Hibernate will generate the appropriate SQL,
     * send it to the database and populate a List of ServicePledge objects with the data.
     * @return List a List of ServicePledge objects.
     */
    public List<ServicePledge> listServicePledge();
    
    
    /**
     * Load existing ServicePledge objects from the database that have a pledgeServiceLevelOne column
     * that matches the pledgeServiceLevelOne parameter.
     * @return List a List of ServicePledge objects that match the pledgeServiceLevelOne parameter.
     */
    public List<ServicePledge> listServicePledgeByPledgeServiceLevelOne(Long pledgeServiceLevelOne);

    /**
     * Load existing ServicePledge objects from the database that have a pledgeServiceLevelTwo column
     * that matches the pledgeServiceLevelTwo parameter.
     * @return List a List of ServicePledge objects that match the pledgeServiceLevelTwo parameter.
     */
    public List<ServicePledge> listServicePledgeByPledgeServiceLevelTwo(Long pledgeServiceLevelTwo);

    /**
     * Load existing ServicePledge objects from the database that have a pledgeServiceLevelThree column
     * that matches the pledgeServiceLevelThree parameter.
     * @return List a List of ServicePledge objects that match the pledgeServiceLevelThree parameter.
     */
    public List<ServicePledge> listServicePledgeByPledgeServiceLevelThree(Long pledgeServiceLevelThree);

    /**
     * Load existing ServicePledge objects from the database that have a additionalInformation column
     * that matches the additionalInformation parameter.
     * @return List a List of ServicePledge objects that match the additionalInformation parameter.
     */
    public List<ServicePledge> listServicePledgeByAdditionalInformation(String additionalInformation);

    /**
     * Load existing ServicePledge objects from the database that have a pledgeServiceQualification column
     * that matches the pledgeServiceQualification parameter.
     * @return List a List of ServicePledge objects that match the pledgeServiceQualification parameter.
     */
    public List<ServicePledge> listServicePledgeByPledgeServiceQualification(String pledgeServiceQualification);

    /**
     * Load existing ServicePledge objects from the database that have a pledgeServiceDateAvailable column
     * that matches the pledgeServiceDateAvailable parameter.
     * @return List a List of ServicePledge objects that match the pledgeServiceDateAvailable parameter.
     */
    public List<ServicePledge> listServicePledgeByPledgeServiceDateAvailable(Date pledgeServiceDateAvailable);

    /**
     * Load existing ServicePledge objects from the database that have a pledgeServiceHoursPerWeek column
     * that matches the pledgeServiceHoursPerWeek parameter.
     * @return List a List of ServicePledge objects that match the pledgeServiceHoursPerWeek parameter.
     */
    public List<ServicePledge> listServicePledgeByPledgeServiceHoursPerWeek(Long pledgeServiceHoursPerWeek);

    
    /**
     * Load existing ServicePledge objects from the database that have a createdByID column
     * that matches the userId parameter.
     * @return List a List of ServicePledge objects that match the userId parameter.
     */
    public List<ServicePledge> listServicePledgeByCreatedById(Long userId);
    
    
    /**
     * Load all existing ServicePledgeHistory objects for a particular ServicePledge from the database.
     * Hibernate will generate the appropriate SQL,
     * send it to the database and populate ServicePledgeHistory objects with the data.
     * @return List a List of ServicePledgeHistory objects.
     */
    public List<ServicePledgeHistory> listServicePledgeHistory(Long servicePledge);
    
    
    /**
     * Load a <code>List</code> of ServicePledge objects from the database that match the
     * registerOfPledgesId parameter, the RegisterOfPledges and the ServicePledge being related by an association.
     * @return a <code>List</code> of ServicePledge objects that match the registerOfPledgesId parameter.
     */
    public List<ServicePledge> listServicePledgeByRegisterOfPledgesId(Long  registerOfPledgesId);
  
    
    
    /**
     * Creates a new entry in the SERVICEPLEDGE table containing the parameters passed here.
     *
     * @param userID the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the database generated Id of the newly created record.
     */
    public Long createAndStoreServicePledge(ServicePledge servicePledge, Long userId);


    /**
     * Updates an existing entry in the SERVICEPLEDGE table containing the parameters passed here.
     * Only non-null parameters will be applied to the underlying table so preserving any existing entries.
     * @param the servicePledge the ServicePledge object to update in the database.
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     */
    public void updateServicePledge(ServicePledge servicePledge, Long userId) throws AuthorisationException, InvalidUserIDException;
    
    
    /**
     * Loads a ServicePledgeFilter object based on the participantID of the currently logged in user
     * @param userID the userID is checked for authorisation to view the record. It is also the key to load a against the createdByID
     * column of the underlying record. There should only ever be one or zero filter records per ServicePledge.
     * @ return a ServicePledgeFilter object matching the parameter or a newly constructed, empty object if none can be found
     */
    public ServicePledgeFilter loadServicePledgeFilter(Long userID) throws ServicePledgeLoadException, AuthorisationException, InvalidUserIDException;


    
    /**
     * Creates a new entry in the SERVICEPLEDGEFILTER table containing the parameters passed here.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the userId which is also the assigned Id for the newly created record.
     * @throws ServicePledgeSaveException on failure to save.  
     */
    public Long createAndStoreServicePledgeFilter(ServicePledgeFilter servicePledgeFilter, Long userId)
        throws ServicePledgeSaveException;
    
    
    /**
     * Updates an existing entry in the SERVICEPLEDGEFILTER table and associated tables 
     * containing the parameters passed here. If the entry denoted by the userID does not exist then one is created.
     *	
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws ServicePledgeSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public Long updateServicePledgeFilter(ServicePledgeFilter servicePledgeFilter, Long userId)
        throws ServicePledgeLoadException, ServicePledgeSaveException, AuthorisationException, InvalidUserIDException;
    
	
	/**
	 * Returns a List of the RegisterOfPledges that own the ServicePledge identified by the
	 * id given as a parameter.
	 * @param servicepledgeId the id of the ServicePledge for which the RegisterOfPledges should be resolved.
	 * @param userId the userId of the currently logged in user.
	 */
	public List<RegisterOfPledges> listRegisterOfPledgesByServicePledgeId(Long servicepledgeId, Long userId);

}
    
