package org.volunteertech.pledges.startup.service;
import com.netgrains.security.AuthorisationException;
import com.netgrains.security.InvalidUserIDException;
import org.volunteertech.pledges.startup.dao.Landing;
import org.volunteertech.pledges.startup.business.LandingBo;
import org.volunteertech.pledges.startup.dao.LandingFilter;
import org.volunteertech.pledges.startup.dao.LandingHistory;
import org.volunteertech.pledges.startup.dao.LandingLoadException;
import org.volunteertech.pledges.startup.dao.LandingSaveException;
import java.util.List;
import java.util.Set;
import java.util.Date;
import java.math.BigDecimal;
import java.util.Locale;


import org.volunteertech.pledges.reference.service.ReferenceService;
  
import org.volunteertech.pledges.localisation.service.MessageResourceService;
  


/**
 * The main web screen
 * This Interface has been generated by the XSLT processor from the meta data and represents the
 * interface of the Service  Layer Object for the Landing entity. A Business Object
 * is provided in order to provide a seperation from the Data Access implementation. 
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: * $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
public interface LandingService
{
    
	/**
	 * Sets the reference Service to perform a user roles lookup
	 */
	public void setReferenceService(ReferenceService referenceService);
	
	/**
	 * Returns a reference to reference Service.
	 */
	public ReferenceService getReferenceService();
	  
	/**
	 * Sets the message resource service to perform localization lookups
	 */
	public void setMessageResourceService(MessageResourceService messageResourceService);
	
	/**
	 * Returns a reference to the message resource service.
	 */
	public MessageResourceService getMessageResourceService();
  
    
    /**
     * Sets the required Business Object (BO)
     * @param landingBo the landingBo used to access the landing entity
     * and it's associations.
     */
    public void setLandingBo(LandingBo landingBo);
    

    /**
     * Returns the required Business Object (BO)
     * @return the LandingBo used to access the landing entity
     * and it's associations.
     */
    public LandingBo getLandingBo();
    
    

    /**
     * Loads a Landing object based on the LANDINGID column
     * @param LANDINGID the primary key for the underlying record.
     * @param userID the userID is checked for authorisation to view the record
     * @ return a Landing object matching the parameter or null if none can be found. The
     * method also returns null if the parameter is null.
     */
    public Landing load(Long landingID, Long loggedInUserId) throws LandingLoadException, AuthorisationException, InvalidUserIDException;
    
    

    /**
     * Load all existing Landing objects. 
     * @return List a List of Landing objects.
     */
    public List<Landing> listLanding();
    
    
    
    
    /**
     * Load existing Landing objects from the database that have a createdByID column
     * that matches the userId parameter.
     * @return List a List of Landing objects that match the userId parameter.
     */
    public List<Landing> listLandingByCreatedById(Long userId);
    
    
    /**
     * Load all existing LandingHistory objects for a particular Landing.
     * The <code>List</code> of LandingHistory objects contains all of the changes that have been made to the
     * Landing object identified by the landing parameter'
     * @return List a List of LandingHistory objects.
     */
    public List<LandingHistory> listLandingHistory(Long landing) throws Exception;
    
    
    
    /**
     * Either updates an existing entry in the LANDING table or adds a new entry if one does not exist.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws LandingLoadException if the existing record cannot be loaded
     * @throws LandingSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public void storeLanding(Landing landing, Long userId)
        throws LandingSaveException, LandingLoadException, AuthorisationException, InvalidUserIDException;
    
    
    /**
     * Loads a LandingFilter object based on the participantID of the currently logged in user
     * @param userId the userId is checked for authorisation to view the record. It is also the key to load a against the createdByID
     * column of the underlying record. There should only ever be one or zero filter records per Landing.
     * @ return a LandingFilter object matching the parameter or a newly constructed, empty object if none can be found
     */
    public LandingFilter loadLandingFilter(Long userId) throws LandingLoadException, AuthorisationException, InvalidUserIDException;


    
    /**
     * Creates a new entry in the LANDINGFILTER table containing the parameters passed here.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the userID which is also the assigned Id for the newly created record.
     * @throws LandingSaveException on failure to save.  
     */
    public Long createAndStoreLandingFilter(LandingFilter landingFilter, Long userId)
        throws LandingSaveException;
    
    
    /**
     * Updates an existing entry in the LANDINGFILTER table and associated tables 
     * containing the parameters passed here. If the entry denoted by the userID does not exist then one is created.
     *	
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws LandingSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public Long updateLandingFilter(LandingFilter landingFilter, Long userId)
        throws LandingLoadException, LandingSaveException, AuthorisationException, InvalidUserIDException;
    

	/**
	 * Translates the referenceId type properties into the locale specific text for display on the front-end.
	 * @param landing the dto object to be updated with the locale specific translations
	 * @param locale the Locale to be displayed
	 * @return the same Landing object but with the locale translation fields populated with the message
	 * that is relevant to the current locale
	 */    
    public Landing translateReferenceValues(Landing landing, Locale locale);
    
	/**
	 * Translates the referenceId type properties into the locale specific text for display on the front-end.
	 * @param landingList the dto object to be updated with the locale specific translations
	 * @param locale the Locale to be displayed
	 */    
    public List<Landing> translateReferenceValues(List<Landing> landingList, Locale locale);
    
	
    
}    
