package org.volunteertech.pledges.startup.dao;
import org.hibernate.SessionFactory;
import com.netgrains.security.Authorisation;
import com.netgrains.security.AuthorisationException;
import com.netgrains.security.InvalidUserIDException;
import org.volunteertech.pledges.startup.dao.Landing;
import org.volunteertech.pledges.startup.dao.LandingHistory;
import org.volunteertech.pledges.startup.dao.LandingLoadException;
import org.volunteertech.pledges.startup.dao.LandingSaveException;

import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.ArrayList;
import java.util.Arrays;
import java.math.BigDecimal;

import org.springframework.stereotype.Repository;
import org.springframework.util.StringUtils;





/**
 * The main web screen
 * This class has been generated by the XSLT processor from the metadata and represents the
 * implementation of the data access object for the Landing entity.
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: * $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
@Repository 
public class LandingDaoImpl implements LandingDao
{
    /**
     * The Hibernate SessionFactory instance
     */
    private SessionFactory sessionFactory;
    
    
    

    /**
     * Default Constructor for the Landing entity data manager
     */
    public LandingDaoImpl()
    {
    	//Initialise the related Object stores
        
    }
    

    /**
     * Allows Spring to set the container managed SessionFactory instance
     * @param a Spring managed SessionFactory instance
     */    
    public void setSessionFactory(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }


    /**
     * Loads a Landing object based on the landingId column
     * @param LandingId the primary key for the underlying record.
     * @ return a Landing object matching the parameter or null if none can be found. The
     * method also returns null if the parameter is null.
     */
    public Landing load(Long landingId, Long loggedInUserId) throws AuthorisationException, InvalidUserIDException
    {
        if (Authorisation.isAuthorisedView("Landing", loggedInUserId, landingId) == false)
        {
        	throw new AuthorisationException();
        }
    
    	Landing hibernateEntity = null;
    	
        if (landingId != null)
        {
			hibernateEntity = (Landing)this.sessionFactory.getCurrentSession().get(LandingImpl.class, landingId);

            // Load all related singular objects
            
        }
    	
        return hibernateEntity;
    }
    
    
    

    /**
     * Load all existing Landing objects from the database. Hibernate will generate the appropriate SQL,
     * send it to the database and populate Landing objects with the data.
     * @return List a List of Landing objects.
     */
    public List<Landing> listLanding()
    {
        @SuppressWarnings("unchecked")
        List<Landing> result = this.sessionFactory.getCurrentSession().createQuery("from LandingImpl as landing order by landing.id asc").list();

        return result;
    }

    
    
    /**
     * Load existing Landing objects from the database that have a createdByID column
     * that matches the createdById parameter.
     * @return List a List of Landing objects that match the createdById parameter.
     */
    public List<Landing> listLandingByCreatedById(Long userId)
    {
        @SuppressWarnings("unchecked")
        List<Landing> result = this.sessionFactory.getCurrentSession().createQuery("from LandingImpl as landing where landing.createdByID = :userId order by landing.id asc").setParameter("userId", userId).list();

        return result;
    }
    
    
    /**
     * Load all existing LandingHistory objects for a particular Landing from the database.
     * Hibernate will generate the appropriate SQL,
     * send it to the database and populate a List of LandingHistory objects with the data.
     * @return List a List of LandingHistory objects.
     */
    public List<LandingHistory> listLandingHistory(Long landing)
    {
        
        @SuppressWarnings("unchecked")
        List<LandingHistory> result = this.sessionFactory.getCurrentSession().createQuery("from LandingHistory as landingHistory where landingHistory.landingId = ? order by landingHistory.id asc").setLong(0, landing).list();

        return result;
    }
    
    
    
    /**
     * Creates a new entry in the LANDING table containing the parameters passed here.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the database generated Id of the newly created record.
     * @throws LandingSaveException on failure to save.  
     */
    public Long createAndStoreLanding(Landing landing, Long userId)
    {
    	Long returnValue = new Long(0);

        landing.setCreatedByID(userId);
        landing.setUpdatedByID(userId);
        landing.setDateCreated(new Date());
        landing.setDateUpdated(new Date());
        
        this.sessionFactory.getCurrentSession().save(landing);
            
        returnValue = landing.getId();
		
		return returnValue;
    }


    /**
     * Updates an existing entry in the LANDING table containing the parameters passed here.
     * Only non-null parameters will be applied to the underlying table so preserving any existing entries.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @param the landing the Landing object to update in the database.
     * @param userId the userId of the currently logged in user. 
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userId passed as parameter is not valid
     */
    public void updateLanding(Landing landing, Long userId) throws AuthorisationException, InvalidUserIDException
    {
        if (Authorisation.isAuthorisedUpdate("Landing", userId, landing.getId()) == false)
        {
        	throw new AuthorisationException();
        }
    	
        landing.setUpdatedByID(userId);
        landing.setDateUpdated(new Date());
        this.sessionFactory.getCurrentSession().update(landing);
    }
    
    
    /**
     * Loads a LandingFilter object based on the participantID of the currently logged in user
     * @param userID the userID is checked for authorisation to view the record. It is also the key to load a against the createdByID
     * column of the underlying record. There should only ever be one or zero filter records per Landing.
     * @ return a LandingFilter object matching the parameter or a newly constructed, empty object if none can be found
     */
    public LandingFilter loadLandingFilter(Long userID) throws LandingLoadException, AuthorisationException, InvalidUserIDException
    {
    	LandingFilter hibernateEntity = null;
    	
        /*if (Authorisation.isAuthorisedView("Landing", userID, LANDINGID) == false)
        {
        	throw new AuthorisationException();
        }*/
    	

        if (userID != null)
        {
        	
        	try
        	{
				hibernateEntity = (LandingFilter)this.sessionFactory.getCurrentSession().load(LandingFilter.class, userID);
        	}
			catch (Exception ex)
			{
			     throw new LandingLoadException("LandingEntityDataManager::loadLandingFilter", ex);
			}		
    		
            // Load all related singular objects
            
        }
    	
        return hibernateEntity;
    }
    
    /**
     * Creates a new entry in the LANDINGFILTER table containing the parameters passed here.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the userID which is also the assigned Id for the newly created record.
     * @throws LandingSaveException on failure to save.  
     */
    public Long createAndStoreLandingFilter(LandingFilter landingFilter,  Long userId)
        throws LandingSaveException
    {
    	Long returnValue = new Long(0);
        

		try
		{
            landingFilter.setId(userId);
            landingFilter.setCreatedByID(userId);
            landingFilter.setUpdatedByID(userId);
            landingFilter.setDateCreated(new Date());
            landingFilter.setDateUpdated(new Date());

            this.sessionFactory.getCurrentSession().save(landingFilter);
            
            returnValue = landingFilter.getId();
		}
		catch (Exception ex)
		{
		     throw new LandingSaveException("LandingEntityDataManager::createAndStoreLandingFilter", ex);
		}		
		
		return returnValue;
    }
    
    
    /**
     * Updates an existing entry in the LANDINGFILTER table and associated tables 
     * containing the parameters passed here. If the entry denoted by the userID does not exist then one is created.
     *	
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws LandingSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public Long updateLandingFilter(LandingFilter landingFilter, Long userId)
        throws LandingLoadException, LandingSaveException, AuthorisationException, InvalidUserIDException
    {
    	Long returnValue = new Long(0);
    	
        //if (Authorisation.isAuthorisedUpdate("Landing", userID, LANDINGID) == false)
        //{
        //	throw new AuthorisationException();
        //}
    	
		try
		{
			landingFilter.setId(userId);
            landingFilter.setUpdatedByID(userId);
            landingFilter.setDateUpdated(new Date());
            this.sessionFactory.getCurrentSession().update(landingFilter);
            returnValue = landingFilter.getId();
        }
		catch (Exception ex)
		{
		     throw new LandingSaveException("LandingDaoImpl::updateLandingFilter, userId: " + userId, ex);
		}	
		
		return returnValue;	
        
    }
    
	
    
    /**
     * Converts a Comma Seperated Volume (delimited by ",") to a <code>List<code/> of type <code>String<code/>
     */
	private static List<String> convertCommaDelimitedStringToList(String delimitedString) {

		List<String> result = new ArrayList<String>();

		if (!StringUtils.isEmpty(delimitedString)) {
			result = Arrays.asList(StringUtils.delimitedListToStringArray(delimitedString, ","));
		}
		return result;

	}

    /**
     * Converts a List of type String to a Comma Seperated Volume (delimited by ",") 
     */
	private String convertListToCommaDelimitedString(List<String> list) {

		String result = "";
		if (list != null) {
			result = StringUtils.arrayToCommaDelimitedString(list.toArray());
		}
		return result;

	}

    /**
     * Cleans up any Collection Objects created by the Class instance
     */
    protected void finalize() throws Throwable
    {
        super.finalize();
        
    }    
    
}
    
