package org.volunteertech.pledges.users.dao;
import org.hibernate.SessionFactory;
import com.netgrains.security.Authorisation;
import com.netgrains.security.AuthorisationException;
import com.netgrains.security.InvalidUserIDException;
import org.volunteertech.pledges.users.dao.ApplicationUserDetails;
import org.volunteertech.pledges.users.dao.ApplicationUserDetailsHistory;
import org.volunteertech.pledges.users.dao.ApplicationUserDetailsLoadException;
import org.volunteertech.pledges.users.dao.ApplicationUserDetailsSaveException;

import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.ArrayList;
import java.util.Arrays;
import java.math.BigDecimal;

import org.springframework.stereotype.Repository;
import org.springframework.util.StringUtils;


import org.volunteertech.pledges.pledge.dao.RegisterOfPledges;




/**
 * The contact information
 * This class has been generated by the XSLT processor from the metadata and represents the
 * implementation of the data access object for the ApplicationUserDetails entity.
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: * $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
@Repository 
public class ApplicationUserDetailsDaoImpl implements ApplicationUserDetailsDao
{
    /**
     * The Hibernate SessionFactory instance
     */
    private SessionFactory sessionFactory;
    
    
    

    /**
     * Default Constructor for the ApplicationUserDetails entity data manager
     */
    public ApplicationUserDetailsDaoImpl()
    {
    	//Initialise the related Object stores
        
    }
    

    /**
     * Allows Spring to set the container managed SessionFactory instance
     * @param a Spring managed SessionFactory instance
     */    
    public void setSessionFactory(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }


    /**
     * Loads a ApplicationUserDetails object based on the applicationUserDetailsId column
     * @param ApplicationUserDetailsId the primary key for the underlying record.
     * @ return a ApplicationUserDetails object matching the parameter or null if none can be found. The
     * method also returns null if the parameter is null.
     */
    public ApplicationUserDetails load(Long applicationUserDetailsId, Long loggedInUserId) throws AuthorisationException, InvalidUserIDException
    {
        if (Authorisation.isAuthorisedView("ApplicationUserDetails", loggedInUserId, applicationUserDetailsId) == false)
        {
        	throw new AuthorisationException();
        }
    
    	ApplicationUserDetails hibernateEntity = null;
    	
        if (applicationUserDetailsId != null)
        {
			hibernateEntity = (ApplicationUserDetails)this.sessionFactory.getCurrentSession().get(ApplicationUserDetailsImpl.class, applicationUserDetailsId);

            // Load all related singular objects
            
        }
    	
        return hibernateEntity;
    }
    
    
    

    /**
     * Load all existing ApplicationUserDetails objects from the database. Hibernate will generate the appropriate SQL,
     * send it to the database and populate ApplicationUserDetails objects with the data.
     * @return List a List of ApplicationUserDetails objects.
     */
    public List<ApplicationUserDetails> listApplicationUserDetails()
    {
        @SuppressWarnings("unchecked")
        List<ApplicationUserDetails> result = this.sessionFactory.getCurrentSession().createQuery("from ApplicationUserDetailsImpl as applicationUserDetails order by applicationUserDetails.id asc").list();

        return result;
    }

    
    /**
     * Load existing ApplicationUserDetails objects from the database that have a contactName column
     * that matches the contactName parameter.
     * @return List a List of ApplicationUserDetails objects that match the contactName parameter.
     */
    public List<ApplicationUserDetails> listApplicationUserDetailsByContactName(String contactName)
    {
        @SuppressWarnings("unchecked")
        List<ApplicationUserDetails> result = this.sessionFactory.getCurrentSession().createQuery("from ApplicationUserDetailsImpl as applicationUserDetails where applicationUserDetails.contactName = :contactname order by applicationUserDetails.id asc").setParameter("contactname", contactName).list();

        return result;
    }

    /**
     * Load existing ApplicationUserDetails objects from the database that have a representOrganisation column
     * that matches the representOrganisation parameter.
     * @return List a List of ApplicationUserDetails objects that match the representOrganisation parameter.
     */
    public List<ApplicationUserDetails> listApplicationUserDetailsByRepresentOrganisation(Long representOrganisation)
    {
        @SuppressWarnings("unchecked")
        List<ApplicationUserDetails> result = this.sessionFactory.getCurrentSession().createQuery("from ApplicationUserDetailsImpl as applicationUserDetails where applicationUserDetails.representOrganisation = :representorganisation order by applicationUserDetails.id asc").setParameter("representorganisation", representOrganisation).list();

        return result;
    }

    /**
     * Load existing ApplicationUserDetails objects from the database that have a telephoneNumber column
     * that matches the telephoneNumber parameter.
     * @return List a List of ApplicationUserDetails objects that match the telephoneNumber parameter.
     */
    public List<ApplicationUserDetails> listApplicationUserDetailsByTelephoneNumber(String telephoneNumber)
    {
        @SuppressWarnings("unchecked")
        List<ApplicationUserDetails> result = this.sessionFactory.getCurrentSession().createQuery("from ApplicationUserDetailsImpl as applicationUserDetails where applicationUserDetails.telephoneNumber = :telephonenumber order by applicationUserDetails.id asc").setParameter("telephonenumber", telephoneNumber).list();

        return result;
    }

    /**
     * Load existing ApplicationUserDetails objects from the database that have a addressOne column
     * that matches the addressOne parameter.
     * @return List a List of ApplicationUserDetails objects that match the addressOne parameter.
     */
    public List<ApplicationUserDetails> listApplicationUserDetailsByAddressOne(String addressOne)
    {
        @SuppressWarnings("unchecked")
        List<ApplicationUserDetails> result = this.sessionFactory.getCurrentSession().createQuery("from ApplicationUserDetailsImpl as applicationUserDetails where applicationUserDetails.addressOne = :addressone order by applicationUserDetails.id asc").setParameter("addressone", addressOne).list();

        return result;
    }

    /**
     * Load existing ApplicationUserDetails objects from the database that have a addressTwo column
     * that matches the addressTwo parameter.
     * @return List a List of ApplicationUserDetails objects that match the addressTwo parameter.
     */
    public List<ApplicationUserDetails> listApplicationUserDetailsByAddressTwo(String addressTwo)
    {
        @SuppressWarnings("unchecked")
        List<ApplicationUserDetails> result = this.sessionFactory.getCurrentSession().createQuery("from ApplicationUserDetailsImpl as applicationUserDetails where applicationUserDetails.addressTwo = :addresstwo order by applicationUserDetails.id asc").setParameter("addresstwo", addressTwo).list();

        return result;
    }

    /**
     * Load existing ApplicationUserDetails objects from the database that have a city column
     * that matches the city parameter.
     * @return List a List of ApplicationUserDetails objects that match the city parameter.
     */
    public List<ApplicationUserDetails> listApplicationUserDetailsByCity(String city)
    {
        @SuppressWarnings("unchecked")
        List<ApplicationUserDetails> result = this.sessionFactory.getCurrentSession().createQuery("from ApplicationUserDetailsImpl as applicationUserDetails where applicationUserDetails.city = :city order by applicationUserDetails.id asc").setParameter("city", city).list();

        return result;
    }

    /**
     * Load existing ApplicationUserDetails objects from the database that have a stateProvinceRegion column
     * that matches the stateProvinceRegion parameter.
     * @return List a List of ApplicationUserDetails objects that match the stateProvinceRegion parameter.
     */
    public List<ApplicationUserDetails> listApplicationUserDetailsByStateProvinceRegion(String stateProvinceRegion)
    {
        @SuppressWarnings("unchecked")
        List<ApplicationUserDetails> result = this.sessionFactory.getCurrentSession().createQuery("from ApplicationUserDetailsImpl as applicationUserDetails where applicationUserDetails.stateProvinceRegion = :stateprovinceregion order by applicationUserDetails.id asc").setParameter("stateprovinceregion", stateProvinceRegion).list();

        return result;
    }

    /**
     * Load existing ApplicationUserDetails objects from the database that have a postCode column
     * that matches the postCode parameter.
     * @return List a List of ApplicationUserDetails objects that match the postCode parameter.
     */
    public List<ApplicationUserDetails> listApplicationUserDetailsByPostCode(String postCode)
    {
        @SuppressWarnings("unchecked")
        List<ApplicationUserDetails> result = this.sessionFactory.getCurrentSession().createQuery("from ApplicationUserDetailsImpl as applicationUserDetails where applicationUserDetails.postCode = :postcode order by applicationUserDetails.id asc").setParameter("postcode", postCode).list();

        return result;
    }

    /**
     * Load existing ApplicationUserDetails objects from the database that have a country column
     * that matches the country parameter.
     * @return List a List of ApplicationUserDetails objects that match the country parameter.
     */
    public List<ApplicationUserDetails> listApplicationUserDetailsByCountry(Long country)
    {
        @SuppressWarnings("unchecked")
        List<ApplicationUserDetails> result = this.sessionFactory.getCurrentSession().createQuery("from ApplicationUserDetailsImpl as applicationUserDetails where applicationUserDetails.country = :country order by applicationUserDetails.id asc").setParameter("country", country).list();

        return result;
    }

    /**
     * Load existing ApplicationUserDetails objects from the database that have a emailAddress column
     * that matches the emailAddress parameter.
     * @return List a List of ApplicationUserDetails objects that match the emailAddress parameter.
     */
    public List<ApplicationUserDetails> listApplicationUserDetailsByEmailAddress(String emailAddress)
    {
        @SuppressWarnings("unchecked")
        List<ApplicationUserDetails> result = this.sessionFactory.getCurrentSession().createQuery("from ApplicationUserDetailsImpl as applicationUserDetails where applicationUserDetails.emailAddress = :emailaddress order by applicationUserDetails.id asc").setParameter("emailaddress", emailAddress).list();
        return result;
    }

    
    /**
     * Load existing ApplicationUserDetails objects from the database that have a createdByID column
     * that matches the createdById parameter.
     * @return List a List of ApplicationUserDetails objects that match the createdById parameter.
     */
    public List<ApplicationUserDetails> listApplicationUserDetailsByCreatedById(Long userId)
    {
        @SuppressWarnings("unchecked")
        List<ApplicationUserDetails> result = this.sessionFactory.getCurrentSession().createQuery("from ApplicationUserDetailsImpl as applicationUserDetails where applicationUserDetails.createdByID = :userId order by applicationUserDetails.id asc").setParameter("userId", userId).list();

        return result;
    }
    
    
    /**
     * Load all existing ApplicationUserDetailsHistory objects for a particular ApplicationUserDetails from the database.
     * Hibernate will generate the appropriate SQL,
     * send it to the database and populate a List of ApplicationUserDetailsHistory objects with the data.
     * @return List a List of ApplicationUserDetailsHistory objects.
     */
    public List<ApplicationUserDetailsHistory> listApplicationUserDetailsHistory(Long applicationUserDetails)
    {
        
        @SuppressWarnings("unchecked")
        List<ApplicationUserDetailsHistory> result = this.sessionFactory.getCurrentSession().createQuery("from ApplicationUserDetailsHistory as applicationUserDetailsHistory where applicationUserDetailsHistory.applicationUserDetailsId = ? order by applicationUserDetailsHistory.id asc").setLong(0, applicationUserDetails).list();

        return result;
    }
    
    
    
    /**
     * Creates a new entry in the APPLICATIONUSERDETAILS table containing the parameters passed here.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the database generated Id of the newly created record.
     * @throws ApplicationUserDetailsSaveException on failure to save.  
     */
    public Long createAndStoreApplicationUserDetails(ApplicationUserDetails applicationUserDetails, Long userId)
    {
    	Long returnValue = Long.valueOf(0);

        applicationUserDetails.setCreatedByID(userId);
        applicationUserDetails.setUpdatedByID(userId);
        applicationUserDetails.setDateCreated(new Date());
        applicationUserDetails.setDateUpdated(new Date());
        
        this.sessionFactory.getCurrentSession().save(applicationUserDetails);
            
        returnValue = applicationUserDetails.getId();
		
		return returnValue;
    }


    /**
     * Updates an existing entry in the APPLICATIONUSERDETAILS table containing the parameters passed here.
     * Only non-null parameters will be applied to the underlying table so preserving any existing entries.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @param the applicationUserDetails the ApplicationUserDetails object to update in the database.
     * @param userId the userId of the currently logged in user. 
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userId passed as parameter is not valid
     */
    public void updateApplicationUserDetails(ApplicationUserDetails applicationUserDetails, Long userId) throws AuthorisationException, InvalidUserIDException
    {
        if (Authorisation.isAuthorisedUpdate("ApplicationUserDetails", userId, applicationUserDetails.getId()) == false)
        {
        	throw new AuthorisationException();
        }
    	
        applicationUserDetails.setUpdatedByID(userId);
        applicationUserDetails.setDateUpdated(new Date());
        this.sessionFactory.getCurrentSession().update(applicationUserDetails);
    }
    
    
    /**
     * Loads a ApplicationUserDetailsFilter object based on the participantID of the currently logged in user
     * @param userID the userID is checked for authorisation to view the record. It is also the key to load a against the createdByID
     * column of the underlying record. There should only ever be one or zero filter records per ApplicationUserDetails.
     * @ return a ApplicationUserDetailsFilter object matching the parameter or a newly constructed, empty object if none can be found
     */
    public ApplicationUserDetailsFilter loadApplicationUserDetailsFilter(Long userID) throws ApplicationUserDetailsLoadException, AuthorisationException, InvalidUserIDException
    {
    	ApplicationUserDetailsFilter hibernateEntity = null;
    	
        /*if (Authorisation.isAuthorisedView("ApplicationUserDetails", userID, APPLICATIONUSERDETAILSID) == false)
        {
        	throw new AuthorisationException();
        }*/
    	

        if (userID != null)
        {
        	
        	try
        	{
				hibernateEntity = (ApplicationUserDetailsFilter)this.sessionFactory.getCurrentSession().load(ApplicationUserDetailsFilter.class, userID);
        	}
			catch (Exception ex)
			{
			     throw new ApplicationUserDetailsLoadException("ApplicationUserDetailsEntityDataManager::loadApplicationUserDetailsFilter", ex);
			}		
    		
            // Load all related singular objects
            
        }
    	
        return hibernateEntity;
    }
    
    /**
     * Creates a new entry in the APPLICATIONUSERDETAILSFILTER table containing the parameters passed here.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the userID which is also the assigned Id for the newly created record.
     * @throws ApplicationUserDetailsSaveException on failure to save.  
     */
    public Long createAndStoreApplicationUserDetailsFilter(ApplicationUserDetailsFilter applicationUserDetailsFilter,  Long userId)
        throws ApplicationUserDetailsSaveException
    {
    	Long returnValue = Long.valueOf(0);
        

		try
		{
            applicationUserDetailsFilter.setId(userId);
            applicationUserDetailsFilter.setCreatedByID(userId);
            applicationUserDetailsFilter.setUpdatedByID(userId);
            applicationUserDetailsFilter.setDateCreated(new Date());
            applicationUserDetailsFilter.setDateUpdated(new Date());

            this.sessionFactory.getCurrentSession().save(applicationUserDetailsFilter);
            
            returnValue = applicationUserDetailsFilter.getId();
		}
		catch (Exception ex)
		{
		     throw new ApplicationUserDetailsSaveException("ApplicationUserDetailsEntityDataManager::createAndStoreApplicationUserDetailsFilter", ex);
		}		
		
		return returnValue;
    }
    
    
    /**
     * Updates an existing entry in the APPLICATIONUSERDETAILSFILTER table and associated tables 
     * containing the parameters passed here. If the entry denoted by the userID does not exist then one is created.
     *	
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws ApplicationUserDetailsSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public Long updateApplicationUserDetailsFilter(ApplicationUserDetailsFilter applicationUserDetailsFilter, Long userId)
        throws ApplicationUserDetailsLoadException, ApplicationUserDetailsSaveException, AuthorisationException, InvalidUserIDException
    {
    	Long returnValue = Long.valueOf(0);
    	
        //if (Authorisation.isAuthorisedUpdate("ApplicationUserDetails", userID, APPLICATIONUSERDETAILSID) == false)
        //{
        //	throw new AuthorisationException();
        //}
    	
		try
		{
			applicationUserDetailsFilter.setId(userId);
            applicationUserDetailsFilter.setUpdatedByID(userId);
            applicationUserDetailsFilter.setDateUpdated(new Date());
            this.sessionFactory.getCurrentSession().update(applicationUserDetailsFilter);
            returnValue = applicationUserDetailsFilter.getId();
        }
		catch (Exception ex)
		{
		     throw new ApplicationUserDetailsSaveException("ApplicationUserDetailsDaoImpl::updateApplicationUserDetailsFilter, userId: " + userId, ex);
		}	
		
		return returnValue;	
        
    }
    
	
	/**
	 * Returns a List of the RegisterOfPledges that own the ApplicationUserDetails identified by the
	 * id given as a parameter.
	 * @param applicationUserDetailsId the id of the ApplicationUserDetails for which the RegisterOfPledges should be resolved.
	 * @param userId the userId of the currently logged in user.
	 */
	public List<RegisterOfPledges> listRegisterOfPledgesByApplicationUserDetailsId(Long applicationUserDetailsId, Long userId){
		@SuppressWarnings("unchecked")
		List<RegisterOfPledges> result = this.sessionFactory.getCurrentSession().createQuery("select distinct registerOfPledges from RegisterOfPledgesImpl as registerOfPledges inner join registerOfPledges.applicationUserDetails as applicationUserDetails where applicationUserDetails.id = :applicationUserDetailsId order by registerOfPledges.id asc").setParameter("applicationUserDetailsId", applicationUserDetailsId).list();
    	return result;
	}

    
    /**
     * Converts a Comma Seperated Volume (delimited by ",") to a <code>List<code/> of type <code>String<code/>
     */
	private static List<String> convertCommaDelimitedStringToList(String delimitedString) {

		List<String> result = new ArrayList<String>();

		if (!StringUtils.isEmpty(delimitedString)) {
			result = Arrays.asList(StringUtils.delimitedListToStringArray(delimitedString, ","));
		}
		return result;

	}

    /**
     * Converts a List of type String to a Comma Seperated Volume (delimited by ",") 
     */
	private String convertListToCommaDelimitedString(List<String> list) {

		String result = "";
		if (list != null) {
			result = StringUtils.arrayToCommaDelimitedString(list.toArray());
		}
		return result;

	}

    /**
     * Cleans up any Collection Objects created by the Class instance
     */
    protected void finalize() throws Throwable
    {
        super.finalize();
        
    }


	@Override
	public List<ApplicationUserDetails> getApplicationUserDetailsByApplicationUser(Long appUserId) {
		 @SuppressWarnings("unchecked")
        List<ApplicationUserDetails> result = this.sessionFactory.getCurrentSession().createQuery("from ApplicationUserDetailsImpl as applicationUserDetails where applicationUserDetails.applicationUser.id = :userId order by applicationUserDetails.id asc").setParameter("userId", appUserId).list();

        return result;
	}    
    
}
    
