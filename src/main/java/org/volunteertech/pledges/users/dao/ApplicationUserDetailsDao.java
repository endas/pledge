package org.volunteertech.pledges.users.dao;
import org.hibernate.SessionFactory;
import com.netgrains.security.AuthorisationException;
import com.netgrains.security.InvalidUserIDException;
import org.volunteertech.pledges.users.dao.ApplicationUserDetails;
import org.volunteertech.pledges.users.dao.ApplicationUserDetailsHistory;
import org.volunteertech.pledges.users.dao.ApplicationUserDetailsLoadException;
import org.volunteertech.pledges.users.dao.ApplicationUserDetailsSaveException;
import java.util.List;
import java.util.Set;
import java.util.Date;
import java.math.BigDecimal;

  
import org.volunteertech.pledges.pledge.dao.RegisterOfPledges;



/**
 * The contact information
 * This Interface has been generated by the XSLT processor from the meta data and represents the
 * interface of the data access object(DAO) for the ApplicationUserDetails entity.
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: * $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
public interface ApplicationUserDetailsDao
{

    /**
     * Allows Spring to set the container managed SessionFactory instance
     * @param a Spring managed SessionFactory instance
     */    
    public void setSessionFactory(SessionFactory sessionFactory);


    /**
     * Loads a ApplicationUserDetails object based on the applicationUserDetailsId column
     * @param applicationUserDetailsId the primary key for the underlying record.
     * @ return a ApplicationUserDetails object matching the parameter or null if none can be found. The
     * method also returns null if the parameter is null.
     */
    public ApplicationUserDetails load(Long applicationUserDetailsId, Long loggedInUserId) throws AuthorisationException, InvalidUserIDException;
    

    /**
     * Load all existing ApplicationUserDetails objects from the database. Hibernate will generate the appropriate SQL,
     * send it to the database and populate a List of ApplicationUserDetails objects with the data.
     * @return List a List of ApplicationUserDetails objects.
     */
    public List<ApplicationUserDetails> listApplicationUserDetails();
    
    
    /**
     * Load existing ApplicationUserDetails objects from the database that have a contactName column
     * that matches the contactName parameter.
     * @return List a List of ApplicationUserDetails objects that match the contactName parameter.
     */
    public List<ApplicationUserDetails> listApplicationUserDetailsByContactName(String contactName);

    /**
     * Load existing ApplicationUserDetails objects from the database that have a representOrganisation column
     * that matches the representOrganisation parameter.
     * @return List a List of ApplicationUserDetails objects that match the representOrganisation parameter.
     */
    public List<ApplicationUserDetails> listApplicationUserDetailsByRepresentOrganisation(Long representOrganisation);

    /**
     * Load existing ApplicationUserDetails objects from the database that have a telephoneNumber column
     * that matches the telephoneNumber parameter.
     * @return List a List of ApplicationUserDetails objects that match the telephoneNumber parameter.
     */
    public List<ApplicationUserDetails> listApplicationUserDetailsByTelephoneNumber(String telephoneNumber);

    /**
     * Load existing ApplicationUserDetails objects from the database that have a addressOne column
     * that matches the addressOne parameter.
     * @return List a List of ApplicationUserDetails objects that match the addressOne parameter.
     */
    public List<ApplicationUserDetails> listApplicationUserDetailsByAddressOne(String addressOne);

    /**
     * Load existing ApplicationUserDetails objects from the database that have a addressTwo column
     * that matches the addressTwo parameter.
     * @return List a List of ApplicationUserDetails objects that match the addressTwo parameter.
     */
    public List<ApplicationUserDetails> listApplicationUserDetailsByAddressTwo(String addressTwo);

    /**
     * Load existing ApplicationUserDetails objects from the database that have a city column
     * that matches the city parameter.
     * @return List a List of ApplicationUserDetails objects that match the city parameter.
     */
    public List<ApplicationUserDetails> listApplicationUserDetailsByCity(String city);

    /**
     * Load existing ApplicationUserDetails objects from the database that have a stateProvinceRegion column
     * that matches the stateProvinceRegion parameter.
     * @return List a List of ApplicationUserDetails objects that match the stateProvinceRegion parameter.
     */
    public List<ApplicationUserDetails> listApplicationUserDetailsByStateProvinceRegion(String stateProvinceRegion);

    /**
     * Load existing ApplicationUserDetails objects from the database that have a postCode column
     * that matches the postCode parameter.
     * @return List a List of ApplicationUserDetails objects that match the postCode parameter.
     */
    public List<ApplicationUserDetails> listApplicationUserDetailsByPostCode(String postCode);

    /**
     * Load existing ApplicationUserDetails objects from the database that have a country column
     * that matches the country parameter.
     * @return List a List of ApplicationUserDetails objects that match the country parameter.
     */
    public List<ApplicationUserDetails> listApplicationUserDetailsByCountry(Long country);

    /**
     * Load existing ApplicationUserDetails objects from the database that have a emailAddress column
     * that matches the emailAddress parameter.
     * @return List a List of ApplicationUserDetails objects that match the emailAddress parameter.
     */
    public List<ApplicationUserDetails> listApplicationUserDetailsByEmailAddress(String emailAddress);

    
    /**
     * Load existing ApplicationUserDetails objects from the database that have a createdByID column
     * that matches the userId parameter.
     * @return List a List of ApplicationUserDetails objects that match the userId parameter.
     */
    public List<ApplicationUserDetails> listApplicationUserDetailsByCreatedById(Long userId);
    
    
    /**
     * Load all existing ApplicationUserDetailsHistory objects for a particular ApplicationUserDetails from the database.
     * Hibernate will generate the appropriate SQL,
     * send it to the database and populate ApplicationUserDetailsHistory objects with the data.
     * @return List a List of ApplicationUserDetailsHistory objects.
     */
    public List<ApplicationUserDetailsHistory> listApplicationUserDetailsHistory(Long applicationUserDetails);
    
    
    
    
    /**
     * Creates a new entry in the APPLICATIONUSERDETAILS table containing the parameters passed here.
     *
     * @param userID the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the database generated Id of the newly created record.
     */
    public Long createAndStoreApplicationUserDetails(ApplicationUserDetails applicationUserDetails, Long userId);


    /**
     * Updates an existing entry in the APPLICATIONUSERDETAILS table containing the parameters passed here.
     * Only non-null parameters will be applied to the underlying table so preserving any existing entries.
     * @param the applicationUserDetails the ApplicationUserDetails object to update in the database.
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     */
    public void updateApplicationUserDetails(ApplicationUserDetails applicationUserDetails, Long userId) throws AuthorisationException, InvalidUserIDException;
    
    
    /**
     * Loads a ApplicationUserDetailsFilter object based on the participantID of the currently logged in user
     * @param userID the userID is checked for authorisation to view the record. It is also the key to load a against the createdByID
     * column of the underlying record. There should only ever be one or zero filter records per ApplicationUserDetails.
     * @ return a ApplicationUserDetailsFilter object matching the parameter or a newly constructed, empty object if none can be found
     */
    public ApplicationUserDetailsFilter loadApplicationUserDetailsFilter(Long userID) throws ApplicationUserDetailsLoadException, AuthorisationException, InvalidUserIDException;


    
    /**
     * Creates a new entry in the APPLICATIONUSERDETAILSFILTER table containing the parameters passed here.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the userId which is also the assigned Id for the newly created record.
     * @throws ApplicationUserDetailsSaveException on failure to save.  
     */
    public Long createAndStoreApplicationUserDetailsFilter(ApplicationUserDetailsFilter applicationUserDetailsFilter, Long userId)
        throws ApplicationUserDetailsSaveException;
    
    
    /**
     * Updates an existing entry in the APPLICATIONUSERDETAILSFILTER table and associated tables 
     * containing the parameters passed here. If the entry denoted by the userID does not exist then one is created.
     *	
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws ApplicationUserDetailsSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public Long updateApplicationUserDetailsFilter(ApplicationUserDetailsFilter applicationUserDetailsFilter, Long userId)
        throws ApplicationUserDetailsLoadException, ApplicationUserDetailsSaveException, AuthorisationException, InvalidUserIDException;
    
	
	/**
	 * Returns a List of the RegisterOfPledges that own the ApplicationUserDetails identified by the
	 * id given as a parameter.
	 * @param applicationuserdetailsId the id of the ApplicationUserDetails for which the RegisterOfPledges should be resolved.
	 * @param userId the userId of the currently logged in user.
	 */
	public List<RegisterOfPledges> listRegisterOfPledgesByApplicationUserDetailsId(Long applicationuserdetailsId, Long userId);

}
    
