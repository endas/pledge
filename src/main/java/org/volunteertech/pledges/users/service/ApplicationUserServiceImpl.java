package org.volunteertech.pledges.users.service;
import com.netgrains.security.Authorisation;
import com.netgrains.security.AuthorisationException;
import com.netgrains.security.InvalidUserIDException;
import org.volunteertech.pledges.users.dao.ApplicationUser;
import org.volunteertech.pledges.users.business.ApplicationUserBo;
import org.volunteertech.pledges.users.dao.ApplicationUserFilter;
import org.volunteertech.pledges.users.dao.ApplicationUserHistory;
import org.volunteertech.pledges.users.dao.ApplicationUserLoadException;
import org.volunteertech.pledges.users.dao.ApplicationUserSaveException;

import java.util.Date;
import java.util.List;
import java.util.Set;
import java.math.BigDecimal;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.Locale;

import org.volunteertech.pledges.main.constants.Constants;
import org.springframework.beans.factory.annotation.Autowired;


import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import com.netgrains.security.EmailExistsException;
import com.netgrains.security.HashEncoderGenerator;

import org.volunteertech.pledges.users.security.SecurityUser;

import org.volunteertech.pledges.reference.service.ReferenceService;
  
import org.volunteertech.pledges.localisation.service.MessageResourceService;
  



/**
 * The User Model for controlling user access
 * This Class has been generated by the XSLT processor from the meta data and represents the
 * implementation of the Service  Layer Object for the ApplicationUser entity. A Business Object
 * is provided in order to provide a seperation from the Data Access implementation. 
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: * $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
public class ApplicationUserServiceImpl implements ApplicationUserService, UserDetailsService
{
	/**
	 * The Business Object
	 */
	ApplicationUserBo  applicationUserBo;
	
	/**
	 * Reference service for lookups of drop down contents
	 */
    ReferenceService referenceService;	  
	  
	/**
	 * The message resource service that allows access to locale specific messages
	 */
    MessageResourceService messageResourceService;	  
	  
    
    /**
     * Default Constructor for the ApplicationUser Business Object.
     */
    public ApplicationUserServiceImpl()
    {
    	//Initialise the related Object stores
        
    }
    
	
	/**
	 * Sets the reference Service to perform a user roles lookup
	 */
	public void setReferenceService(ReferenceService referenceService){
		this.referenceService = referenceService;
	}
	
	/**
	 * Returns a reference to reference Service.
	 */
	public ReferenceService getReferenceService(){
		return this.referenceService;
	}	
	  
	/**
	 * Sets the message resource service to perform localization lookups
	 */
	public void setMessageResourceService(MessageResourceService messageResourceService){
		this.messageResourceService = messageResourceService;
	}
	
	/**
	 * Returns a reference to the message resource service.
	 */
	public MessageResourceService getMessageResourceService(){
		return this.messageResourceService;
	}	
  
	@Override
	public UserDetails loadUserByUsername(final String username) 
               throws UsernameNotFoundException {
		ApplicationUser applicationUser;

		try{
			List<ApplicationUser> applicationUserList = applicationUserBo.getApplicationUserDao().listApplicationUserByUsername(username);
			applicationUser = applicationUserList.get(0); 
		}
		catch (Exception ex){
			throw new UsernameNotFoundException(username);
		}
		List<GrantedAuthority> authorities = buildUserAuthority(applicationUser.getUserRoles());

		return buildUserForAuthentication(applicationUser, authorities);
		

	}

	public boolean autoLoadUser(ApplicationUser applicationUser){
		List<GrantedAuthority> authorities = buildUserAuthority(applicationUser.getUserRoles());
    	UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken( loadUserByUsername(applicationUser.getUsername()), applicationUser.getPassword(), authorities );
        SecurityContextHolder.getContext().setAuthentication(authenticationToken);
        
        return true;
	}	
	

	/**
	 * Converts the The Red Cross user domain object, ApplicationUser to an instance of org.springframework.security.core.userdetails.User
	 */
	private SecurityUser buildUserForAuthentication(ApplicationUser applicationUser, 
		List<GrantedAuthority> authorities) {
		return new SecurityUser(applicationUser.getUsername(), 
			applicationUser.getPassword(), applicationUser.getEnabled(), 
                        true, true, true, authorities, applicationUser);
	}

	private List<GrantedAuthority> buildUserAuthority(Set<Long> userRolesSet) {

		Set<GrantedAuthority> setAuths = new HashSet<GrantedAuthority>();

		// Build user's authorities
		for (Long userRoles : userRolesSet) {
			String messageKey = this.referenceService.getRefDesc(userRoles);
			setAuths.add(new SimpleGrantedAuthority(this.messageResourceService.getMessage(messageKey, null, new Locale("en"))));
		}

		List<GrantedAuthority> Result = new ArrayList<GrantedAuthority>(setAuths);

		return Result;
	}
	
    public ApplicationUser registerNewUserAccount(ApplicationUser applicationUser) throws EmailExistsException, ApplicationUserSaveException {
    	ApplicationUser returnValue = null;
    	
        if (emailExist(applicationUser.getUsername())) {   
            throw new EmailExistsException("There is an existing account with that email address:", applicationUser.getUsername());
        }
        applicationUser.setPassword(HashEncoderGenerator.encode(applicationUser.getPassword()));
        applicationUser.setEnabled(true);
        Set<Long> userRolesSet = new HashSet<Long>();
        Long userRoles1 = new Long(Constants.REFERENCE_USERROLE__ROLE_USER);
        userRolesSet.add(userRoles1);
        Long userRoles2 = new Long(Constants.REFERENCE_USERROLE__ROLE_CLIENT);
        userRolesSet.add(userRoles2);        
                
          applicationUser.setUserRoles(userRolesSet);
       	Long userId = applicationUserBo.createAndStoreApplicationUser(applicationUser, new Long(1)); 
        
        if (userId != null)
        {
        	returnValue = applicationUser;         
        }
        
        return returnValue;
    }   
    
    
    private boolean emailExist(String email) {
     	List<ApplicationUser> userList = applicationUserBo.listApplicationUserByUsername(email);

        if (!userList.isEmpty()) {
            return true;
        }
        return false;
    }
	
	
    
    
    /**
     * Sets the required Business Object (BO)
     * @param applicationUserBo the applicationUserBo used to access the applicationUser entity
     * and it's associations.
     */
    public void setApplicationUserBo(ApplicationUserBo applicationUserBo){
    	this.applicationUserBo = applicationUserBo;
    }

    /**
     * Returns the required Business Object (BO)
     * @return the ApplicationUserBO used to access the applicationUser entity
     * and it's associations.     
     */
    public ApplicationUserBo getApplicationUserBo(){
    	return this.applicationUserBo;
    }

    /**
     * Loads a ApplicationUser object based on the APPLICATIONUSERID column
     * @param APPLICATIONUSERID the primary key for the underlying record.
     * @param userID the userID is checked for authorisation to view the record
     * @ return a ApplicationUser object matching the parameter or null if none can be found. The
     * method also returns null if the parameter is null.
     */
    public ApplicationUser load(Long applicationUserId, Long loggedInUserId) throws ApplicationUserLoadException, AuthorisationException, InvalidUserIDException
    {
    	ApplicationUser applicationUser = null;
    	
        if (Authorisation.isAuthorisedView("ApplicationUser", loggedInUserId, applicationUserId) == false)
        {
        	throw new AuthorisationException();
        }
    	

        if (applicationUserId != null)
        {
        	try
        	{
				applicationUser = (ApplicationUser)this.getApplicationUserBo().load(applicationUserId, loggedInUserId);
        	}
			catch (Exception ex)
			{
			     throw new ApplicationUserLoadException("ApplicationUserServiceImpl::load(?, ?)", ex);
			}		
    		
            // Load all related singular objects
            
        }
    	
        return applicationUser;
    }
    
    


    /**
     * Load all existing ApplicationUser objects. 
     * @return List a List of ApplicationUser objects.
     */
    public List<ApplicationUser> listApplicationUser()
    {
        List<ApplicationUser> result = this.getApplicationUserBo().listApplicationUser();

        return result;
    }
    
    
    /**
     * Returns a <code>List</code> of ApplicationUser objects that have a matching username
     * @return List a List of ApplicationUser objects that match the username property given as parameter.
     * @param username the username on which to match the required records.
     */
    public List<ApplicationUser> listApplicationUserByUsername(String username)
    {
        List<ApplicationUser> result = this.getApplicationUserBo().listApplicationUserByUsername(username);

        return result;
    }

    /**
     * Returns a <code>List</code> of ApplicationUser objects that have a matching password
     * @return List a List of ApplicationUser objects that match the password property given as parameter.
     * @param password the password on which to match the required records.
     */
    public List<ApplicationUser> listApplicationUserByPassword(String password)
    {
        List<ApplicationUser> result = this.getApplicationUserBo().listApplicationUserByPassword(password);

        return result;
    }

    /**
     * Returns a <code>List</code> of ApplicationUser objects that have a matching enabled
     * @return List a List of ApplicationUser objects that match the enabled property given as parameter.
     * @param enabled the enabled on which to match the required records.
     */
    public List<ApplicationUser> listApplicationUserByEnabled(Boolean enabled)
    {
        List<ApplicationUser> result = this.getApplicationUserBo().listApplicationUserByEnabled(enabled);

        return result;
    }

    /**
     * Returns a <code>List</code> of ApplicationUser objects that have a matching userRoles
     * @return List a List of ApplicationUser objects that match the userRoles property given as parameter.
     * @param userRoles the userRoles on which to match the required records.
     */
    public List<ApplicationUser> listApplicationUserByUserRoles(Long userRoles)
    {
        List<ApplicationUser> result = this.getApplicationUserBo().listApplicationUserByUserRoles(userRoles);

        return result;
    }

    
    /**
     * Load existing ApplicationUser objects from the database that have a createdByID column
     * that matches the userId parameter.
     * @return List a List of ApplicationUser objects that match the userId parameter.
     */
    public List<ApplicationUser> listApplicationUserByCreatedById(Long userId)
    {
        List<ApplicationUser> result = this.getApplicationUserBo().listApplicationUser();

        return result;
    }
    
    
    /**
     * Load all existing ApplicationUserHistory objects for a particular ApplicationUser.
     * The <code>List</code> of ApplicationUserHistory objects contains all of the changes that have been made to the
     * ApplicationUser object identified by the applicationUser parameter'
     * @return List a List of ApplicationUserHistory objects.
     */
    public List<ApplicationUserHistory> listApplicationUserHistory(Long applicationUser) throws Exception
    {
        List<ApplicationUserHistory> result = this.getApplicationUserBo().listApplicationUserHistory(applicationUser);

        return result;
    }
    
    
    
    /**
     * Either updates an existing entry in the APPLICATIONUSER table or adds a new entry if one does not exist.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws ApplicationUserLoadException if the existing record cannot be loaded
     * @throws ApplicationUserSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public void storeApplicationUser(ApplicationUser applicationUser, Long userId)
        throws ApplicationUserSaveException, ApplicationUserLoadException, AuthorisationException, InvalidUserIDException
    {
    	
        if (Authorisation.isAuthorisedUpdate("ApplicationUser", userId, applicationUser.getId()) == false)
        {
        	throw new AuthorisationException();
        }
    	
		try
		{
			if(applicationUser.isNew()){
		    	this.getApplicationUserBo().createAndStoreApplicationUser(applicationUser, userId);
			}else{
		    	this.getApplicationUserBo().updateApplicationUser(applicationUser, userId);
			}
        }
		catch (Exception ex)
		{
		     throw new ApplicationUserSaveException("ApplicationUserEntityDataManager::updateApplicationUser, ApplicationUserID: " + applicationUser.getId(), ex);
		}		
        
    }
    
    
    /**
     * Loads a ApplicationUserFilter object based on the participantID of the currently logged in user
     * @param userID the userID is checked for authorisation to view the record. It is also the key to load a against the createdByID
     * column of the underlying record. There should only ever be one or zero filter records per ApplicationUser.
     * @ return a ApplicationUserFilter object matching the parameter or a newly constructed, empty object if none can be found
     */
    public ApplicationUserFilter loadApplicationUserFilter(Long userID) throws ApplicationUserLoadException, AuthorisationException, InvalidUserIDException
    {
    	ApplicationUserFilter applicationUserFilter = null;
    	
        /*if (Authorisation.isAuthorisedView("ApplicationUser", userID, APPLICATIONUSERID) == false)
        {
        	throw new AuthorisationException();
        }*/
    	

        if (userID != null)
        {
        	
        	try
        	{
				applicationUserFilter = (ApplicationUserFilter)this.getApplicationUserBo().loadApplicationUserFilter(userID);
        	}
			catch (Exception ex)
			{
			     throw new ApplicationUserLoadException("ApplicationUserEntityDataManager::loadApplicationUserFilter", ex);
			}		
    		
            // Load all related singular objects
            
        }
    	
        return applicationUserFilter;
    }
    
    /**
     * Creates a new entry in the APPLICATIONUSERFILTER table containing the parameters passed here.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the userId which is also the assigned Id for the newly created record.
     * @throws ApplicationUserSaveException on failure to save.  
     */
    public Long createAndStoreApplicationUserFilter(ApplicationUserFilter applicationUserFilter, Long userId)
        throws ApplicationUserSaveException
    {
    	Long returnValue = new Long(0);
        

		try
		{
            applicationUserFilter.setId(userId);
			applicationUserFilter.setCreatedByID(userId);
            applicationUserFilter.setUpdatedByID(userId);
            applicationUserFilter.setDateCreated(new Date());
            applicationUserFilter.setDateUpdated(new Date());

            returnValue = this.getApplicationUserBo().createAndStoreApplicationUserFilter(applicationUserFilter, userId);
		}
		catch (Exception ex)
		{
		     throw new ApplicationUserSaveException("ApplicationUserServiceImpl::createAndStoreApplicationUserFilter", ex);
		}		
		
		return returnValue;
    }
    
    
    /**
     * Updates an existing entry in the APPLICATIONUSERFILTER table and associated tables 
     * containing the parameters passed here. If the entry denoted by the userID does not exist then one is created.
     *	
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws ApplicationUserSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public Long updateApplicationUserFilter(ApplicationUserFilter applicationUserFilter, Long userId)
        throws ApplicationUserLoadException, ApplicationUserSaveException, AuthorisationException, InvalidUserIDException
    {
    	Long returnValue = new Long(0);
    	
        //if (Authorisation.isAuthorisedUpdate("ApplicationUser", userId, APPLICATIONUSERID) == false)
        //{
        //	throw new AuthorisationException();
        //}
    	
		try
		{
        
			applicationUserFilter.setUpdatedByID(userId);
            applicationUserFilter.setDateUpdated(new Date());
            returnValue = this.getApplicationUserBo().updateApplicationUserFilter(applicationUserFilter, userId);
        }
		catch (Exception ex)
		{
		     throw new ApplicationUserSaveException("ApplicationUserServiceImpl::updateApplicationUserFilter, userId: " + userId, ex);
		}	
		
		return returnValue;	
        
    }

	/**
	 * Translates the referenceId type properties into the locale specific text for display on the front-end.
	 * @param applicationUser the dto object to be updated with the locale specific translations
	 * @param locale the Locale to be displayed
	 */    
    public ApplicationUser translateReferenceValues(ApplicationUser applicationUser, Locale locale){
    	
    	return applicationUser;
    }
    
	/**
	 * Translates the referenceId type properties into the locale specific text for display on the front-end.
	 * @param applicationUserList the dto object to be updated with the locale specific translations
	 * @param locale the Locale to be displayed
	 */    
    public List<ApplicationUser> translateReferenceValues(List<ApplicationUser> applicationUserList, Locale locale){
    	for (ApplicationUser applicationUser :  applicationUserList){
    		applicationUser = translateReferenceValues(applicationUser, locale);
    	}
    	
    	return applicationUserList;
    }
    
	
    
    /**
     * Cleans up any Collection Objects created by the Class instance
     */
    protected void finalize() throws Throwable
    {
        super.finalize();
        
    }    
    
    
}
    
