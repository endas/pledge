package org.volunteertech.pledges.localisation.service;
import com.netgrains.security.Authorisation;
import com.netgrains.security.AuthorisationException;
import com.netgrains.security.InvalidUserIDException;
import org.volunteertech.pledges.localisation.dao.MessageResource;
import org.volunteertech.pledges.localisation.business.MessageResourceBo;
import org.volunteertech.pledges.localisation.dao.MessageResourceFilter;
import org.volunteertech.pledges.localisation.dao.MessageResourceHistory;
import org.volunteertech.pledges.localisation.dao.MessageResourceLoadException;
import org.volunteertech.pledges.localisation.dao.MessageResourceSaveException;

import java.util.Date;
import java.util.List;
import java.util.Set;
import java.math.BigDecimal;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.Locale;

import org.volunteertech.pledges.main.constants.Constants;
import org.springframework.beans.factory.annotation.Autowired;

import org.volunteertech.pledges.reference.service.ReferenceService;
  
import org.volunteertech.pledges.main.localisation.DatabaseDrivenMessageSource;
  



/**
 * The model to hold localisation messages
 * This Class has been generated by the XSLT processor from the meta data and represents the
 * implementation of the Service  Layer Object for the MessageResource entity. A Business Object
 * is provided in order to provide a seperation from the Data Access implementation. 
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: * $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
public class MessageResourceServiceImpl implements MessageResourceService
{
	/**
	 * The Business Object
	 */
	MessageResourceBo  messageResourceBo;
	
	/**
	 * Reference service for lookups of drop down contents
	 */
    ReferenceService referenceService;	  
	  
	/**
	 * The handler that stores in-memory resource messages
	 */ 
	private DatabaseDrivenMessageSource messageSource;
	  
    
    /**
     * Default Constructor for the MessageResource Business Object.
     */
    public MessageResourceServiceImpl()
    {
    	//Initialise the related Object stores
        
    }
    
	
	/**
	 * Sets the reference Service to perform a user roles lookup
	 */
	public void setReferenceService(ReferenceService referenceService){
		this.referenceService = referenceService;
	}
	
	/**
	 * Returns a reference to reference Service.
	 */
	public ReferenceService getReferenceService(){
		return this.referenceService;
	}	
	  
	/**
	 * Sets the reference to the MessageSource required to perform a user roles lookup
	 */
	public void setMessageSource(DatabaseDrivenMessageSource messageSource){
		this.messageSource = messageSource;
	}
	
	/**
	 * Returns a reference to the MessageSource instance.
	 */
	public DatabaseDrivenMessageSource getMessageSource(){
		return this.messageSource;
	}	
      
    
    /**
     * Sets the required Business Object (BO)
     * @param messageResourceBo the messageResourceBo used to access the messageResource entity
     * and it's associations.
     */
    public void setMessageResourceBo(MessageResourceBo messageResourceBo){
    	this.messageResourceBo = messageResourceBo;
    }

    /**
     * Returns the required Business Object (BO)
     * @return the MessageResourceBO used to access the messageResource entity
     * and it's associations.     
     */
    public MessageResourceBo getMessageResourceBo(){
    	return this.messageResourceBo;
    }

    /**
     * Loads a MessageResource object based on the MESSAGERESOURCEID column
     * @param MESSAGERESOURCEID the primary key for the underlying record.
     * @param userID the userID is checked for authorisation to view the record
     * @ return a MessageResource object matching the parameter or null if none can be found. The
     * method also returns null if the parameter is null.
     */
    public MessageResource load(Long messageResourceId, Long loggedInUserId) throws MessageResourceLoadException, AuthorisationException, InvalidUserIDException
    {
    	MessageResource messageResource = null;
    	
        if (Authorisation.isAuthorisedView("MessageResource", loggedInUserId, messageResourceId) == false)
        {
        	throw new AuthorisationException();
        }
    	

        if (messageResourceId != null)
        {
        	try
        	{
				messageResource = (MessageResource)this.getMessageResourceBo().load(messageResourceId, loggedInUserId);
        	}
			catch (Exception ex)
			{
			     throw new MessageResourceLoadException("MessageResourceServiceImpl::load(?, ?)", ex);
			}		
    		
            // Load all related singular objects
            
        }
    	
        return messageResource;
    }
    
    
      
    /**
     * Load a MessageResource object using the Locale and messageKey as search parameters.
     * @return a MessageResource object.
     */
    public MessageResource loadMessageResourceForLocale(String messageKey, String locale) throws MessageResourceLoadException, AuthorisationException, InvalidUserIDException
    {
    	MessageResource messageResource = null;
    	
        if ((messageKey != null) && (locale != null))
        {
        	try
        	{
				messageResource = (MessageResource)this.getMessageResourceBo().loadMessageResourceForLocale(messageKey, locale);
        	}
			catch (Exception ex)
			{
			     throw new MessageResourceLoadException("MessageResourceDaoImpl::loadMessageResourceForLocale(?, ?, ?)", ex);
			}		
    		
            // Load all related singular objects
            
        }
    	
        return messageResource;
    }
    
    /**
     * Returns a resolved locale specific message from the underlying message resource manager
     * @param messageKey the message key
     * @param args array of arguments that will be filled in for params within the message (params look like "{0}", "{1,date}", "{2,time}" within a message), or null if none.
     * @param locale the specific locale to which to resolve the message 
     */
    public String getMessage(String messageKey, Object[] args, Locale locale){
    	return this.messageSource.getMessage(messageKey, args, locale);
    
    }
    
    /**
     * Returns a resolved locale specific message from the underlying message resource manager
     * @param referenceId a referenceId that is looked up againt the reference table to resolve the message key
     * @param args array of arguments that will be filled in for params within the message (params look like "{0}", "{1,date}", "{2,time}" within a message), or null if none.
     * @param locale the specific locale to which to resolve the message 
     */
    public String getMessage(Long referenceId, Object[] args, Locale locale){
		String messageKey = this.referenceService.getReferenceStore().getRefDesc(referenceId);
    
    	return this.messageSource.getMessage(messageKey, args, locale);
    
    }
      


    /**
     * Load all existing MessageResource objects. 
     * @return List a List of MessageResource objects.
     */
    public List<MessageResource> listMessageResource()
    {
        List<MessageResource> result = this.getMessageResourceBo().listMessageResource();

        return result;
    }
    
    
    /**
     * Returns a <code>List</code> of MessageResource objects that have a matching messageKey
     * @return List a List of MessageResource objects that match the messageKey property given as parameter.
     * @param messageKey the messageKey on which to match the required records.
     */
    public List<MessageResource> listMessageResourceByMessageKey(String messageKey)
    {
        List<MessageResource> result = this.getMessageResourceBo().listMessageResourceByMessageKey(messageKey);

        return result;
    }

    /**
     * Returns a <code>List</code> of MessageResource objects that have a matching locale
     * @return List a List of MessageResource objects that match the locale property given as parameter.
     * @param locale the locale on which to match the required records.
     */
    public List<MessageResource> listMessageResourceByLocale(String locale)
    {
        List<MessageResource> result = this.getMessageResourceBo().listMessageResourceByLocale(locale);

        return result;
    }

    /**
     * Returns a <code>List</code> of MessageResource objects that have a matching localeReferenceId
     * @return List a List of MessageResource objects that match the localeReferenceId property given as parameter.
     * @param localeReferenceId the localeReferenceId on which to match the required records.
     */
    public List<MessageResource> listMessageResourceByLocaleReferenceId(Long localeReferenceId)
    {
        List<MessageResource> result = this.getMessageResourceBo().listMessageResourceByLocaleReferenceId(localeReferenceId);

        return result;
    }

    /**
     * Returns a <code>List</code> of MessageResource objects that have a matching message
     * @return List a List of MessageResource objects that match the message property given as parameter.
     * @param message the message on which to match the required records.
     */
    public List<MessageResource> listMessageResourceByMessage(String message)
    {
        List<MessageResource> result = this.getMessageResourceBo().listMessageResourceByMessage(message);

        return result;
    }

    
    /**
     * Load existing MessageResource objects from the database that have a createdByID column
     * that matches the userId parameter.
     * @return List a List of MessageResource objects that match the userId parameter.
     */
    public List<MessageResource> listMessageResourceByCreatedById(Long userId)
    {
        List<MessageResource> result = this.getMessageResourceBo().listMessageResource();

        return result;
    }
    
    
    /**
     * Load all existing MessageResourceHistory objects for a particular MessageResource.
     * The <code>List</code> of MessageResourceHistory objects contains all of the changes that have been made to the
     * MessageResource object identified by the messageResource parameter'
     * @return List a List of MessageResourceHistory objects.
     */
    public List<MessageResourceHistory> listMessageResourceHistory(Long messageResource) throws Exception
    {
        List<MessageResourceHistory> result = this.getMessageResourceBo().listMessageResourceHistory(messageResource);

        return result;
    }
    
    
    
    /**
     * Either updates an existing entry in the MESSAGERESOURCE table or adds a new entry if one does not exist.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws MessageResourceLoadException if the existing record cannot be loaded
     * @throws MessageResourceSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public void storeMessageResource(MessageResource messageResource, Long userId)
        throws MessageResourceSaveException, MessageResourceLoadException, AuthorisationException, InvalidUserIDException
    {
    	
        if (Authorisation.isAuthorisedUpdate("MessageResource", userId, messageResource.getId()) == false)
        {
        	throw new AuthorisationException();
        }
    	
		try
		{
			if(messageResource.isNew()){
		    	this.getMessageResourceBo().createAndStoreMessageResource(messageResource, userId);
			}else{
		    	this.getMessageResourceBo().updateMessageResource(messageResource, userId);
			}
        }
		catch (Exception ex)
		{
		     throw new MessageResourceSaveException("MessageResourceEntityDataManager::updateMessageResource, MessageResourceID: " + messageResource.getId(), ex);
		}		
        
    }
    
    
    /**
     * Loads a MessageResourceFilter object based on the participantID of the currently logged in user
     * @param userID the userID is checked for authorisation to view the record. It is also the key to load a against the createdByID
     * column of the underlying record. There should only ever be one or zero filter records per MessageResource.
     * @ return a MessageResourceFilter object matching the parameter or a newly constructed, empty object if none can be found
     */
    public MessageResourceFilter loadMessageResourceFilter(Long userID) throws MessageResourceLoadException, AuthorisationException, InvalidUserIDException
    {
    	MessageResourceFilter messageResourceFilter = null;
    	
        /*if (Authorisation.isAuthorisedView("MessageResource", userID, MESSAGERESOURCEID) == false)
        {
        	throw new AuthorisationException();
        }*/
    	

        if (userID != null)
        {
        	
        	try
        	{
				messageResourceFilter = (MessageResourceFilter)this.getMessageResourceBo().loadMessageResourceFilter(userID);
        	}
			catch (Exception ex)
			{
			     throw new MessageResourceLoadException("MessageResourceEntityDataManager::loadMessageResourceFilter", ex);
			}		
    		
            // Load all related singular objects
            
        }
    	
        return messageResourceFilter;
    }
    
    /**
     * Creates a new entry in the MESSAGERESOURCEFILTER table containing the parameters passed here.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the userId which is also the assigned Id for the newly created record.
     * @throws MessageResourceSaveException on failure to save.  
     */
    public Long createAndStoreMessageResourceFilter(MessageResourceFilter messageResourceFilter, Long userId)
        throws MessageResourceSaveException
    {
    	Long returnValue = new Long(0);
        

		try
		{
            messageResourceFilter.setId(userId);
			messageResourceFilter.setCreatedByID(userId);
            messageResourceFilter.setUpdatedByID(userId);
            messageResourceFilter.setDateCreated(new Date());
            messageResourceFilter.setDateUpdated(new Date());

            returnValue = this.getMessageResourceBo().createAndStoreMessageResourceFilter(messageResourceFilter, userId);
		}
		catch (Exception ex)
		{
		     throw new MessageResourceSaveException("MessageResourceServiceImpl::createAndStoreMessageResourceFilter", ex);
		}		
		
		return returnValue;
    }
    
    
    /**
     * Updates an existing entry in the MESSAGERESOURCEFILTER table and associated tables 
     * containing the parameters passed here. If the entry denoted by the userID does not exist then one is created.
     *	
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws MessageResourceSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public Long updateMessageResourceFilter(MessageResourceFilter messageResourceFilter, Long userId)
        throws MessageResourceLoadException, MessageResourceSaveException, AuthorisationException, InvalidUserIDException
    {
    	Long returnValue = new Long(0);
    	
        //if (Authorisation.isAuthorisedUpdate("MessageResource", userId, MESSAGERESOURCEID) == false)
        //{
        //	throw new AuthorisationException();
        //}
    	
		try
		{
        
			messageResourceFilter.setUpdatedByID(userId);
            messageResourceFilter.setDateUpdated(new Date());
            returnValue = this.getMessageResourceBo().updateMessageResourceFilter(messageResourceFilter, userId);
        }
		catch (Exception ex)
		{
		     throw new MessageResourceSaveException("MessageResourceServiceImpl::updateMessageResourceFilter, userId: " + userId, ex);
		}	
		
		return returnValue;	
        
    }

	/**
	 * Translates the referenceId type properties into the locale specific text for display on the front-end.
	 * @param messageResource the dto object to be updated with the locale specific translations
	 * @param locale the Locale to be displayed
	 */    
    public MessageResource translateReferenceValues(MessageResource messageResource, Locale locale){
    	
    	return messageResource;
    }
    
	/**
	 * Translates the referenceId type properties into the locale specific text for display on the front-end.
	 * @param messageResourceList the dto object to be updated with the locale specific translations
	 * @param locale the Locale to be displayed
	 */    
    public List<MessageResource> translateReferenceValues(List<MessageResource> messageResourceList, Locale locale){
    	for (MessageResource messageResource :  messageResourceList){
    		messageResource = translateReferenceValues(messageResource, locale);
    	}
    	
    	return messageResourceList;
    }
    
	
    
    /**
     * Cleans up any Collection Objects created by the Class instance
     */
    protected void finalize() throws Throwable
    {
        super.finalize();
        
    }    
    
    
}
    
