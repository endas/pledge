package org.volunteertech.pledges.localisation.web;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import org.volunteertech.pledges.users.security.SecurityUser;

import org.volunteertech.pledges.main.localisation.DatabaseDrivenMessageSource;
import org.volunteertech.pledges.localisation.dao.MessageResource;
import org.volunteertech.pledges.localisation.dao.MessageResourceImpl;
import org.volunteertech.pledges.localisation.service.MessageResourceService;
import org.volunteertech.pledges.localisation.validator.MessageResourceFormValidator;
import org.volunteertech.pledges.localisation.view.MessageResourceTranslationBackingBean;
import org.volunteertech.pledges.localisation.view.MessageResourceTranslationBackingBeanImpl;
import org.volunteertech.pledges.main.web.BaseController;
import org.volunteertech.pledges.main.constants.Constants;

import org.volunteertech.pledges.admin.dao.View;


import org.volunteertech.pledges.reference.ReferenceStore;

/**
 * The model to hold localisation messages
 * GUIHandler is attached to a form on JSP and contains all getters and setters for values displayed on the form.
 * GUIHandler accesses the business layer for loading/saving data. 
 * This class has been generated by the XSLT processor from the metadata and represents the
 * the GUI layer javabean for the MessageResource Form.
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
@Controller
public class MessageResourceController extends BaseController
{

    /**
     * userId used for development. This should be taken from the session.
     */
	private Long userId = Long.valueOf(0);
	 
	final Logger logger = LoggerFactory.getLogger(MessageResourceController.class);
	
	@Autowired
	private ReferenceStore referenceStore;
	
	@Autowired
	private MessageResourceService messageResourceService;

	@Autowired
	private MessageResourceFormValidator messageResourceFormValidator;
	
    @Autowired
    private DatabaseDrivenMessageSource messageSource;
    


    
	
	//Set a form validator
	@InitBinder
	protected void initBinder(WebDataBinder binder) {
		binder.setValidator(messageResourceFormValidator);
	}
	
	
	/**
	 * Open the list page
	 */
	@RequestMapping(value = "/messageresource/all", method = RequestMethod.GET)
	public String showAllMessageResource(Model model, Locale locale) {

		logger.debug("showAllMessageResource()");
			
		return "messages/messageresource_table";

	}
	
	/**
	 * Open the localize page
	 */
	@RequestMapping(value = "/messageresource/localize", method = RequestMethod.GET)
	public String localizeMessageResource(Model model, Locale locale) {

		logger.debug("localizeMessageResource()");

		MessageResourceTranslationBackingBean messageResourceTranslationBackingBean = new MessageResourceTranslationBackingBeanImpl();
		messageResourceTranslationBackingBean.setCurrentMode(MessageResource.CurrentMode.LOCALIZE);
		model.addAttribute("messageResourceTranslationFormModel", messageResourceTranslationBackingBean);
		Long defaultLocale = Long.valueOf(Constants.REFERENCE_LOCALE__EN);
		setTranslationDropDownContents(model, locale);
		setDropDownContents(model, null, locale);		
		model.addAttribute("defaultLocale", defaultLocale);
		
		return "messages/messageresource_localize";

	}
	
	
	

	// save or update MessageResource
	// 1. @ModelAttribute bind form value
	// 2. @Validated form validator
	// 3. RedirectAttributes for flash value
	@RequestMapping(value = "/messageresource/post", method = RequestMethod.POST)
	public String saveOrUpdateMessageResource(Authentication authentication, @ModelAttribute("messageResourceFormModel") @Validated MessageResourceImpl messageResource,
			BindingResult result, Model model, Locale locale,
			final RedirectAttributes redirectAttributes) {

		logger.debug("saveOrUpdateMessageResource() : {}", messageResource);
		SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();
		

		if (result.hasErrors()) {
			setDropDownContents(model, messageResource, locale);
			String updateIssueMessage = messageSource.getMessage("messageResourceUpdateIssueMessage", new String[0], locale);
			model.addAttribute("msg", updateIssueMessage);
			model.addAttribute("css", "alert-danger");
			
			return "messages/messageresource";
		} else {

			// Add message to flash scope
			redirectAttributes.addFlashAttribute("css", "success");
			if(messageResource.isNew()){
				String addedSuccessMessage = messageSource.getMessage("messageResourceAddedSuccessMessage", new String[0], locale);
				// Add message to flash scope
				redirectAttributes.addFlashAttribute("msg", addedSuccessMessage);
				redirectAttributes.addFlashAttribute("css", "alert-success");
			}else{
				String updateSuccessMessage = messageSource.getMessage("messageResourceUpdateSuccessMessage", new String[0], locale);
				// Add message to flash scope
				redirectAttributes.addFlashAttribute("msg", updateSuccessMessage);
				redirectAttributes.addFlashAttribute("css", "alert-success");
			}


			try{
				// TODO: Needs exception handling policy
			    	messageResourceService.storeMessageResource(messageResource, userId);
			}
			catch (Exception ex){
				logger.error("Exception caught !!!!!!!!!!!!!!", ex);
			}
			
	
			

			
			// POST/REDIRECT/GET
			return "redirect:/messageresource/" + messageResource.getId() + "/update";
		}

	}

	// show add user form
	@RequestMapping(value = "/messageresource/add", method = RequestMethod.GET)
	public String showAddMessageResourceForm(Model model, Locale locale) {

		logger.debug("showAddMessageResourceForm()");

		MessageResource messageResource = new MessageResourceImpl();
		
		messageResource.setCurrentMode(MessageResource.CurrentMode.ADD);

		model.addAttribute("messageResourceFormModel", messageResource);

		setDropDownContents(model, messageResource, locale);

		return "messages/messageresource";

	}
	
	// support access to the supporting webpage by creating a new instance and returning 
	@RequestMapping(value = "/messageresourcewebpage", method = RequestMethod.GET)
	public String createMessageResourceForWebPageView(Model model, HttpServletRequest request, Locale locale) {

		logger.debug("createMessageResourceForWebPageView()");

		MessageResource messageResource = new MessageResourceImpl();
		
		try{
			// TODO: Needs exception handling policy
	    	messageResourceService.storeMessageResource(messageResource, userId);
		}
		catch (Exception ex){
			logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}
		

		model.addAttribute("messageResourceFormModel", messageResource);

		setDropDownContents(model, messageResource, locale);

		return "messages/messageresourcewebpage";

	}
	

	// show update form
	@RequestMapping(value = "/messageresource/{id}/update", method = RequestMethod.GET)
	public String showUpdateMessageResourceForm(@PathVariable("id") int id, Model model, Locale locale) {

		logger.debug("showUpdateMessageResourceForm() : {}", id);
		MessageResource messageResource = null;
		try{
			// TODO: Needs exception handling policy
			messageResource = messageResourceService.load(Long.valueOf(id), userId);
			messageResource.setCurrentMode(MessageResource.CurrentMode.UPDATE);
			this.messageResourceService.translateReferenceValues(messageResource, locale);
		}
		catch (Exception ex){
			logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}

		
		model.addAttribute("messageResourceFormModel", messageResource);
		
		setDropDownContents(model, messageResource, locale);
		
		return "messages/messageresource";

	}

	// delete messageResource
	@RequestMapping(value = "/messageresource/{id}/delete", method = RequestMethod.POST)
	public String deleteMessageResource(@PathVariable("id") int id, 
		final RedirectAttributes redirectAttributes) {

		logger.debug("deleteUser() : {}", id);

		//messageResourceService.delete(id);
		
		redirectAttributes.addFlashAttribute("css", "success");
		redirectAttributes.addFlashAttribute("msg", "User is deleted!");
		
		return "redirect:/messageresource/all";

	}

	// show user
	@RequestMapping(value = "/messageresource/{id}", method = RequestMethod.GET)
	public String showMessageResource(@PathVariable("id") int id, Model model, Locale locale) {

		logger.debug("showMessageResource() id: {}", id);
		MessageResource messageResource = null;
		try{
			// TODO: Needs exception handling policy
			messageResource = messageResourceService.load(Long.valueOf(id), userId);
		}
		catch (Exception ex){
			logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}

		
		if (messageResource == null) {
			model.addAttribute("css", "danger");
			model.addAttribute("msg", "User not found");
		}
		model.addAttribute("messageResource", messageResource);
		
		setDropDownContents(model, messageResource, locale);

		return "messages/showmessageresource";

	}
	
	
	// save or update MessageResourceTranslation
	// 1. @ModelAttribute bind form value
	// 2. @Validated form validator
	// 3. RedirectAttributes for flash value
	@RequestMapping(value = "/messageresource/translate", method = RequestMethod.POST)
	public String saveOrUpdateMessageResourceTranslation(Authentication authentication, @ModelAttribute("messageResourceTranslationFormModel") MessageResourceTranslationBackingBeanImpl messageResourceTranslationBackingBean,
			BindingResult result, Model model, Locale locale,
			final RedirectAttributes redirectAttributes) {

		logger.debug("saveOrUpdateMessageResourceTranslation() : {}", messageResourceTranslationBackingBean);
		Long translationLocaleReferenceId = messageResourceTranslationBackingBean.getNewLocale();
		String translationLocale = messageSource.getMessage(referenceStore.getRefDesc(translationLocaleReferenceId), new String[0], new Locale("en"));
		SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();
		

		try{
			
			// TODO: Needs exception handling policy
			List<MessageResource> messageResourceList  = new ArrayList<MessageResource>();
			
			MessageResource messageResource = populateMessageResource(MessageResourceTranslationBackingBeanImpl.MESSAGERESOURCE_HEADER_MAPPING_KEY, translationLocale, translationLocaleReferenceId, messageResourceTranslationBackingBean.getViewTitle());
			messageResourceList.add(messageResource);
			messageResource = populateMessageResource(MessageResourceTranslationBackingBeanImpl.MESSAGERESOURCE_TITLE_MAPPING_KEY, translationLocale, translationLocaleReferenceId, messageResourceTranslationBackingBean.getFormTitle());
			messageResourceList.add(messageResource);
			messageResource = populateMessageResource(MessageResourceTranslationBackingBeanImpl.MESSAGERESOURCE_SUBHEADER_MAPPING_KEY, translationLocale, translationLocaleReferenceId, messageResourceTranslationBackingBean.getFormSubHeader());
			messageResourceList.add(messageResource);
			
	messageResource = populateMessageResource(MessageResourceTranslationBackingBeanImpl.MESSAGEKEY_LABEL_MAPPING_KEY, translationLocale, translationLocaleReferenceId, messageResourceTranslationBackingBean.getMessageKeyLabel());
  			messageResourceList.add(messageResource);
  			messageResource = populateMessageResource(MessageResourceTranslationBackingBeanImpl.MESSAGEKEY_PLACEHOLDER_MAPPING_KEY, translationLocale, translationLocaleReferenceId, messageResourceTranslationBackingBean.getMessageKeyPlaceHolder());
  			messageResourceList.add(messageResource);
  			messageResource = populateMessageResource(MessageResourceTranslationBackingBeanImpl.MESSAGEKEY_HELPBLOCK_MAPPING_KEY, translationLocale, translationLocaleReferenceId, messageResourceTranslationBackingBean.getMessageKeyHelpText());
  			messageResourceList.add(messageResource);
  		
	messageResource = populateMessageResource(MessageResourceTranslationBackingBeanImpl.LOCALE_LABEL_MAPPING_KEY, translationLocale, translationLocaleReferenceId, messageResourceTranslationBackingBean.getLocaleLabel());
  			messageResourceList.add(messageResource);
  			messageResource = populateMessageResource(MessageResourceTranslationBackingBeanImpl.LOCALE_PLACEHOLDER_MAPPING_KEY, translationLocale, translationLocaleReferenceId, messageResourceTranslationBackingBean.getLocalePlaceHolder());
  			messageResourceList.add(messageResource);
  			messageResource = populateMessageResource(MessageResourceTranslationBackingBeanImpl.LOCALE_HELPBLOCK_MAPPING_KEY, translationLocale, translationLocaleReferenceId, messageResourceTranslationBackingBean.getLocaleHelpText());
  			messageResourceList.add(messageResource);
  		
	messageResource = populateMessageResource(MessageResourceTranslationBackingBeanImpl.LOCALEREFERENCEID_LABEL_MAPPING_KEY, translationLocale, translationLocaleReferenceId, messageResourceTranslationBackingBean.getLocaleReferenceIdLabel());
  			messageResourceList.add(messageResource);
  			messageResource = populateMessageResource(MessageResourceTranslationBackingBeanImpl.LOCALEREFERENCEID_PLACEHOLDER_MAPPING_KEY, translationLocale, translationLocaleReferenceId, messageResourceTranslationBackingBean.getLocaleReferenceIdPlaceHolder());
  			messageResourceList.add(messageResource);
  			messageResource = populateMessageResource(MessageResourceTranslationBackingBeanImpl.LOCALEREFERENCEID_HELPBLOCK_MAPPING_KEY, translationLocale, translationLocaleReferenceId, messageResourceTranslationBackingBean.getLocaleReferenceIdHelpText());
  			messageResourceList.add(messageResource);
  		
	messageResource = populateMessageResource(MessageResourceTranslationBackingBeanImpl.MESSAGE_LABEL_MAPPING_KEY, translationLocale, translationLocaleReferenceId, messageResourceTranslationBackingBean.getMessageLabel());
  			messageResourceList.add(messageResource);
  			messageResource = populateMessageResource(MessageResourceTranslationBackingBeanImpl.MESSAGE_PLACEHOLDER_MAPPING_KEY, translationLocale, translationLocaleReferenceId, messageResourceTranslationBackingBean.getMessagePlaceHolder());
  			messageResourceList.add(messageResource);
  			messageResource = populateMessageResource(MessageResourceTranslationBackingBeanImpl.MESSAGE_HELPBLOCK_MAPPING_KEY, translationLocale, translationLocaleReferenceId, messageResourceTranslationBackingBean.getMessageHelpText());
  			messageResourceList.add(messageResource);
  		
	messageResource = populateMessageResource(MessageResourceTranslationBackingBeanImpl.SAVEBUTTON_LABEL_MAPPING_KEY, translationLocale, translationLocaleReferenceId, messageResourceTranslationBackingBean.getSaveButtonLabel());
  			messageResourceList.add(messageResource);
  			messageResource = populateMessageResource(MessageResourceTranslationBackingBeanImpl.SAVEBUTTON_PLACEHOLDER_MAPPING_KEY, translationLocale, translationLocaleReferenceId, messageResourceTranslationBackingBean.getSaveButtonPlaceHolder());
  			messageResourceList.add(messageResource);
  			messageResource = populateMessageResource(MessageResourceTranslationBackingBeanImpl.SAVEBUTTON_HELPBLOCK_MAPPING_KEY, translationLocale, translationLocaleReferenceId, messageResourceTranslationBackingBean.getSaveButtonHelpText());
  			messageResourceList.add(messageResource);
  		

			

			this.messageSource.updateTexts(messageResourceList, userId);			
		}
		catch (Exception ex){
			logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}
			
		// POST/REDIRECT/GET
		return "redirect:/messageresource/add?language=" + translationLocale;

	}

	/**
	 * Opens the details of the View that owns the MessageResource identified by the
	 * id given as a parameter.
	 * @param id the id of the MessageResource for which the View should be resolved.
	 */
	@RequestMapping(value = "/messageresource/{id}/view", method = RequestMethod.GET)
	public String showView(Authentication authentication, @PathVariable("id") int id, 
		final RedirectAttributes redirectAttributes) {
		String returnPath = null;

		logger.debug("showView() : {}", id);
		
		SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();
		//TODO: Needs exception handling
		
		List<View> viewList = this.messageResourceService.getMessageResourceBo().getMessageResourceDao().listViewByMessageResourceId(Long.valueOf(id), userId);

		if (viewList.size() == 1){
			returnPath = "forward:/view/" + viewList.get(0).getId() + "/update";
		}
		else{
			returnPath = "forward:/view/all";
		}
		
		return returnPath;

	}

	

	private void setDropDownContents(Model model, MessageResource messageResource, Locale locale) {
		
		
		Map<Long, String> localeMap = referenceStore.getLocale();
		SortedMap<Long, String> localizedLocaleMap = new TreeMap<Long, String>(localeMap);
		for (Map.Entry<Long, String> entry : localeMap.entrySet()) {
			localizedLocaleMap.replace(entry.getKey(), messageSource.getMessage(entry.getValue(), new String[0], locale));
		}
		
		model.addAttribute("localeMap", localizedLocaleMap);
	}



}
