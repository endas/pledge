package org.volunteertech.pledges.localisation.business;
import com.netgrains.security.Authorisation;
import com.netgrains.security.AuthorisationException;
import com.netgrains.security.InvalidUserIDException;
import org.volunteertech.pledges.localisation.dao.MessageResource;
import org.volunteertech.pledges.localisation.dao.MessageResourceDao;
import org.volunteertech.pledges.localisation.dao.MessageResourceFilter;
import org.volunteertech.pledges.localisation.dao.MessageResourceHistory;
import org.volunteertech.pledges.localisation.dao.MessageResourceLoadException;
import org.volunteertech.pledges.localisation.dao.MessageResourceSaveException;

import java.util.Date;
import java.util.List;
import java.util.Set;
import java.math.BigDecimal;
import java.util.ArrayList;




/**
 * The model to hold localisation messages
 * This Class has been generated by the XSLT processor from the meta data and represents the
 * implementation of the Business Object(BO) for the MessageResource entity. A Business Object
 * is provided in order to provide a seperation from the Data Access implementation. 
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: * $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
public class MessageResourceBoImpl implements MessageResourceBo
{
	/**
	 * The Data Access Object
	 */
	MessageResourceDao  messageResourceDao;
	    
    
    

    /**
     * Default Constructor for the MessageResource Business Object.
     */
    public MessageResourceBoImpl()
    {
    	//Initialise the related Object stores
        
    }
    
    /**
     * Sets the required Data Access Object (DAO)
     * @param messageResourceDao the messageResourceDao used to access the messageResource entity.
     */
    public void setMessageResourceDao(MessageResourceDao messageResourceDao){
    	this.messageResourceDao = messageResourceDao;
    }

    /**
     * Returns the required Data Access Object (DAO)
     * @return the MessageResourceDao used to access the messageResource entity.
     */
    public MessageResourceDao getMessageResourceDao(){
    	return this.messageResourceDao;
    }
    

    /**
     * Loads a MessageResource object based on the MESSAGERESOURCEID column
     * @param MESSAGERESOURCEId the primary key for the underlying record.
     * @param userId the userId is checked for authorisation to view the record
     * @ return a MessageResource object matching the parameter or null if none can be found. The
     * method also returns null if the parameter is null.
     */
    public MessageResource load(Long messageResourceId, Long loggedInUserId) throws MessageResourceLoadException, AuthorisationException, InvalidUserIDException
    {
    	MessageResource messageResource = null;
    	
        if (Authorisation.isAuthorisedView("MessageResource", loggedInUserId, messageResourceId) == false)
        {
        	throw new AuthorisationException();
        }
    	

        if (messageResourceId != null)
        {
        	try
        	{
				messageResource = (MessageResource)this.getMessageResourceDao().load(messageResourceId, loggedInUserId);
        	}
			catch (Exception ex)
			{
			     throw new MessageResourceLoadException("MessageResourceDaoImpl::load", ex);
			}		
    		
            // Load all related singular objects
            
        }
    	
        return messageResource;
    }
    
    
    


    /**
     * Load all existing MessageResource objects. 
     * @return List a List of MessageResource objects.
     */
    public List<MessageResource> listMessageResource()
    {
        List<MessageResource> result = this.getMessageResourceDao().listMessageResource();

        return result;
    }
    
    
    /**
     * Returns a <code>List</code> of MessageResource objects that have a matching messageKey
     * @return List a List of MessageResource objects that match the messageKey property given as parameter.
     * @param messageKey the messageKey on which to match the required records.
     */
    public List<MessageResource> listMessageResourceByMessageKey(String messageKey)
    {
        List<MessageResource> result = this.getMessageResourceDao().listMessageResourceByMessageKey(messageKey);

        return result;
    }

    /**
     * Returns a <code>List</code> of MessageResource objects that have a matching locale
     * @return List a List of MessageResource objects that match the locale property given as parameter.
     * @param locale the locale on which to match the required records.
     */
    public List<MessageResource> listMessageResourceByLocale(String locale)
    {
        List<MessageResource> result = this.getMessageResourceDao().listMessageResourceByLocale(locale);

        return result;
    }

    /**
     * Returns a <code>List</code> of MessageResource objects that have a matching localeReferenceId
     * @return List a List of MessageResource objects that match the localeReferenceId property given as parameter.
     * @param localeReferenceId the localeReferenceId on which to match the required records.
     */
    public List<MessageResource> listMessageResourceByLocaleReferenceId(Long localeReferenceId)
    {
        List<MessageResource> result = this.getMessageResourceDao().listMessageResourceByLocaleReferenceId(localeReferenceId);

        return result;
    }

    /**
     * Returns a <code>List</code> of MessageResource objects that have a matching message
     * @return List a List of MessageResource objects that match the message property given as parameter.
     * @param message the message on which to match the required records.
     */
    public List<MessageResource> listMessageResourceByMessage(String message)
    {
        List<MessageResource> result = this.getMessageResourceDao().listMessageResourceByMessage(message);

        return result;
    }

    
	/**
     * Load existing MessageResource objects from the database that have a createdByID column
     * that matches the userId parameter.
     * @return List a List of MessageResource objects that match the userId parameter.
     */
    public List<MessageResource> listMessageResourceByCreatedById(Long userId)
    {
        List<MessageResource> result = this.getMessageResourceDao().listMessageResourceByCreatedById(userId);

        return result;
    }
    
    
    /**
     * Load all existing MessageResourceHistory objects for a particular MessageResource.
     * The <code>List</code> of MessageResourceHistory objects contains all of the changes that have been made to the
     * MessageResource object identified by the messageResource parameter'
     * @return List a List of MessageResourceHistory objects.
     */
    public List<MessageResourceHistory> listMessageResourceHistory(Long messageResource)
    {
        List<MessageResourceHistory> result = this.getMessageResourceDao().listMessageResourceHistory(messageResource);

        return result;
    }
    
    
    /**
     * Load a <code>List</code> of MessageResource objects from the database that match the
     * messageResourceId parameter, the View and the MessageResource being related by an association.
     * @return a <code>List</code> of MessageResource objects that match the messageResourceId parameter.
     */
    public List<MessageResource> listMessageResourceByViewId(Long viewId)
    {
        List<MessageResource> result = this.getMessageResourceDao().listMessageResourceByViewId(viewId);
        
        return result;
    }
  
      
    /**
     * Load a MessageResource object using the Locale and messageKey as search parameters.
     * @return a MessageResource object.
     */
    public MessageResource loadMessageResourceForLocale(String messageKey, String locale) throws MessageResourceLoadException
    {
        MessageResource returnValue = null;

		try
		{
            returnValue = this.getMessageResourceDao().loadMessageResourceForLocale(messageKey, locale);
		}
		catch (Exception ex)
		{
		     throw new MessageResourceLoadException("getMessageResourceForLocale(?, ?)", ex);
		}		
		
		return returnValue;
    }
      
    
    
    /**
     * Creates a new entry in the MESSAGERESOURCE table containing the parameters passed here.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the database generated Id of the newly created record.
     * @throws MessageResourceSaveException on failure to save.  
     */
    public Long createAndStoreMessageResource(MessageResource messageResource, Long userID)
        throws MessageResourceSaveException
    {
    	Long returnValue = Long.valueOf(0);
        
		try
		{
            returnValue = this.getMessageResourceDao().createAndStoreMessageResource(messageResource, userID);
		}
		catch (Exception ex)
		{
		     throw new MessageResourceSaveException("MessageResourceEntityDataManager::createAndStoreMessageResource", ex);
		}		
		
		return returnValue;
    }


    /**
     * Updates an existing entry in the MESSAGERESOURCE table containing the parameters passed here.
     * Only non-null parameters will be applied to the underlying table so preserving any existing entries.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws MessageResourceLoadException if the existing record cannot be loaded
     * @throws MessageResourceSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public void updateMessageResource(MessageResource messageResource, Long userID)
        throws MessageResourceSaveException, MessageResourceLoadException, AuthorisationException, InvalidUserIDException
    {
    	
        if (Authorisation.isAuthorisedUpdate("MessageResource", userID, messageResource.getId()) == false)
        {
        	throw new AuthorisationException();
        }
    	
		try
		{
            this.getMessageResourceDao().updateMessageResource(messageResource, userID);
        }
		catch (Exception ex)
		{
		     throw new MessageResourceSaveException("MessageResourceEntityDataManager::updateMessageResource, MessageResourceID: " + messageResource.getId(), ex);
		}		
        
    }
    
    
    /**
     * Loads a MessageResourceFilter object based on the participantID of the currently logged in user
     * @param userId the userId is checked for authorisation to view the record. It is also the key to load a against the createdByID
     * column of the underlying record. There should only ever be one or zero filter records per MessageResource.
     * @ return a MessageResourceFilter object matching the parameter or a newly constructed, empty object if none can be found
     */
    public MessageResourceFilter loadMessageResourceFilter(Long userId) throws MessageResourceLoadException, AuthorisationException, InvalidUserIDException
    {
    	MessageResourceFilter messageResourceFilter = null;
    	
        /*if (Authorisation.isAuthorisedView("MessageResource", userId, MESSAGERESOURCEID) == false)
        {
        	throw new AuthorisationException();
        }*/
    	

        if (userId != null)
        {
        	
        	try
        	{
				messageResourceFilter = (MessageResourceFilter)this.getMessageResourceDao().loadMessageResourceFilter(userId);
        	}
			catch (Exception ex)
			{
			     throw new MessageResourceLoadException("MessageResourceBoImpl::loadMessageResourceFilter", ex);
			}		
    		
            // Load all related singular objects
            
        }
    	
        return messageResourceFilter;
    }
    
    /**
     * Creates a new entry in the MESSAGERESOURCEFILTER table containing the parameters passed here.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the userId which is also the assigned Id for the newly created record.
     * @throws MessageResourceSaveException on failure to save.  
     */
    public Long createAndStoreMessageResourceFilter(MessageResourceFilter messageResourceFilter,  Long userId)
        throws MessageResourceSaveException
    {
    	Long returnValue = Long.valueOf(0);
        
		try
		{
            messageResourceFilter.setId(userId);
			messageResourceFilter.setCreatedByID(userId);
            messageResourceFilter.setUpdatedByID(userId);
            messageResourceFilter.setDateCreated(new Date());
            messageResourceFilter.setDateUpdated(new Date());

            returnValue = this.getMessageResourceDao().createAndStoreMessageResourceFilter(messageResourceFilter, userId);
		}
		catch (Exception ex)
		{
		     throw new MessageResourceSaveException("MessageResourceBoImpl::createAndStoreMessageResourceFilter", ex);
		}		
		
		return returnValue;
    }
    
    
    /**
     * Updates an existing entry in the MESSAGERESOURCEFILTER table and associated tables 
     * containing the parameters passed here. If the entry denoted by the userID does not exist then one is created.
     *	
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws MessageResourceSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public Long updateMessageResourceFilter(MessageResourceFilter messageResourceFilter, Long userId)
        throws MessageResourceLoadException, MessageResourceSaveException, AuthorisationException, InvalidUserIDException
    {
    	Long returnValue = Long.valueOf(0);
    	
        //if (Authorisation.isAuthorisedUpdate("MessageResource", userId, MESSAGERESOURCEID) == false)
        //{
        //	throw new AuthorisationException();
        //}
    	
		try
		{
			messageResourceFilter.setId(userId);
			messageResourceFilter.setUpdatedByID(userId);
            messageResourceFilter.setDateUpdated(new Date());
            returnValue = this.getMessageResourceDao().updateMessageResourceFilter(messageResourceFilter, userId);
        }
		catch (Exception ex)
		{
		     throw new MessageResourceSaveException("MessageResourceBoImpl::updateMessageResourceFilter, userId: " + userId, ex);
		}	
		
		return returnValue;	
        
    }
    

    
    /**
     * Cleans up any Collection Objects created by the Class instance
     */
    protected void finalize() throws Throwable
    {
        super.finalize();
        
    }    
    
    
}
    
