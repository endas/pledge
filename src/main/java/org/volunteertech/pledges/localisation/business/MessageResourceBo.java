package org.volunteertech.pledges.localisation.business;
import com.netgrains.security.AuthorisationException;
import com.netgrains.security.InvalidUserIDException;
import org.volunteertech.pledges.localisation.dao.MessageResource;
import org.volunteertech.pledges.localisation.dao.MessageResourceDao;
import org.volunteertech.pledges.localisation.dao.MessageResourceFilter;
import org.volunteertech.pledges.localisation.dao.MessageResourceHistory;
import org.volunteertech.pledges.localisation.dao.MessageResourceLoadException;
import org.volunteertech.pledges.localisation.dao.MessageResourceSaveException;
import java.util.List;
import java.util.Set;
import java.util.Date;
import java.math.BigDecimal;

import org.volunteertech.pledges.admin.dao.View;



/**
 * The model to hold localisation messages
 * This Interface has been generated by the XSLT processor from the meta data and represents the
 * interface of the Business Object(BO) for the MessageResource entity. A Business Object
 * is provided in order to provide a seperation from the Data Access implementation. 
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: * $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
public interface MessageResourceBo
{
    
    
    /**
     * Sets the required Data Access Object (DAO)
     * @param messageResourceDao the messageResourceDao used to access the messageResource entity.
     */
    public void setMessageResourceDao(MessageResourceDao messageResourceDao);
    

    /**
     * Returns the required Data Access Object (DAO)
     * @return the MessageResourceDao used to access the messageResource entity.
     */
    public MessageResourceDao getMessageResourceDao();
    

    
    /**
     * Loads a MessageResource object based on the MESSAGERESOURCEID column
     * @param MESSAGERESOURCEID the primary key for the underlying record.
     * @param userID the userID is checked for authorisation to view the record
     * @ return a MessageResource object matching the parameter or null if none can be found. The
     * method also returns null if the parameter is null.
     */
    public MessageResource load(Long messageResourceID, Long loggedInUserId) throws MessageResourceLoadException, AuthorisationException, InvalidUserIDException;
    
    

    /**
     * Load all existing MessageResource objects. 
     * @return List a List of MessageResource objects.
     */
    public List<MessageResource> listMessageResource();
    
    
    /**
     * Returns a <code>List</code> of MessageResource objects that have a matching messageKey
     * @return List a List of MessageResource objects that match the messageKey property given as parameter.
     * @param messageKey the messageKey on which to match the required records.
     */
    public List<MessageResource> listMessageResourceByMessageKey(String messageKey);

    /**
     * Returns a <code>List</code> of MessageResource objects that have a matching locale
     * @return List a List of MessageResource objects that match the locale property given as parameter.
     * @param locale the locale on which to match the required records.
     */
    public List<MessageResource> listMessageResourceByLocale(String locale);

    /**
     * Returns a <code>List</code> of MessageResource objects that have a matching localeReferenceId
     * @return List a List of MessageResource objects that match the localeReferenceId property given as parameter.
     * @param localeReferenceId the localeReferenceId on which to match the required records.
     */
    public List<MessageResource> listMessageResourceByLocaleReferenceId(Long localeReferenceId);

    /**
     * Returns a <code>List</code> of MessageResource objects that have a matching message
     * @return List a List of MessageResource objects that match the message property given as parameter.
     * @param message the message on which to match the required records.
     */
    public List<MessageResource> listMessageResourceByMessage(String message);

    
    /**
     * Load existing MessageResource objects from the database that have a createdByID column
     * that matches the userId parameter.
     * @return List a List of MessageResource objects that match the userId parameter.
     */
    public List<MessageResource> listMessageResourceByCreatedById(Long userId);
    
    
    /**
     * Load all existing MessageResourceHistory objects for a particular MessageResource.
     * The <code>List</code> of MessageResourceHistory objects contains all of the changes that have been made to the
     * MessageResource object identified by the messageResource parameter'
     * @return List a List of MessageResourceHistory objects.
     */
    public List<MessageResourceHistory> listMessageResourceHistory(Long messageResource) throws Exception;
    
    
    /**
     * Load a <code>List</code> of MessageResource objects from the database that match the
     * messageResourceId parameter, the View and the MessageResource being related by an association.
     * @return a <code>List</code> of MessageResource objects that match the messageResourceId parameter.
     */
    public List<MessageResource> listMessageResourceByViewId(Long viewId);
  
      
    /**
     * Load a MessageResource object using the Locale and messageKey as search parameters.
     * @return a MessageResource object.
     */
    public MessageResource loadMessageResourceForLocale(String messageKey, String locale) throws MessageResourceLoadException;
	      
    
    /**
     * Creates a new entry in the MESSAGERESOURCE table containing the parameters passed here.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the database generated Id of the newly created record.
     * @throws MessageResourceSaveException on failure to save.  
     */
    public Long createAndStoreMessageResource(MessageResource messageResource, Long userID)
        throws MessageResourceSaveException;


    /**
     * Updates an existing entry in the MESSAGERESOURCE table containing the parameters passed here.
     * Only non-null parameters will be applied to the underlying table so preserving any existing entries.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws MessageResourceLoadException if the existing record cannot be loaded
     * @throws MessageResourceSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public void updateMessageResource(MessageResource messageResource, Long userID)
        throws MessageResourceSaveException, MessageResourceLoadException, AuthorisationException, InvalidUserIDException;
    
    
    /**
     * Loads a MessageResourceFilter object based on the participantID of the currently logged in user
     * @param userId the userId is checked for authorisation to view the record. It is also the key to load a against the createdByID
     * column of the underlying record. There should only ever be one or zero filter records per MessageResource.
     * @ return a MessageResourceFilter object matching the parameter or a newly constructed, empty object if none can be found
     */
    public MessageResourceFilter loadMessageResourceFilter(Long userId) throws MessageResourceLoadException, AuthorisationException, InvalidUserIDException;


    
    /**
     * Creates a new entry in the MESSAGERESOURCEFILTER table containing the parameters passed here.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the userId which is also the assigned Id for the newly created record.
     * @throws MessageResourceSaveException on failure to save.  
     */
    public Long createAndStoreMessageResourceFilter(MessageResourceFilter messageResourceFilter, Long userId)
        throws MessageResourceSaveException;
    
    
    /**
     * Updates an existing entry in the MESSAGERESOURCEFILTER table and associated tables 
     * containing the parameters passed here. If the entry denoted by the userID does not exist then one is created.
     *	
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws MessageResourceSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public Long updateMessageResourceFilter(MessageResourceFilter messageResourceFilter, Long userId)
        throws MessageResourceLoadException, MessageResourceSaveException, AuthorisationException, InvalidUserIDException;
    
}
    
