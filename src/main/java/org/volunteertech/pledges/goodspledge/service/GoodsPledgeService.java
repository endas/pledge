package org.volunteertech.pledges.goodspledge.service;
import com.netgrains.security.AuthorisationException;
import com.netgrains.security.InvalidUserIDException;
import org.volunteertech.pledges.goodspledge.dao.GoodsPledge;
import org.volunteertech.pledges.goodspledge.business.GoodsPledgeBo;
import org.volunteertech.pledges.goodspledge.dao.GoodsPledgeFilter;
import org.volunteertech.pledges.goodspledge.dao.GoodsPledgeHistory;
import org.volunteertech.pledges.goodspledge.dao.GoodsPledgeLoadException;
import org.volunteertech.pledges.goodspledge.dao.GoodsPledgeSaveException;
import java.util.List;
import java.util.Set;
import java.util.Date;
import java.math.BigDecimal;
import java.util.Locale;


import org.volunteertech.pledges.reference.service.ReferenceService;
  
import org.volunteertech.pledges.localisation.service.MessageResourceService;
  


/**
 * The goods pledge screen is used to add/edit a new/existing pledge of services
 * This Interface has been generated by the XSLT processor from the meta data and represents the
 * interface of the Service  Layer Object for the GoodsPledge entity. A Business Object
 * is provided in order to provide a seperation from the Data Access implementation. 
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: * $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
public interface GoodsPledgeService
{
    
	/**
	 * Sets the reference Service to perform a user roles lookup
	 */
	public void setReferenceService(ReferenceService referenceService);
	
	/**
	 * Returns a reference to reference Service.
	 */
	public ReferenceService getReferenceService();
	  
	/**
	 * Sets the message resource service to perform localization lookups
	 */
	public void setMessageResourceService(MessageResourceService messageResourceService);
	
	/**
	 * Returns a reference to the message resource service.
	 */
	public MessageResourceService getMessageResourceService();
  
    
    /**
     * Sets the required Business Object (BO)
     * @param goodsPledgeBo the goodsPledgeBo used to access the goodsPledge entity
     * and it's associations.
     */
    public void setGoodsPledgeBo(GoodsPledgeBo goodsPledgeBo);
    

    /**
     * Returns the required Business Object (BO)
     * @return the GoodsPledgeBo used to access the goodsPledge entity
     * and it's associations.
     */
    public GoodsPledgeBo getGoodsPledgeBo();
    
    

    /**
     * Loads a GoodsPledge object based on the GOODSPLEDGEID column
     * @param GOODSPLEDGEID the primary key for the underlying record.
     * @param userID the userID is checked for authorisation to view the record
     * @ return a GoodsPledge object matching the parameter or null if none can be found. The
     * method also returns null if the parameter is null.
     */
    public GoodsPledge load(Long goodsPledgeID, Long loggedInUserId) throws GoodsPledgeLoadException, AuthorisationException, InvalidUserIDException;
    
    

    /**
     * Load all existing GoodsPledge objects. 
     * @return List a List of GoodsPledge objects.
     */
    public List<GoodsPledge> listGoodsPledge();
    
    
    /**
     * Returns a <code>List</code> of GoodsPledge objects that have a matching goodsCategoryOne
     * @return List a List of GoodsPledge objects that match the goodsCategoryOne property given as parameter.
     * @param goodsCategoryOne the goodsCategoryOne on which to match the required records.
     */
    public List<GoodsPledge> listGoodsPledgeByGoodsCategoryOne(Long goodsCategoryOne);

    /**
     * Returns a <code>List</code> of GoodsPledge objects that have a matching goodsCategoryTwo
     * @return List a List of GoodsPledge objects that match the goodsCategoryTwo property given as parameter.
     * @param goodsCategoryTwo the goodsCategoryTwo on which to match the required records.
     */
    public List<GoodsPledge> listGoodsPledgeByGoodsCategoryTwo(Long goodsCategoryTwo);

    /**
     * Returns a <code>List</code> of GoodsPledge objects that have a matching goodsCategoryThree
     * @return List a List of GoodsPledge objects that match the goodsCategoryThree property given as parameter.
     * @param goodsCategoryThree the goodsCategoryThree on which to match the required records.
     */
    public List<GoodsPledge> listGoodsPledgeByGoodsCategoryThree(Long goodsCategoryThree);

    /**
     * Returns a <code>List</code> of GoodsPledge objects that have a matching goodsSize
     * @return List a List of GoodsPledge objects that match the goodsSize property given as parameter.
     * @param goodsSize the goodsSize on which to match the required records.
     */
    public List<GoodsPledge> listGoodsPledgeByGoodsSize(Long goodsSize);

    /**
     * Returns a <code>List</code> of GoodsPledge objects that have a matching goodsNewOrUsed
     * @return List a List of GoodsPledge objects that match the goodsNewOrUsed property given as parameter.
     * @param goodsNewOrUsed the goodsNewOrUsed on which to match the required records.
     */
    public List<GoodsPledge> listGoodsPledgeByGoodsNewOrUsed(Long goodsNewOrUsed);

    /**
     * Returns a <code>List</code> of GoodsPledge objects that have a matching goodsCondition
     * @return List a List of GoodsPledge objects that match the goodsCondition property given as parameter.
     * @param goodsCondition the goodsCondition on which to match the required records.
     */
    public List<GoodsPledge> listGoodsPledgeByGoodsCondition(Long goodsCondition);

    /**
     * Returns a <code>List</code> of GoodsPledge objects that have a matching goodsQuantity
     * @return List a List of GoodsPledge objects that match the goodsQuantity property given as parameter.
     * @param goodsQuantity the goodsQuantity on which to match the required records.
     */
    public List<GoodsPledge> listGoodsPledgeByGoodsQuantity(Long goodsQuantity);

    /**
     * Returns a <code>List</code> of GoodsPledge objects that have a matching additionalInformation
     * @return List a List of GoodsPledge objects that match the additionalInformation property given as parameter.
     * @param additionalInformation the additionalInformation on which to match the required records.
     */
    public List<GoodsPledge> listGoodsPledgeByAdditionalInformation(String additionalInformation);

    /**
     * Returns a <code>List</code> of GoodsPledge objects that have a matching itemSize
     * @return List a List of GoodsPledge objects that match the itemSize property given as parameter.
     * @param itemSize the itemSize on which to match the required records.
     */
    public List<GoodsPledge> listGoodsPledgeByItemSize(String itemSize);

    
    
    /**
     * Load existing GoodsPledge objects from the database that have a createdByID column
     * that matches the userId parameter.
     * @return List a List of GoodsPledge objects that match the userId parameter.
     */
    public List<GoodsPledge> listGoodsPledgeByCreatedById(Long userId);
    
    
    /**
     * Load all existing GoodsPledgeHistory objects for a particular GoodsPledge.
     * The <code>List</code> of GoodsPledgeHistory objects contains all of the changes that have been made to the
     * GoodsPledge object identified by the goodsPledge parameter'
     * @return List a List of GoodsPledgeHistory objects.
     */
    public List<GoodsPledgeHistory> listGoodsPledgeHistory(Long goodsPledge) throws Exception;
    
    
    
    /**
     * Either updates an existing entry in the GOODSPLEDGE table or adds a new entry if one does not exist.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws GoodsPledgeLoadException if the existing record cannot be loaded
     * @throws GoodsPledgeSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public void storeGoodsPledge(GoodsPledge goodsPledge, Long userId)
        throws GoodsPledgeSaveException, GoodsPledgeLoadException, AuthorisationException, InvalidUserIDException;
    
    
    /**
     * Loads a GoodsPledgeFilter object based on the participantID of the currently logged in user
     * @param userId the userId is checked for authorisation to view the record. It is also the key to load a against the createdByID
     * column of the underlying record. There should only ever be one or zero filter records per GoodsPledge.
     * @ return a GoodsPledgeFilter object matching the parameter or a newly constructed, empty object if none can be found
     */
    public GoodsPledgeFilter loadGoodsPledgeFilter(Long userId) throws GoodsPledgeLoadException, AuthorisationException, InvalidUserIDException;


    
    /**
     * Creates a new entry in the GOODSPLEDGEFILTER table containing the parameters passed here.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the userID which is also the assigned Id for the newly created record.
     * @throws GoodsPledgeSaveException on failure to save.  
     */
    public Long createAndStoreGoodsPledgeFilter(GoodsPledgeFilter goodsPledgeFilter, Long userId)
        throws GoodsPledgeSaveException;
    
    
    /**
     * Updates an existing entry in the GOODSPLEDGEFILTER table and associated tables 
     * containing the parameters passed here. If the entry denoted by the userID does not exist then one is created.
     *	
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws GoodsPledgeSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public Long updateGoodsPledgeFilter(GoodsPledgeFilter goodsPledgeFilter, Long userId)
        throws GoodsPledgeLoadException, GoodsPledgeSaveException, AuthorisationException, InvalidUserIDException;
    

	/**
	 * Translates the referenceId type properties into the locale specific text for display on the front-end.
	 * @param goodsPledge the dto object to be updated with the locale specific translations
	 * @param locale the Locale to be displayed
	 * @return the same GoodsPledge object but with the locale translation fields populated with the message
	 * that is relevant to the current locale
	 */    
    public GoodsPledge translateReferenceValues(GoodsPledge goodsPledge, Locale locale);
    
	/**
	 * Translates the referenceId type properties into the locale specific text for display on the front-end.
	 * @param goodsPledgeList the dto object to be updated with the locale specific translations
	 * @param locale the Locale to be displayed
	 */    
    public List<GoodsPledge> translateReferenceValues(List<GoodsPledge> goodsPledgeList, Locale locale);
    
	
    
}    
