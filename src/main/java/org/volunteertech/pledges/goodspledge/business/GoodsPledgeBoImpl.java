package org.volunteertech.pledges.goodspledge.business;
import com.netgrains.security.Authorisation;
import com.netgrains.security.AuthorisationException;
import com.netgrains.security.InvalidUserIDException;
import org.volunteertech.pledges.goodspledge.dao.GoodsPledge;
import org.volunteertech.pledges.goodspledge.dao.GoodsPledgeDao;
import org.volunteertech.pledges.goodspledge.dao.GoodsPledgeFilter;
import org.volunteertech.pledges.goodspledge.dao.GoodsPledgeHistory;
import org.volunteertech.pledges.goodspledge.dao.GoodsPledgeLoadException;
import org.volunteertech.pledges.goodspledge.dao.GoodsPledgeSaveException;

import java.util.Date;
import java.util.List;
import java.util.Set;
import java.math.BigDecimal;
import java.util.ArrayList;




/**
 * The goods pledge screen is used to add/edit a new/existing pledge of services
 * This Class has been generated by the XSLT processor from the meta data and represents the
 * implementation of the Business Object(BO) for the GoodsPledge entity. A Business Object
 * is provided in order to provide a seperation from the Data Access implementation. 
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: * $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
public class GoodsPledgeBoImpl implements GoodsPledgeBo
{
	/**
	 * The Data Access Object
	 */
	GoodsPledgeDao  goodsPledgeDao;
	    
    
    

    /**
     * Default Constructor for the GoodsPledge Business Object.
     */
    public GoodsPledgeBoImpl()
    {
    	//Initialise the related Object stores
        
    }
    
    /**
     * Sets the required Data Access Object (DAO)
     * @param goodsPledgeDao the goodsPledgeDao used to access the goodsPledge entity.
     */
    public void setGoodsPledgeDao(GoodsPledgeDao goodsPledgeDao){
    	this.goodsPledgeDao = goodsPledgeDao;
    }

    /**
     * Returns the required Data Access Object (DAO)
     * @return the GoodsPledgeDao used to access the goodsPledge entity.
     */
    public GoodsPledgeDao getGoodsPledgeDao(){
    	return this.goodsPledgeDao;
    }
    

    /**
     * Loads a GoodsPledge object based on the GOODSPLEDGEID column
     * @param GOODSPLEDGEId the primary key for the underlying record.
     * @param userId the userId is checked for authorisation to view the record
     * @ return a GoodsPledge object matching the parameter or null if none can be found. The
     * method also returns null if the parameter is null.
     */
    public GoodsPledge load(Long goodsPledgeId, Long loggedInUserId) throws GoodsPledgeLoadException, AuthorisationException, InvalidUserIDException
    {
    	GoodsPledge goodsPledge = null;
    	
        if (Authorisation.isAuthorisedView("GoodsPledge", loggedInUserId, goodsPledgeId) == false)
        {
        	throw new AuthorisationException();
        }
    	

        if (goodsPledgeId != null)
        {
        	try
        	{
				goodsPledge = (GoodsPledge)this.getGoodsPledgeDao().load(goodsPledgeId, loggedInUserId);
        	}
			catch (Exception ex)
			{
			     throw new GoodsPledgeLoadException("GoodsPledgeDaoImpl::load", ex);
			}		
    		
            // Load all related singular objects
            
        }
    	
        return goodsPledge;
    }
    
    
    


    /**
     * Load all existing GoodsPledge objects. 
     * @return List a List of GoodsPledge objects.
     */
    public List<GoodsPledge> listGoodsPledge()
    {
        List<GoodsPledge> result = this.getGoodsPledgeDao().listGoodsPledge();

        return result;
    }
    
    
    /**
     * Returns a <code>List</code> of GoodsPledge objects that have a matching goodsCategoryOne
     * @return List a List of GoodsPledge objects that match the goodsCategoryOne property given as parameter.
     * @param goodsCategoryOne the goodsCategoryOne on which to match the required records.
     */
    public List<GoodsPledge> listGoodsPledgeByGoodsCategoryOne(Long goodsCategoryOne)
    {
        List<GoodsPledge> result = this.getGoodsPledgeDao().listGoodsPledgeByGoodsCategoryOne(goodsCategoryOne);

        return result;
    }

    /**
     * Returns a <code>List</code> of GoodsPledge objects that have a matching goodsCategoryTwo
     * @return List a List of GoodsPledge objects that match the goodsCategoryTwo property given as parameter.
     * @param goodsCategoryTwo the goodsCategoryTwo on which to match the required records.
     */
    public List<GoodsPledge> listGoodsPledgeByGoodsCategoryTwo(Long goodsCategoryTwo)
    {
        List<GoodsPledge> result = this.getGoodsPledgeDao().listGoodsPledgeByGoodsCategoryTwo(goodsCategoryTwo);

        return result;
    }

    /**
     * Returns a <code>List</code> of GoodsPledge objects that have a matching goodsCategoryThree
     * @return List a List of GoodsPledge objects that match the goodsCategoryThree property given as parameter.
     * @param goodsCategoryThree the goodsCategoryThree on which to match the required records.
     */
    public List<GoodsPledge> listGoodsPledgeByGoodsCategoryThree(Long goodsCategoryThree)
    {
        List<GoodsPledge> result = this.getGoodsPledgeDao().listGoodsPledgeByGoodsCategoryThree(goodsCategoryThree);

        return result;
    }

    /**
     * Returns a <code>List</code> of GoodsPledge objects that have a matching goodsSize
     * @return List a List of GoodsPledge objects that match the goodsSize property given as parameter.
     * @param goodsSize the goodsSize on which to match the required records.
     */
    public List<GoodsPledge> listGoodsPledgeByGoodsSize(Long goodsSize)
    {
        List<GoodsPledge> result = this.getGoodsPledgeDao().listGoodsPledgeByGoodsSize(goodsSize);

        return result;
    }

    /**
     * Returns a <code>List</code> of GoodsPledge objects that have a matching goodsNewOrUsed
     * @return List a List of GoodsPledge objects that match the goodsNewOrUsed property given as parameter.
     * @param goodsNewOrUsed the goodsNewOrUsed on which to match the required records.
     */
    public List<GoodsPledge> listGoodsPledgeByGoodsNewOrUsed(Long goodsNewOrUsed)
    {
        List<GoodsPledge> result = this.getGoodsPledgeDao().listGoodsPledgeByGoodsNewOrUsed(goodsNewOrUsed);

        return result;
    }

    /**
     * Returns a <code>List</code> of GoodsPledge objects that have a matching goodsCondition
     * @return List a List of GoodsPledge objects that match the goodsCondition property given as parameter.
     * @param goodsCondition the goodsCondition on which to match the required records.
     */
    public List<GoodsPledge> listGoodsPledgeByGoodsCondition(Long goodsCondition)
    {
        List<GoodsPledge> result = this.getGoodsPledgeDao().listGoodsPledgeByGoodsCondition(goodsCondition);

        return result;
    }

    /**
     * Returns a <code>List</code> of GoodsPledge objects that have a matching goodsQuantity
     * @return List a List of GoodsPledge objects that match the goodsQuantity property given as parameter.
     * @param goodsQuantity the goodsQuantity on which to match the required records.
     */
    public List<GoodsPledge> listGoodsPledgeByGoodsQuantity(Long goodsQuantity)
    {
        List<GoodsPledge> result = this.getGoodsPledgeDao().listGoodsPledgeByGoodsQuantity(goodsQuantity);

        return result;
    }

    /**
     * Returns a <code>List</code> of GoodsPledge objects that have a matching additionalInformation
     * @return List a List of GoodsPledge objects that match the additionalInformation property given as parameter.
     * @param additionalInformation the additionalInformation on which to match the required records.
     */
    public List<GoodsPledge> listGoodsPledgeByAdditionalInformation(String additionalInformation)
    {
        List<GoodsPledge> result = this.getGoodsPledgeDao().listGoodsPledgeByAdditionalInformation(additionalInformation);

        return result;
    }

    /**
     * Returns a <code>List</code> of GoodsPledge objects that have a matching itemSize
     * @return List a List of GoodsPledge objects that match the itemSize property given as parameter.
     * @param itemSize the itemSize on which to match the required records.
     */
    public List<GoodsPledge> listGoodsPledgeByItemSize(String itemSize)
    {
        List<GoodsPledge> result = this.getGoodsPledgeDao().listGoodsPledgeByItemSize(itemSize);

        return result;
    }

    
	/**
     * Load existing GoodsPledge objects from the database that have a createdByID column
     * that matches the userId parameter.
     * @return List a List of GoodsPledge objects that match the userId parameter.
     */
    public List<GoodsPledge> listGoodsPledgeByCreatedById(Long userId)
    {
        List<GoodsPledge> result = this.getGoodsPledgeDao().listGoodsPledgeByCreatedById(userId);

        return result;
    }
    
    
    /**
     * Load all existing GoodsPledgeHistory objects for a particular GoodsPledge.
     * The <code>List</code> of GoodsPledgeHistory objects contains all of the changes that have been made to the
     * GoodsPledge object identified by the goodsPledge parameter'
     * @return List a List of GoodsPledgeHistory objects.
     */
    public List<GoodsPledgeHistory> listGoodsPledgeHistory(Long goodsPledge)
    {
        List<GoodsPledgeHistory> result = this.getGoodsPledgeDao().listGoodsPledgeHistory(goodsPledge);

        return result;
    }
    
    
    /**
     * Load a <code>List</code> of GoodsPledge objects from the database that match the
     * goodsPledgeId parameter, the RegisterOfPledges and the GoodsPledge being related by an association.
     * @return a <code>List</code> of GoodsPledge objects that match the goodsPledgeId parameter.
     */
    public List<GoodsPledge> listGoodsPledgeByRegisterOfPledgesId(Long registerOfPledgesId)
    {
        List<GoodsPledge> result = this.getGoodsPledgeDao().listGoodsPledgeByRegisterOfPledgesId(registerOfPledgesId);
        
        return result;
    }
  
    
    
    /**
     * Creates a new entry in the GOODSPLEDGE table containing the parameters passed here.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the database generated Id of the newly created record.
     * @throws GoodsPledgeSaveException on failure to save.  
     */
    public Long createAndStoreGoodsPledge(GoodsPledge goodsPledge, Long userID)
        throws GoodsPledgeSaveException
    {
    	Long returnValue = new Long(0);
        
		try
		{
            returnValue = this.getGoodsPledgeDao().createAndStoreGoodsPledge(goodsPledge, userID);
		}
		catch (Exception ex)
		{
		     throw new GoodsPledgeSaveException("GoodsPledgeEntityDataManager::createAndStoreGoodsPledge", ex);
		}		
		
		return returnValue;
    }


    /**
     * Updates an existing entry in the GOODSPLEDGE table containing the parameters passed here.
     * Only non-null parameters will be applied to the underlying table so preserving any existing entries.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws GoodsPledgeLoadException if the existing record cannot be loaded
     * @throws GoodsPledgeSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public void updateGoodsPledge(GoodsPledge goodsPledge, Long userID)
        throws GoodsPledgeSaveException, GoodsPledgeLoadException, AuthorisationException, InvalidUserIDException
    {
    	
        if (Authorisation.isAuthorisedUpdate("GoodsPledge", userID, goodsPledge.getId()) == false)
        {
        	throw new AuthorisationException();
        }
    	
		try
		{
            this.getGoodsPledgeDao().updateGoodsPledge(goodsPledge, userID);
        }
		catch (Exception ex)
		{
		     throw new GoodsPledgeSaveException("GoodsPledgeEntityDataManager::updateGoodsPledge, GoodsPledgeID: " + goodsPledge.getId(), ex);
		}		
        
    }
    
    
    /**
     * Loads a GoodsPledgeFilter object based on the participantID of the currently logged in user
     * @param userId the userId is checked for authorisation to view the record. It is also the key to load a against the createdByID
     * column of the underlying record. There should only ever be one or zero filter records per GoodsPledge.
     * @ return a GoodsPledgeFilter object matching the parameter or a newly constructed, empty object if none can be found
     */
    public GoodsPledgeFilter loadGoodsPledgeFilter(Long userId) throws GoodsPledgeLoadException, AuthorisationException, InvalidUserIDException
    {
    	GoodsPledgeFilter goodsPledgeFilter = null;
    	
        /*if (Authorisation.isAuthorisedView("GoodsPledge", userId, GOODSPLEDGEID) == false)
        {
        	throw new AuthorisationException();
        }*/
    	

        if (userId != null)
        {
        	
        	try
        	{
				goodsPledgeFilter = (GoodsPledgeFilter)this.getGoodsPledgeDao().loadGoodsPledgeFilter(userId);
        	}
			catch (Exception ex)
			{
			     throw new GoodsPledgeLoadException("GoodsPledgeBoImpl::loadGoodsPledgeFilter", ex);
			}		
    		
            // Load all related singular objects
            
        }
    	
        return goodsPledgeFilter;
    }
    
    /**
     * Creates a new entry in the GOODSPLEDGEFILTER table containing the parameters passed here.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the userId which is also the assigned Id for the newly created record.
     * @throws GoodsPledgeSaveException on failure to save.  
     */
    public Long createAndStoreGoodsPledgeFilter(GoodsPledgeFilter goodsPledgeFilter,  Long userId)
        throws GoodsPledgeSaveException
    {
    	Long returnValue = new Long(0);
        
		try
		{
            goodsPledgeFilter.setId(userId);
			goodsPledgeFilter.setCreatedByID(userId);
            goodsPledgeFilter.setUpdatedByID(userId);
            goodsPledgeFilter.setDateCreated(new Date());
            goodsPledgeFilter.setDateUpdated(new Date());

            returnValue = this.getGoodsPledgeDao().createAndStoreGoodsPledgeFilter(goodsPledgeFilter, userId);
		}
		catch (Exception ex)
		{
		     throw new GoodsPledgeSaveException("GoodsPledgeBoImpl::createAndStoreGoodsPledgeFilter", ex);
		}		
		
		return returnValue;
    }
    
    
    /**
     * Updates an existing entry in the GOODSPLEDGEFILTER table and associated tables 
     * containing the parameters passed here. If the entry denoted by the userID does not exist then one is created.
     *	
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws GoodsPledgeSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public Long updateGoodsPledgeFilter(GoodsPledgeFilter goodsPledgeFilter, Long userId)
        throws GoodsPledgeLoadException, GoodsPledgeSaveException, AuthorisationException, InvalidUserIDException
    {
    	Long returnValue = new Long(0);
    	
        //if (Authorisation.isAuthorisedUpdate("GoodsPledge", userId, GOODSPLEDGEID) == false)
        //{
        //	throw new AuthorisationException();
        //}
    	
		try
		{
			goodsPledgeFilter.setId(userId);
			goodsPledgeFilter.setUpdatedByID(userId);
            goodsPledgeFilter.setDateUpdated(new Date());
            returnValue = this.getGoodsPledgeDao().updateGoodsPledgeFilter(goodsPledgeFilter, userId);
        }
		catch (Exception ex)
		{
		     throw new GoodsPledgeSaveException("GoodsPledgeBoImpl::updateGoodsPledgeFilter, userId: " + userId, ex);
		}	
		
		return returnValue;	
        
    }
    

    
    /**
     * Cleans up any Collection Objects created by the Class instance
     */
    protected void finalize() throws Throwable
    {
        super.finalize();
        
    }    
    
    
}
    
