package org.volunteertech.pledges.goodspledge.business;
import com.netgrains.security.AuthorisationException;
import com.netgrains.security.InvalidUserIDException;
import org.volunteertech.pledges.goodspledge.dao.GoodsPledge;
import org.volunteertech.pledges.goodspledge.dao.GoodsPledgeDao;
import org.volunteertech.pledges.goodspledge.dao.GoodsPledgeFilter;
import org.volunteertech.pledges.goodspledge.dao.GoodsPledgeHistory;
import org.volunteertech.pledges.goodspledge.dao.GoodsPledgeLoadException;
import org.volunteertech.pledges.goodspledge.dao.GoodsPledgeSaveException;
import java.util.List;
import java.util.Set;
import java.util.Date;
import java.math.BigDecimal;

import org.volunteertech.pledges.pledge.dao.RegisterOfPledges;



/**
 * The goods pledge screen is used to add/edit a new/existing pledge of services
 * This Interface has been generated by the XSLT processor from the meta data and represents the
 * interface of the Business Object(BO) for the GoodsPledge entity. A Business Object
 * is provided in order to provide a seperation from the Data Access implementation. 
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: * $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
public interface GoodsPledgeBo
{
    
    
    /**
     * Sets the required Data Access Object (DAO)
     * @param goodsPledgeDao the goodsPledgeDao used to access the goodsPledge entity.
     */
    public void setGoodsPledgeDao(GoodsPledgeDao goodsPledgeDao);
    

    /**
     * Returns the required Data Access Object (DAO)
     * @return the GoodsPledgeDao used to access the goodsPledge entity.
     */
    public GoodsPledgeDao getGoodsPledgeDao();
    

    
    /**
     * Loads a GoodsPledge object based on the GOODSPLEDGEID column
     * @param GOODSPLEDGEID the primary key for the underlying record.
     * @param userID the userID is checked for authorisation to view the record
     * @ return a GoodsPledge object matching the parameter or null if none can be found. The
     * method also returns null if the parameter is null.
     */
    public GoodsPledge load(Long goodsPledgeID, Long loggedInUserId) throws GoodsPledgeLoadException, AuthorisationException, InvalidUserIDException;
    
    

    /**
     * Load all existing GoodsPledge objects. 
     * @return List a List of GoodsPledge objects.
     */
    public List<GoodsPledge> listGoodsPledge();
    
    
    /**
     * Returns a <code>List</code> of GoodsPledge objects that have a matching pledgedGoods
     * @return List a List of GoodsPledge objects that match the pledgedGoods property given as parameter.
     * @param pledgedGoods the pledgedGoods on which to match the required records.
     */
    public List<GoodsPledge> listGoodsPledgeByPledgedGoods(Long pledgedGoods);

    /**
     * Returns a <code>List</code> of GoodsPledge objects that have a matching additionalInformation
     * @return List a List of GoodsPledge objects that match the additionalInformation property given as parameter.
     * @param additionalInformation the additionalInformation on which to match the required records.
     */
    public List<GoodsPledge> listGoodsPledgeByAdditionalInformation(String additionalInformation);

    /**
     * Returns a <code>List</code> of GoodsPledge objects that have a matching itemSize
     * @return List a List of GoodsPledge objects that match the itemSize property given as parameter.
     * @param itemSize the itemSize on which to match the required records.
     */
    public List<GoodsPledge> listGoodsPledgeByItemSize(String itemSize);

    /**
     * Returns a <code>List</code> of GoodsPledge objects that have a matching goodsCondition
     * @return List a List of GoodsPledge objects that match the goodsCondition property given as parameter.
     * @param goodsCondition the goodsCondition on which to match the required records.
     */
    public List<GoodsPledge> listGoodsPledgeByGoodsCondition(Long goodsCondition);

    /**
     * Returns a <code>List</code> of GoodsPledge objects that have a matching numberOfItems
     * @return List a List of GoodsPledge objects that match the numberOfItems property given as parameter.
     * @param numberOfItems the numberOfItems on which to match the required records.
     */
    public List<GoodsPledge> listGoodsPledgeByNumberOfItems(Long numberOfItems);

    
    /**
     * Load existing GoodsPledge objects from the database that have a createdByID column
     * that matches the userId parameter.
     * @return List a List of GoodsPledge objects that match the userId parameter.
     */
    public List<GoodsPledge> listGoodsPledgeByCreatedById(Long userId);
    
    
    /**
     * Load all existing GoodsPledgeHistory objects for a particular GoodsPledge.
     * The <code>List</code> of GoodsPledgeHistory objects contains all of the changes that have been made to the
     * GoodsPledge object identified by the goodsPledge parameter'
     * @return List a List of GoodsPledgeHistory objects.
     */
    public List<GoodsPledgeHistory> listGoodsPledgeHistory(Long goodsPledge) throws Exception;
    
    
    /**
     * Load a <code>List</code> of GoodsPledge objects from the database that match the
     * goodsPledgeId parameter, the RegisterOfPledges and the GoodsPledge being related by an association.
     * @return a <code>List</code> of GoodsPledge objects that match the goodsPledgeId parameter.
     */
    public List<GoodsPledge> listGoodsPledgeByRegisterOfPledgesId(Long registerOfPledgesId);
      
    
    /**
     * Creates a new entry in the GOODSPLEDGE table containing the parameters passed here.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the database generated Id of the newly created record.
     * @throws GoodsPledgeSaveException on failure to save.  
     */
    public Long createAndStoreGoodsPledge(GoodsPledge goodsPledge, Long userID)
        throws GoodsPledgeSaveException;


    /**
     * Updates an existing entry in the GOODSPLEDGE table containing the parameters passed here.
     * Only non-null parameters will be applied to the underlying table so preserving any existing entries.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws GoodsPledgeLoadException if the existing record cannot be loaded
     * @throws GoodsPledgeSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public void updateGoodsPledge(GoodsPledge goodsPledge, Long userID)
        throws GoodsPledgeSaveException, GoodsPledgeLoadException, AuthorisationException, InvalidUserIDException;
    
    
    /**
     * Loads a GoodsPledgeFilter object based on the participantID of the currently logged in user
     * @param userId the userId is checked for authorisation to view the record. It is also the key to load a against the createdByID
     * column of the underlying record. There should only ever be one or zero filter records per GoodsPledge.
     * @ return a GoodsPledgeFilter object matching the parameter or a newly constructed, empty object if none can be found
     */
    public GoodsPledgeFilter loadGoodsPledgeFilter(Long userId) throws GoodsPledgeLoadException, AuthorisationException, InvalidUserIDException;


    
    /**
     * Creates a new entry in the GOODSPLEDGEFILTER table containing the parameters passed here.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the userId which is also the assigned Id for the newly created record.
     * @throws GoodsPledgeSaveException on failure to save.  
     */
    public Long createAndStoreGoodsPledgeFilter(GoodsPledgeFilter goodsPledgeFilter, Long userId)
        throws GoodsPledgeSaveException;
    
    
    /**
     * Updates an existing entry in the GOODSPLEDGEFILTER table and associated tables 
     * containing the parameters passed here. If the entry denoted by the userID does not exist then one is created.
     *	
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws GoodsPledgeSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public Long updateGoodsPledgeFilter(GoodsPledgeFilter goodsPledgeFilter, Long userId)
        throws GoodsPledgeLoadException, GoodsPledgeSaveException, AuthorisationException, InvalidUserIDException;
    
}
    
