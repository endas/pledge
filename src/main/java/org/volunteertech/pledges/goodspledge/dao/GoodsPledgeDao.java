package org.volunteertech.pledges.goodspledge.dao;
import org.hibernate.SessionFactory;
import com.netgrains.security.AuthorisationException;
import com.netgrains.security.InvalidUserIDException;
import org.volunteertech.pledges.goodspledge.dao.GoodsPledge;
import org.volunteertech.pledges.goodspledge.dao.GoodsPledgeHistory;
import org.volunteertech.pledges.goodspledge.dao.GoodsPledgeLoadException;
import org.volunteertech.pledges.goodspledge.dao.GoodsPledgeSaveException;
import java.util.List;
import java.util.Set;
import java.util.Date;
import java.math.BigDecimal;

  
import org.volunteertech.pledges.pledge.dao.RegisterOfPledges;



/**
 * The goods pledge screen is used to add/edit a new/existing pledge of services
 * This Interface has been generated by the XSLT processor from the meta data and represents the
 * interface of the data access object(DAO) for the GoodsPledge entity.
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: * $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
public interface GoodsPledgeDao
{

    /**
     * Allows Spring to set the container managed SessionFactory instance
     * @param a Spring managed SessionFactory instance
     */    
    public void setSessionFactory(SessionFactory sessionFactory);


    /**
     * Loads a GoodsPledge object based on the goodsPledgeId column
     * @param goodsPledgeId the primary key for the underlying record.
     * @ return a GoodsPledge object matching the parameter or null if none can be found. The
     * method also returns null if the parameter is null.
     */
    public GoodsPledge load(Long goodsPledgeId, Long loggedInUserId) throws AuthorisationException, InvalidUserIDException;
    

    /**
     * Load all existing GoodsPledge objects from the database. Hibernate will generate the appropriate SQL,
     * send it to the database and populate a List of GoodsPledge objects with the data.
     * @return List a List of GoodsPledge objects.
     */
    public List<GoodsPledge> listGoodsPledge();
    
    
    /**
     * Load existing GoodsPledge objects from the database that have a pledgedGoods column
     * that matches the pledgedGoods parameter.
     * @return List a List of GoodsPledge objects that match the pledgedGoods parameter.
     */
    public List<GoodsPledge> listGoodsPledgeByPledgedGoods(Long pledgedGoods);

    /**
     * Load existing GoodsPledge objects from the database that have a additionalInformation column
     * that matches the additionalInformation parameter.
     * @return List a List of GoodsPledge objects that match the additionalInformation parameter.
     */
    public List<GoodsPledge> listGoodsPledgeByAdditionalInformation(String additionalInformation);

    /**
     * Load existing GoodsPledge objects from the database that have a itemSize column
     * that matches the itemSize parameter.
     * @return List a List of GoodsPledge objects that match the itemSize parameter.
     */
    public List<GoodsPledge> listGoodsPledgeByItemSize(String itemSize);

    /**
     * Load existing GoodsPledge objects from the database that have a goodsCondition column
     * that matches the goodsCondition parameter.
     * @return List a List of GoodsPledge objects that match the goodsCondition parameter.
     */
    public List<GoodsPledge> listGoodsPledgeByGoodsCondition(Long goodsCondition);

    /**
     * Load existing GoodsPledge objects from the database that have a numberOfItems column
     * that matches the numberOfItems parameter.
     * @return List a List of GoodsPledge objects that match the numberOfItems parameter.
     */
    public List<GoodsPledge> listGoodsPledgeByNumberOfItems(Long numberOfItems);

    
    /**
     * Load existing GoodsPledge objects from the database that have a createdByID column
     * that matches the userId parameter.
     * @return List a List of GoodsPledge objects that match the userId parameter.
     */
    public List<GoodsPledge> listGoodsPledgeByCreatedById(Long userId);
    
    
    /**
     * Load all existing GoodsPledgeHistory objects for a particular GoodsPledge from the database.
     * Hibernate will generate the appropriate SQL,
     * send it to the database and populate GoodsPledgeHistory objects with the data.
     * @return List a List of GoodsPledgeHistory objects.
     */
    public List<GoodsPledgeHistory> listGoodsPledgeHistory(Long goodsPledge);
    
    
    /**
     * Load a <code>List</code> of GoodsPledge objects from the database that match the
     * registerOfPledgesId parameter, the RegisterOfPledges and the GoodsPledge being related by an association.
     * @return a <code>List</code> of GoodsPledge objects that match the registerOfPledgesId parameter.
     */
    public List<GoodsPledge> listGoodsPledgeByRegisterOfPledgesId(Long  registerOfPledgesId);
  
    
    
    /**
     * Creates a new entry in the GOODSPLEDGE table containing the parameters passed here.
     *
     * @param userID the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the database generated Id of the newly created record.
     */
    public Long createAndStoreGoodsPledge(GoodsPledge goodsPledge, Long userId);


    /**
     * Updates an existing entry in the GOODSPLEDGE table containing the parameters passed here.
     * Only non-null parameters will be applied to the underlying table so preserving any existing entries.
     * @param the goodsPledge the GoodsPledge object to update in the database.
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     */
    public void updateGoodsPledge(GoodsPledge goodsPledge, Long userId) throws AuthorisationException, InvalidUserIDException;
    
    
    /**
     * Loads a GoodsPledgeFilter object based on the participantID of the currently logged in user
     * @param userID the userID is checked for authorisation to view the record. It is also the key to load a against the createdByID
     * column of the underlying record. There should only ever be one or zero filter records per GoodsPledge.
     * @ return a GoodsPledgeFilter object matching the parameter or a newly constructed, empty object if none can be found
     */
    public GoodsPledgeFilter loadGoodsPledgeFilter(Long userID) throws GoodsPledgeLoadException, AuthorisationException, InvalidUserIDException;


    
    /**
     * Creates a new entry in the GOODSPLEDGEFILTER table containing the parameters passed here.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the userId which is also the assigned Id for the newly created record.
     * @throws GoodsPledgeSaveException on failure to save.  
     */
    public Long createAndStoreGoodsPledgeFilter(GoodsPledgeFilter goodsPledgeFilter, Long userId)
        throws GoodsPledgeSaveException;
    
    
    /**
     * Updates an existing entry in the GOODSPLEDGEFILTER table and associated tables 
     * containing the parameters passed here. If the entry denoted by the userID does not exist then one is created.
     *	
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws GoodsPledgeSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public Long updateGoodsPledgeFilter(GoodsPledgeFilter goodsPledgeFilter, Long userId)
        throws GoodsPledgeLoadException, GoodsPledgeSaveException, AuthorisationException, InvalidUserIDException;
    
	
	/**
	 * Returns a List of the RegisterOfPledges that own the GoodsPledge identified by the
	 * id given as a parameter.
	 * @param goodspledgeId the id of the GoodsPledge for which the RegisterOfPledges should be resolved.
	 * @param userId the userId of the currently logged in user.
	 */
	public List<RegisterOfPledges> listRegisterOfPledgesByGoodsPledgeId(Long goodspledgeId, Long userId);

}
    
