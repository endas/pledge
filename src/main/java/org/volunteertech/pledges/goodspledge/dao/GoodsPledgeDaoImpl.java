package org.volunteertech.pledges.goodspledge.dao;
import org.hibernate.SessionFactory;
import com.netgrains.security.Authorisation;
import com.netgrains.security.AuthorisationException;
import com.netgrains.security.InvalidUserIDException;
import org.volunteertech.pledges.goodspledge.dao.GoodsPledge;
import org.volunteertech.pledges.goodspledge.dao.GoodsPledgeHistory;
import org.volunteertech.pledges.goodspledge.dao.GoodsPledgeLoadException;
import org.volunteertech.pledges.goodspledge.dao.GoodsPledgeSaveException;

import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.ArrayList;
import java.util.Arrays;
import java.math.BigDecimal;

import org.springframework.stereotype.Repository;
import org.springframework.util.StringUtils;


import org.volunteertech.pledges.pledge.dao.RegisterOfPledges;




/**
 * The goods pledge screen is used to add/edit a new/existing pledge of services
 * This class has been generated by the XSLT processor from the metadata and represents the
 * implementation of the data access object for the GoodsPledge entity.
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: * $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
@Repository 
public class GoodsPledgeDaoImpl implements GoodsPledgeDao
{
    /**
     * The Hibernate SessionFactory instance
     */
    private SessionFactory sessionFactory;
    
    
    

    /**
     * Default Constructor for the GoodsPledge entity data manager
     */
    public GoodsPledgeDaoImpl()
    {
    	//Initialise the related Object stores
        
    }
    

    /**
     * Allows Spring to set the container managed SessionFactory instance
     * @param a Spring managed SessionFactory instance
     */    
    public void setSessionFactory(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }


    /**
     * Loads a GoodsPledge object based on the goodsPledgeId column
     * @param GoodsPledgeId the primary key for the underlying record.
     * @ return a GoodsPledge object matching the parameter or null if none can be found. The
     * method also returns null if the parameter is null.
     */
    public GoodsPledge load(Long goodsPledgeId, Long loggedInUserId) throws AuthorisationException, InvalidUserIDException
    {
        if (Authorisation.isAuthorisedView("GoodsPledge", loggedInUserId, goodsPledgeId) == false)
        {
        	throw new AuthorisationException();
        }
    
    	GoodsPledge hibernateEntity = null;
    	
        if (goodsPledgeId != null)
        {
			hibernateEntity = (GoodsPledge)this.sessionFactory.getCurrentSession().get(GoodsPledgeImpl.class, goodsPledgeId);

            // Load all related singular objects
            
        }
    	
        return hibernateEntity;
    }
    
    
    

    /**
     * Load all existing GoodsPledge objects from the database. Hibernate will generate the appropriate SQL,
     * send it to the database and populate GoodsPledge objects with the data.
     * @return List a List of GoodsPledge objects.
     */
    public List<GoodsPledge> listGoodsPledge()
    {
        @SuppressWarnings("unchecked")
        List<GoodsPledge> result = this.sessionFactory.getCurrentSession().createQuery("from GoodsPledgeImpl as goodsPledge order by goodsPledge.id asc").list();

        return result;
    }

    
    /**
     * Load existing GoodsPledge objects from the database that have a pledgedGoods column
     * that matches the pledgedGoods parameter.
     * @return List a List of GoodsPledge objects that match the pledgedGoods parameter.
     */
    public List<GoodsPledge> listGoodsPledgeByPledgedGoods(Long pledgedGoods)
    {
        @SuppressWarnings("unchecked")
        List<GoodsPledge> result = this.sessionFactory.getCurrentSession().createQuery("from GoodsPledgeImpl as goodsPledge where goodsPledge.pledgedGoods = :pledgedgoods order by goodsPledge.id asc").setParameter("pledgedgoods", pledgedGoods).list();

        return result;
    }

    /**
     * Load existing GoodsPledge objects from the database that have a additionalInformation column
     * that matches the additionalInformation parameter.
     * @return List a List of GoodsPledge objects that match the additionalInformation parameter.
     */
    public List<GoodsPledge> listGoodsPledgeByAdditionalInformation(String additionalInformation)
    {
        @SuppressWarnings("unchecked")
        List<GoodsPledge> result = this.sessionFactory.getCurrentSession().createQuery("from GoodsPledgeImpl as goodsPledge where goodsPledge.additionalInformation = :additionalinformation order by goodsPledge.id asc").setParameter("additionalinformation", additionalInformation).list();

        return result;
    }

    /**
     * Load existing GoodsPledge objects from the database that have a itemSize column
     * that matches the itemSize parameter.
     * @return List a List of GoodsPledge objects that match the itemSize parameter.
     */
    public List<GoodsPledge> listGoodsPledgeByItemSize(String itemSize)
    {
        @SuppressWarnings("unchecked")
        List<GoodsPledge> result = this.sessionFactory.getCurrentSession().createQuery("from GoodsPledgeImpl as goodsPledge where goodsPledge.itemSize = :itemsize order by goodsPledge.id asc").setParameter("itemsize", itemSize).list();

        return result;
    }

    /**
     * Load existing GoodsPledge objects from the database that have a goodsCondition column
     * that matches the goodsCondition parameter.
     * @return List a List of GoodsPledge objects that match the goodsCondition parameter.
     */
    public List<GoodsPledge> listGoodsPledgeByGoodsCondition(Long goodsCondition)
    {
        @SuppressWarnings("unchecked")
        List<GoodsPledge> result = this.sessionFactory.getCurrentSession().createQuery("from GoodsPledgeImpl as goodsPledge where goodsPledge.goodsCondition = :goodscondition order by goodsPledge.id asc").setParameter("goodscondition", goodsCondition).list();

        return result;
    }

    /**
     * Load existing GoodsPledge objects from the database that have a numberOfItems column
     * that matches the numberOfItems parameter.
     * @return List a List of GoodsPledge objects that match the numberOfItems parameter.
     */
    public List<GoodsPledge> listGoodsPledgeByNumberOfItems(Long numberOfItems)
    {
        @SuppressWarnings("unchecked")
        List<GoodsPledge> result = this.sessionFactory.getCurrentSession().createQuery("from GoodsPledgeImpl as goodsPledge where goodsPledge.numberOfItems = :numberofitems order by goodsPledge.id asc").setParameter("numberofitems", numberOfItems).list();

        return result;
    }

    
    /**
     * Load existing GoodsPledge objects from the database that have a createdByID column
     * that matches the createdById parameter.
     * @return List a List of GoodsPledge objects that match the createdById parameter.
     */
    public List<GoodsPledge> listGoodsPledgeByCreatedById(Long userId)
    {
        @SuppressWarnings("unchecked")
        List<GoodsPledge> result = this.sessionFactory.getCurrentSession().createQuery("from GoodsPledgeImpl as goodsPledge where goodsPledge.createdByID = :userId order by goodsPledge.id asc").setParameter("userId", userId).list();

        return result;
    }
    
    
    /**
     * Load all existing GoodsPledgeHistory objects for a particular GoodsPledge from the database.
     * Hibernate will generate the appropriate SQL,
     * send it to the database and populate a List of GoodsPledgeHistory objects with the data.
     * @return List a List of GoodsPledgeHistory objects.
     */
    public List<GoodsPledgeHistory> listGoodsPledgeHistory(Long goodsPledge)
    {
        
        @SuppressWarnings("unchecked")
        List<GoodsPledgeHistory> result = this.sessionFactory.getCurrentSession().createQuery("from GoodsPledgeHistory as goodsPledgeHistory where goodsPledgeHistory.goodsPledgeId = ? order by goodsPledgeHistory.id asc").setLong(0, goodsPledge).list();

        return result;
    }
    
    
    /**
     * Load a <code>List</code> of GoodsPledge objects from the database that match the
     * registerOfPledgesId parameter, the RegisterOfPledges and the GoodsPledge defined as the one-to-many association in RegisterOfPledges.goodsPledges in ApplicationDef.xml.
     * @return a <code>List</code> of GoodsPledge objects that match the registerOfPledgesId parameter.
     */
    public List<GoodsPledge> listGoodsPledgeByRegisterOfPledgesId(Long  registerOfPledgesId)
    {
        @SuppressWarnings("unchecked")
        
        List<GoodsPledge> result = this.sessionFactory.getCurrentSession().createQuery("from GoodsPledgeImpl as goodsPledge where goodsPledge.registerOfPledges.id = :registerOfPledgesId order by goodsPledge.id asc").setParameter("registerOfPledgesId", registerOfPledgesId).list();

        return result;
    }
  
    
    /**
     * Creates a new entry in the GOODSPLEDGE table containing the parameters passed here.
     *
     * @param userID the userID of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the database generated Id of the newly created record.
     * @throws GoodsPledgeSaveException on failure to save.  
     */
    public Long createAndStoreGoodsPledge(GoodsPledge goodsPledge, Long userId)
    {
    	Long returnValue = new Long(0);

        goodsPledge.setCreatedByID(userId);
        goodsPledge.setUpdatedByID(userId);
        goodsPledge.setDateCreated(new Date());
        goodsPledge.setDateUpdated(new Date());
        
        this.sessionFactory.getCurrentSession().save(goodsPledge);
            
        returnValue = goodsPledge.getId();
		
		return returnValue;
    }


    /**
     * Updates an existing entry in the GOODSPLEDGE table containing the parameters passed here.
     * Only non-null parameters will be applied to the underlying table so preserving any existing entries.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @param the goodsPledge the GoodsPledge object to update in the database.
     * @param userId the userId of the currently logged in user. 
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userId passed as parameter is not valid
     */
    public void updateGoodsPledge(GoodsPledge goodsPledge, Long userId) throws AuthorisationException, InvalidUserIDException
    {
        if (Authorisation.isAuthorisedUpdate("GoodsPledge", userId, goodsPledge.getId()) == false)
        {
        	throw new AuthorisationException();
        }
    	
        goodsPledge.setUpdatedByID(userId);
        goodsPledge.setDateUpdated(new Date());
        this.sessionFactory.getCurrentSession().update(goodsPledge);
    }
    
    
    /**
     * Loads a GoodsPledgeFilter object based on the participantID of the currently logged in user
     * @param userID the userID is checked for authorisation to view the record. It is also the key to load a against the createdByID
     * column of the underlying record. There should only ever be one or zero filter records per GoodsPledge.
     * @ return a GoodsPledgeFilter object matching the parameter or a newly constructed, empty object if none can be found
     */
    public GoodsPledgeFilter loadGoodsPledgeFilter(Long userID) throws GoodsPledgeLoadException, AuthorisationException, InvalidUserIDException
    {
    	GoodsPledgeFilter hibernateEntity = null;
    	
        /*if (Authorisation.isAuthorisedView("GoodsPledge", userID, GOODSPLEDGEID) == false)
        {
        	throw new AuthorisationException();
        }*/
    	

        if (userID != null)
        {
        	
        	try
        	{
				hibernateEntity = (GoodsPledgeFilter)this.sessionFactory.getCurrentSession().load(GoodsPledgeFilter.class, userID);
        	}
			catch (Exception ex)
			{
			     throw new GoodsPledgeLoadException("GoodsPledgeEntityDataManager::loadGoodsPledgeFilter", ex);
			}		
    		
            // Load all related singular objects
            
        }
    	
        return hibernateEntity;
    }
    
    /**
     * Creates a new entry in the GOODSPLEDGEFILTER table containing the parameters passed here.
     *
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @return the userID which is also the assigned Id for the newly created record.
     * @throws GoodsPledgeSaveException on failure to save.  
     */
    public Long createAndStoreGoodsPledgeFilter(GoodsPledgeFilter goodsPledgeFilter,  Long userId)
        throws GoodsPledgeSaveException
    {
    	Long returnValue = new Long(0);
        

		try
		{
            goodsPledgeFilter.setId(userId);
            goodsPledgeFilter.setCreatedByID(userId);
            goodsPledgeFilter.setUpdatedByID(userId);
            goodsPledgeFilter.setDateCreated(new Date());
            goodsPledgeFilter.setDateUpdated(new Date());

            this.sessionFactory.getCurrentSession().save(goodsPledgeFilter);
            
            returnValue = goodsPledgeFilter.getId();
		}
		catch (Exception ex)
		{
		     throw new GoodsPledgeSaveException("GoodsPledgeEntityDataManager::createAndStoreGoodsPledgeFilter", ex);
		}		
		
		return returnValue;
    }
    
    
    /**
     * Updates an existing entry in the GOODSPLEDGEFILTER table and associated tables 
     * containing the parameters passed here. If the entry denoted by the userID does not exist then one is created.
     *	
     * @param userId the userId of the currently logged in user, this can be retrieved from the session.
     * This value must be set for auditing purposes.
     * @throws GoodsPledgeSaveException if there is an issue populating or saving the updated object
     * @throws AuthorisationException if the user is not authorised to update the object
     * @throws InvalidUserIDException if the userID passed as parameter is not valid
     */
    public Long updateGoodsPledgeFilter(GoodsPledgeFilter goodsPledgeFilter, Long userId)
        throws GoodsPledgeLoadException, GoodsPledgeSaveException, AuthorisationException, InvalidUserIDException
    {
    	Long returnValue = new Long(0);
    	
        //if (Authorisation.isAuthorisedUpdate("GoodsPledge", userID, GOODSPLEDGEID) == false)
        //{
        //	throw new AuthorisationException();
        //}
    	
		try
		{
			goodsPledgeFilter.setId(userId);
            goodsPledgeFilter.setUpdatedByID(userId);
            goodsPledgeFilter.setDateUpdated(new Date());
            this.sessionFactory.getCurrentSession().update(goodsPledgeFilter);
            returnValue = goodsPledgeFilter.getId();
        }
		catch (Exception ex)
		{
		     throw new GoodsPledgeSaveException("GoodsPledgeDaoImpl::updateGoodsPledgeFilter, userId: " + userId, ex);
		}	
		
		return returnValue;	
        
    }
    
	
	/**
	 * Returns a List of the RegisterOfPledges that own the GoodsPledge identified by the
	 * id given as a parameter.
	 * @param goodsPledgeId the id of the GoodsPledge for which the RegisterOfPledges should be resolved.
	 * @param userId the userId of the currently logged in user.
	 */
	public List<RegisterOfPledges> listRegisterOfPledgesByGoodsPledgeId(Long goodsPledgeId, Long userId){
		@SuppressWarnings("unchecked")
		List<RegisterOfPledges> result = this.sessionFactory.getCurrentSession().createQuery("select distinct registerOfPledges from RegisterOfPledgesImpl as registerOfPledges inner join registerOfPledges.goodsPledges as goodsPledge where goodsPledge.id = :goodsPledgeId order by registerOfPledges.id asc").setParameter("goodsPledgeId", goodsPledgeId).list();
    	return result;
	}

    
    /**
     * Converts a Comma Seperated Volume (delimited by ",") to a <code>List<code/> of type <code>String<code/>
     */
	private static List<String> convertCommaDelimitedStringToList(String delimitedString) {

		List<String> result = new ArrayList<String>();

		if (!StringUtils.isEmpty(delimitedString)) {
			result = Arrays.asList(StringUtils.delimitedListToStringArray(delimitedString, ","));
		}
		return result;

	}

    /**
     * Converts a List of type String to a Comma Seperated Volume (delimited by ",") 
     */
	private String convertListToCommaDelimitedString(List<String> list) {

		String result = "";
		if (list != null) {
			result = StringUtils.arrayToCommaDelimitedString(list.toArray());
		}
		return result;

	}

    /**
     * Cleans up any Collection Objects created by the Class instance
     */
    protected void finalize() throws Throwable
    {
        super.finalize();
        
    }    
    
}
    
