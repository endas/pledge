package org.volunteertech.pledges.goodspledge.web;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.SortedMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import java.util.Locale;

import org.volunteertech.pledges.goodspledge.dao.GoodsPledge;
import org.volunteertech.pledges.goodspledge.dao.GoodsPledgeImpl;
import org.volunteertech.pledges.goodspledge.service.GoodsPledgeService;
import org.volunteertech.pledges.goodspledge.dao.GoodsPledgeLoadException;
import org.volunteertech.pledges.goodspledge.dao.GoodsPledgeSaveException;
import org.volunteertech.pledges.goodspledge.validator.GoodsPledgeFormValidator;
import org.volunteertech.pledges.main.web.BaseController;
import org.volunteertech.pledges.users.security.SecurityUser;

import org.volunteertech.pledges.reference.ReferenceStore;


import org.volunteertech.pledges.pledge.dao.RegisterOfPledgesImpl;




/**
 * The goods pledge screen is used to add/edit a new/existing pledge of services
 * The Spring GoodsPledgeRestController to handle restful web service requests.
 * This class has been generated by the XSLT processor from the metadata and represents the
 * the Spring GoodsPledgeRestController to handle restful web service requests.
 * <P> 
 * It is essential that methods added to this class are given JavaDoc comments to allow
 * documentation to be generated. For a description of JavaDoc refer to The JavaDoc documentation.
 * A link is provided below.
 * <P>
 * @author Michael O'Connor
 * @version $Revision$
 * Date: $Date$
 * @see <a href="http://java.sun.com/j2se/javadoc/writingdoccomments/index.html">>JavaDoc Documentation</a> 
 * Change Log
 * ----------
 * $Log$
 *
 */
@RestController
public class GoodsPledgeRestController extends BaseController
{
	final Logger logger = LoggerFactory.getLogger(GoodsPledgeRestController.class);
	
	@Autowired
	private ReferenceStore referenceStore;
	
	@Autowired
	private GoodsPledgeService goodsPledgeService;
	
	


	/**
	 * Returns a JSON representation of all GoodsPledge records
	 * @return the JSON representation of all GoodsPledge.
	 */
	@RequestMapping(value = "/restful/goodspledge/list", method = RequestMethod.GET)
	@ResponseBody
    public List<GoodsPledge> showAllGoodsPledge(Authentication authentication, Locale locale) {
		logger.info("Inside restful getGoodsPledge method...");
		List <GoodsPledge> goodsPledgeList = null;
		SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();		
		
		try{
			// TODO: Needs exception handling policy
	    	goodsPledgeList = goodsPledgeService.listGoodsPledge();
	    	goodsPledgeList = goodsPledgeService.translateReferenceValues(goodsPledgeList, locale);
		}
		catch (Exception ex){
			logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}		
		
		
    	return goodsPledgeList;
    }


	
	/**
	 * Returns a JSON representation of the GoodsPledge record that matches the id parameter
	 * @param id the primary key by which to search
	 * @return the GoodsPledge with the relevant primary key.
	 */
	@RequestMapping(value = "/restful/goodspledge", method = RequestMethod.GET)
	@ResponseBody
    public GoodsPledge getGoodsPledge(Authentication authentication, @RequestParam(value="id") String id) {
		logger.info("Inside restful getGoodsPledge method...");
		GoodsPledge goodsPledge = null;
		SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();		
		
		try{
			// TODO: Needs exception handling policy
	    	goodsPledge = goodsPledgeService.load(new Long(id), userId);
		}
		catch (Exception ex){
			logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}		
		
		
    	return goodsPledge;
    }
    
    @RequestMapping(value = "/restful/goodspledge/update", method = RequestMethod.POST)
    @ResponseBody
    public List<GoodsPledge> updateGoodsPledge(Authentication authentication, @RequestBody GoodsPledge goodsPledge) {
        logger.debug("In the updateGoodsPledge controller and got Id: " + goodsPledge.getId());

		SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();
        
		try{
			// TODO needs security update
			goodsPledgeService.storeGoodsPledge(goodsPledge, userId);
		}
		catch (Exception ex){
		// TODO needs custom exception handling
		logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}
    	List<GoodsPledge> goodsPledgeList = goodsPledgeService.listGoodsPledge();
        
        return goodsPledgeList;
    }
    
    
    @RequestMapping(value = "/restful/goodspledge/new", method = RequestMethod.POST)
    @ResponseBody
    public List<GoodsPledge> addGoodsPledge(Authentication authentication, @RequestBody GoodsPledge goodsPledge) {
        logger.debug("In the addGoodsPledge controller and got Id: " + goodsPledge.getId());
        SecurityUser user = (SecurityUser)authentication.getPrincipal();
        Long userId = user.getApplicationUser().getId();

		try{
			// TODO needs security update
			goodsPledgeService.storeGoodsPledge(goodsPledge, userId);
		}
		catch (Exception ex){
		// TODO needs custom exception handling
		logger.error("Exception caught !!!!!!!!!!!!!!", ex);
		}
    	List<GoodsPledge> goodsPledgeList = goodsPledgeService.listGoodsPledge();
        
        return goodsPledgeList;
    }
    
    
    
	/**
	 * Returns a JSON representation of a list of GoodsPledge entries that match the registerOfPledgesId
	 * parameter.
	 * @param registerOfPledgesId by which to filter.
	 * @return a <code>List<GoodsPledge></code> containing the GoodsPledge
	 * entries that match the registerOfPledgesId
	 */
	@RequestMapping(value = "/restful/goodspledgebyregisterofpledgeslist", method = RequestMethod.GET)
    public List<GoodsPledge> getGoodsPledgeByRegisterOfPledgesId(@RequestParam(value="registerOfPledgesId") String registerOfPledgesId) {
		logger.info("Inside getGoodsPledgeByRegisterOfPledgesId() method...");
		
    	List<GoodsPledge> goodsPledgeList = goodsPledgeService.getGoodsPledgeBo().getGoodsPledgeDao().listGoodsPledgeByRegisterOfPledgesId(new Long(registerOfPledgesId));
		
    	return goodsPledgeList;
    }
  
}
